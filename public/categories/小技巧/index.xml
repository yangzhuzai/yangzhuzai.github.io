<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小技巧 on 养猪日记</title>
    <link>http://localhost:1313/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
    <description>Recent content in 小技巧 on 养猪日记</description>
    <image>
      <title>养猪日记</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.135.0</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Jan 2025 15:06:59 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>003 JS逆向实战案例一</title>
      <link>http://localhost:1313/posts/skill/003-js%E9%80%86%E5%90%91%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E4%B8%80/</link>
      <pubDate>Fri, 10 Jan 2025 15:06:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/skill/003-js%E9%80%86%E5%90%91%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B%E4%B8%80/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;实战中遇到的一个案例的分析，真实环境，厚马处理。&lt;/p&gt;
&lt;h1 id=&#34;yakit动态rsa动态aes&#34;&gt;Yakit+动态RSA+动态AES&lt;/h1&gt;
&lt;p&gt;这个站的环境比较复杂，当年测试的时候也是花了一些功夫，首先不确定是burp哪里的问题，可能是指纹，或者是更底层导致的，即使使用了Awesome-TLS插件也无法正常访问，会出现以下报错：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250108202442.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;随后尝试使用yakit进行抓包，发现是ok的，于是就尝试使用yakit进行渗透，yakit上没有autodecoder，但是可以使用热加载技术来实现，首先还是先搞清楚是使用的什么加密：&lt;/p&gt;
&lt;p&gt;首先是正常访问，抓包情况如下，第二个数据包是这样的，最开始的时候并不知道什么作用，后面经过一段时间的尝试后，才知道是什么东西，这里可以先不管：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109162203.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;先前正常访问了一次，这里返回去查看v_jstools的相关情况，在明文处发现了解密函数的内容：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109164015.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;定位函数触发位置，其实比较清晰的知道使用的是AES算法，模式为ECB，不需要IV：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109164233.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;打上断点，随便请求一个功能点，即可获得响应解密密钥Yn7OPMq3J52Hvoyh：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109164839.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;就当我以为就这么结束的时候，发现这个密钥解不开请求的加密内容，难道请求的密钥和响应解密密钥不一样？于是找到了加密的函数，再次上断点查看，果然不一样，密钥为9ypTbpBcWA54LHBn：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109165114.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;解密验证，基本上就得到了成功的验证，到这一步我都没觉得有什么问题，注意一下数据包中带有key参数，我之前认为是使用rsa公钥加密了的aes密钥，在我们知道aes密钥的情况下没有用，但是随后发生的事情直接打了我的脸：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109165634.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;过了一会儿后，我尝试对服务器返回的内容进行解密，发现解密失败了，aes的密钥进行了变动，那么这里就出问题了，明明是几秒内的包，为什么密钥就进行了变动，而且客户端还能正常解密，这让我必须把目光放在这个key参数上了，重新抓一组干净的报文，我们来看看问题在哪儿：&lt;/p&gt;
&lt;p&gt;在这组数据包中，看起来存在加密的只有两个包，一个是上文提到过的serverKey，另外一个就是我们的登录包了，那么仔细查看后，我们可以发现，serverKey的报文只发送了key，没有data数据，而serverKey是存在data数据的，这里先没想明白，继续往下看：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109233141.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;我们重放这个登录包，这里的secret来自serverKey响应中的key参数，直接带过来了：&lt;/p&gt;
&lt;p&gt;这是serverKey的数据包：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109233701.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;重放后发现响应的key和data都不一样了，aes密钥如果固定的话，这里的数据应该不会变动才对，那么这样的话，基本可以确定，key和data应该是一组的，key应该就是data的密钥，不过需要进行解密，这件事其实不难，我们接着断点：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109233518.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;借助v_jstools，我们直接定位到密文出现的最后位置：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109234106.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;然后挨个步过，最后定位到了一个函数附近：&lt;/p&gt;
&lt;p&gt;这段代码很好看懂，第一个解密了key，获得了data的密钥，第二个就是解密data:&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109234441.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;呐我们要需要key的密钥是多少，控制台输出一下即可：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109234654.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;我们再看一下加密方式是什么，rsa：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109234949.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;验证一下，确实可以解密成功，那么现在有个问题存在了，rsa的解密密钥是否会进行变动呢，如果不会变动，我们的逆向到此其实就可以结束了：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250109235804.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;运气不错，发现rsa的解密密钥是不会变动的，可以长期使用，而请求报文中也存在同样的key，使用同样的方法获取到加密方法即可：&lt;/p&gt;
&lt;p&gt;这里有个意外发现，这个rsa的公钥来自serverKey的响应内容：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250110002359.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;那么结合目前获得的信息，大概可以还原整体逻辑：&lt;/p&gt;
&lt;p&gt;1、首先是serverKey请求：当前客户端会随机生成一对公私钥，发送给服务器公钥，服务器返回一个公钥，目测也是随机生成的，还有一个key参数，在后续的请求中，客户端会带有这个dd44f119-139d-44f0-83d1-2368177c8b7e，猜测是用来约定密钥参数的：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250110112003.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;2、后续请求，带有secret: dd44f119-139d-44f0-83d1-2368177c8b7e，data是发送的数据，使用了aes进行加密，密钥是也是随机生成的，使用第一步中服务器返回的rsa公钥进行加密。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/1_img/Pasted%20image%2020250110113037.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;3、同理，服务器返回的内容，使用了先前约定的客户端公钥加密aes密钥，使用aes密钥加密数据data。&lt;/p&gt;
&lt;p&gt;理清了加解密逻辑，我们就可以大致琢磨一下hook代码逻辑了，首先是作为中间人的我们，如果是向服务器发送的加密后的内容，我们是无法破解的，因为我们没有服务器的私钥，但是看到客户端的原始数据对我们来说并不难，服务器返回的内容，我们可以顺利解密，因为客户端的私钥我们可以知道，同时，只要不刷新浏览器，secret: dd44f119-139d-44f0-83d1-2368177c8b7e是不会变动的，基本满足了代码逻辑需求，可以实现修改数据包重放了和返回结果的查看了。&lt;/p&gt;
&lt;p&gt;这里来看一个功能点，登录，由于前面的解析，其实只要请求包中的secret: 227d83cf-9959-400b-8d24-4d0de6226bed和key参数不动，我们就可以一直使用一样的aes密钥对请求包进行加密，直接改动data即可，其他东西不需要改动：&lt;/p&gt;
&lt;p&gt;yakit热加载配置如下，这个可以直接实现爆破：&lt;/p&gt;</description>
    </item>
    <item>
      <title>002 常见前端加密算法</title>
      <link>http://localhost:1313/posts/skill/002-%E5%B8%B8%E8%A7%81%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 08 Jan 2025 15:06:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/skill/002-%E5%B8%B8%E8%A7%81%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;为了更好的对加密数据进行解密，了解常见的加密算法是需要的，这里只讨论数据加密，散列和编码不讨论。&lt;/p&gt;
&lt;h1 id=&#34;1对称加密&#34;&gt;1、对称加密&lt;/h1&gt;
&lt;h2 id=&#34;aes&#34;&gt;AES&lt;/h2&gt;
&lt;p&gt;高级加密标准，加密和解密使用相同的密钥，作为使用者我们需要关注的参数有6个：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. 密钥 (Key)

2. 明文 (Plaintext)

3. 加密模式 (Cipher Mode)
常见模式：
ECB（电子密码本模式）：简单，但不推荐使用（易遭受模式攻击）。
CBC（加密块链模式）：安全性高，但需要初始化向量 (IV)。
CFB（加密反馈模式）：支持流式加密。
OFB（输出反馈模式）：避免错误传播。
GCM（加洛瓦计数器模式）：提供加密和认证功能。

4. 填充方式 (Padding Scheme)
常见方式：
Pkcs5
Pkcs7
AnsiX923
Iso97971
Iso10126
ZeroPadding
NoPadding

5. 初始化向量 (IV)
用于某些加密模式（如 CBC 和 GCM），确保相同的明文在每次加密时生成不同的密文。
要求：
长度为 16 字节（128 位）。
必须随机生成且不可重复。
注意：IV 不需要保密，但需要在加密时和解密时一致。

6. 密文 (Ciphertext)
密文常见两种格式：Hex、Base64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在线解密：https://tool.hiofd.com/aes-encrypt-online/&lt;/p&gt;
&lt;p&gt;案例，来自开源靶场encrypt-labs：&lt;/p&gt;
&lt;p&gt;使用v_jstools js hook工具监控函数：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/jmsf_img/Pasted%20image%2020250107105633.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;定位加密函数位置：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/jmsf_img/Pasted%20image%2020250107105926.png&#34; alt=&#34;&#34;  /&gt;

打上断点查看：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/jmsf_img/Pasted%20image%2020250107110126.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这里其实比较清晰了，我们关注的几个参数：&lt;/p&gt;
&lt;p&gt;1、加密模式为：CBC
2、初始化向量 (IV)为：1234567890123456
3、填充方式 (Padding Scheme)为：PKCS7
4、密钥 (Key)为：1234567890123456&lt;/p&gt;</description>
    </item>
    <item>
      <title>001 JS逆向</title>
      <link>http://localhost:1313/posts/skill/001-js%E9%80%86%E5%90%91/</link>
      <pubDate>Fri, 18 Oct 2024 14:25:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/skill/001-js%E9%80%86%E5%90%91/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;实战渗透项目很多时候都能遇到数据包加密的情况，很多时候会觉得棘手，因为很多改包的动作无法实现，但是这样不完全是坏处，特别是一些参数加密的时候，由于数据包加密，所以他们天然存在WAF绕过，将我们的payload加入JS加密的文本中传输，WAF几乎很难识别。&lt;/p&gt;
&lt;p&gt;目前有两种解决方案，一种是扣JS代码，获取所有的加密函数，中间很容易遇到函数嵌套，陷入扣代码的困局，还有一种是JS-RPC的解决方案，详情可以参考：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://xz.aliyun.com/t/14629?time__1311=GqAhYK0KBKAIP05DKBOxmODRrzc6LK%3D63x#toc-2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JS-RPC，详情查看使用方式配合上文食用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://github.com/jxhczhl/JsRpc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单记录一些遇到的网站，以及如何配合burp插件，方便我们进行渗透：&lt;/p&gt;
&lt;h1 id=&#34;一常规扣代码解密&#34;&gt;一、常规扣代码解密&lt;/h1&gt;
&lt;p&gt;返回数据包中带有encrypt_data：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/WEBRESOURCE06fb036892c213ea424de433727ff58bimage.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;浏览器ctrl+shift+f搜索encrypt_data，找到对应的JS代码文件，找到符合要求的，必须为某方法，全部包含该参数的，而非只取某个值，打上断点可以看URL是否正确，以及参数是否对应：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/WEBRESOURCEce73a6a38d5282da884652c227096b51image.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;控制台再次确认参数是否找正确了：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/WEBRESOURCE3359011f28caf526691da6e5769de273image.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;源码里面点进去，找到相关函数：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/WEBRESOURCEbfa2c9d9cd97a6475566dd72c44bc67bimage.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;把相关的内容放到本地进行调试：&lt;/p&gt;
&lt;p&gt;这里出现错误，W未定义：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/WEBRESOURCE1d3417e238773a0070ce8234a73d1150image.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;把W也复制过来：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/WEBRESOURCE839694b9468a1ab934fb75653f1abc39image.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;继续把J也复制过来，中间还会遇到好几个函数缺失，都复制过来即可：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/skills_img/WEBRESOURCE639721e284de5468f2153dc055aa0959image.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;这里就算是逆向完成了，接下来就要做代码层面的嵌入了，用python的execjs库即可：&lt;/p&gt;
&lt;p&gt;pip install pyexecjs2&lt;/p&gt;
&lt;p&gt;demo01.py&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import requests
import execjs

headers = {
    &amp;#39;accept&amp;#39;: &amp;#39;application/json, text/plain, */*&amp;#39;,
    &amp;#39;accept-language&amp;#39;: &amp;#39;zh-CN&amp;#39;,
    &amp;#39;cache-control&amp;#39;: &amp;#39;no-cache&amp;#39;,
    &amp;#39;content-type&amp;#39;: &amp;#39;application/x-www-form-urlencoded&amp;#39;,
    &amp;#39;origin&amp;#39;: &amp;#39;https://rxxx&amp;#39;,
    &amp;#39;pragma&amp;#39;: &amp;#39;no-cache&amp;#39;,
    &amp;#39;priority&amp;#39;: &amp;#39;u=1, i&amp;#39;,
    &amp;#39;referer&amp;#39;: &amp;#39;https://xxx/&amp;#39;,
    &amp;#39;sec-fetch-dest&amp;#39;: &amp;#39;empty&amp;#39;,
    &amp;#39;sec-fetch-mode&amp;#39;: &amp;#39;cors&amp;#39;,
    &amp;#39;sec-fetch-site&amp;#39;: &amp;#39;cross-site&amp;#39;,
    &amp;#39;user-agent&amp;#39;: &amp;#39;Mozilla/5.0Â\xa0(compatible;Â\xa0Baiduspider-render/2.0;Â\xa0+http://www.baidu.com/search/spider.html)&amp;#39;,
}

data = {
    &amp;#39;page&amp;#39;: &amp;#39;1&amp;#39;,
    &amp;#39;num&amp;#39;: &amp;#39;8&amp;#39;,
    &amp;#39;type&amp;#39;: &amp;#39;榜单&amp;#39;,
}

response = requests.post(&amp;#39;https://xxxn/web/webSiteCaNews&amp;#39;, headers=headers, data=data)
encrypt_data= response.json()[&amp;#39;encrypt_data&amp;#39;]
print(encrypt_data)

decrypt = execjs.compile(open(&amp;#39;./demo01.js&amp;#39;, &amp;#39;r&amp;#39;, encoding=&amp;#39;utf-8&amp;#39;).read()).call(&amp;#39;Z&amp;#39;,encrypt_data)
print(decrypt)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;demo01.js&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
